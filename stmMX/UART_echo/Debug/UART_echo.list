
UART_echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004aa8  08004aa8  00005aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ac0  08004ac0  0000614c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ac0  08004ac0  00005ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ac8  08004ac8  0000614c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ac8  08004ac8  00005ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ad0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004adc  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004b7c  000060ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000678  2000014c  08004c1c  0000614c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007c4  08004c1c  000067c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000614c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b94  00000000  00000000  0000617a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cec  00000000  00000000  00018d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e18  00000000  00000000  0001ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ac0  00000000  00000000  0001c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029022  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014123  00000000  00000000  000462fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f92db  00000000  00000000  0005a41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001536f8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000394c  00000000  00000000  0015373c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  00157088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004a90 	.word	0x08004a90

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08004a90 	.word	0x08004a90

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <MX_ETH_Init+0x84>)
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <MX_ETH_Init+0x88>)
 800056c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ETH_Init+0x8c>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ETH_Init+0x8c>)
 8000576:	2280      	movs	r2, #128	@ 0x80
 8000578:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ETH_Init+0x8c>)
 800057c:	22e1      	movs	r2, #225	@ 0xe1
 800057e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ETH_Init+0x8c>)
 8000582:	2200      	movs	r2, #0
 8000584:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000586:	4b1a      	ldr	r3, [pc, #104]	@ (80005f0 <MX_ETH_Init+0x8c>)
 8000588:	2200      	movs	r2, #0
 800058a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800058c:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <MX_ETH_Init+0x8c>)
 800058e:	2200      	movs	r2, #0
 8000590:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <MX_ETH_Init+0x84>)
 8000594:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <MX_ETH_Init+0x8c>)
 8000596:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000598:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <MX_ETH_Init+0x84>)
 800059a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800059e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80005a0:	4b11      	ldr	r3, [pc, #68]	@ (80005e8 <MX_ETH_Init+0x84>)
 80005a2:	4a14      	ldr	r2, [pc, #80]	@ (80005f4 <MX_ETH_Init+0x90>)
 80005a4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_ETH_Init+0x84>)
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <MX_ETH_Init+0x94>)
 80005aa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <MX_ETH_Init+0x84>)
 80005ae:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80005b2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005b4:	480c      	ldr	r0, [pc, #48]	@ (80005e8 <MX_ETH_Init+0x84>)
 80005b6:	f000 fe17 	bl	80011e8 <HAL_ETH_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80005c0:	f000 fa0e 	bl	80009e0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80005c4:	2238      	movs	r2, #56	@ 0x38
 80005c6:	2100      	movs	r1, #0
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <MX_ETH_Init+0x98>)
 80005ca:	f004 fa35 	bl	8004a38 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_ETH_Init+0x98>)
 80005d0:	2221      	movs	r2, #33	@ 0x21
 80005d2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <MX_ETH_Init+0x98>)
 80005d6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80005da:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005dc:	4b07      	ldr	r3, [pc, #28]	@ (80005fc <MX_ETH_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200001a0 	.word	0x200001a0
 80005ec:	40028000 	.word	0x40028000
 80005f0:	20000250 	.word	0x20000250
 80005f4:	200000ac 	.word	0x200000ac
 80005f8:	2000000c 	.word	0x2000000c
 80005fc:	20000168 	.word	0x20000168

08000600 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	@ 0x38
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a4e      	ldr	r2, [pc, #312]	@ (8000758 <HAL_ETH_MspInit+0x158>)
 800061e:	4293      	cmp	r3, r2
 8000620:	f040 8096 	bne.w	8000750 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000624:	4b4d      	ldr	r3, [pc, #308]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000628:	4a4c      	ldr	r2, [pc, #304]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800062e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000630:	4b4a      	ldr	r3, [pc, #296]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000638:	623b      	str	r3, [r7, #32]
 800063a:	6a3b      	ldr	r3, [r7, #32]
 800063c:	4b47      	ldr	r3, [pc, #284]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4a46      	ldr	r2, [pc, #280]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000646:	6313      	str	r3, [r2, #48]	@ 0x30
 8000648:	4b44      	ldr	r3, [pc, #272]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000650:	61fb      	str	r3, [r7, #28]
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	4b41      	ldr	r3, [pc, #260]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000658:	4a40      	ldr	r2, [pc, #256]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800065e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000660:	4b3e      	ldr	r3, [pc, #248]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000668:	61bb      	str	r3, [r7, #24]
 800066a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800066c:	4b3b      	ldr	r3, [pc, #236]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000670:	4a3a      	ldr	r2, [pc, #232]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000672:	f043 0304 	orr.w	r3, r3, #4
 8000676:	6313      	str	r3, [r2, #48]	@ 0x30
 8000678:	4b38      	ldr	r3, [pc, #224]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	f003 0304 	and.w	r3, r3, #4
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b35      	ldr	r3, [pc, #212]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000688:	4a34      	ldr	r2, [pc, #208]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000690:	4b32      	ldr	r3, [pc, #200]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a0:	4a2e      	ldr	r2, [pc, #184]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 80006a2:	f043 0302 	orr.w	r3, r3, #2
 80006a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a8:	4b2c      	ldr	r3, [pc, #176]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ac:	f003 0302 	and.w	r3, r3, #2
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b8:	4a28      	ldr	r2, [pc, #160]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 80006ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006be:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c0:	4b26      	ldr	r3, [pc, #152]	@ (800075c <HAL_ETH_MspInit+0x15c>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006cc:	2332      	movs	r3, #50	@ 0x32
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	230b      	movs	r3, #11
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006e4:	4619      	mov	r1, r3
 80006e6:	481e      	ldr	r0, [pc, #120]	@ (8000760 <HAL_ETH_MspInit+0x160>)
 80006e8:	f001 f8cc 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ec:	2386      	movs	r3, #134	@ 0x86
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000704:	4619      	mov	r1, r3
 8000706:	4817      	ldr	r0, [pc, #92]	@ (8000764 <HAL_ETH_MspInit+0x164>)
 8000708:	f001 f8bc 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071e:	230b      	movs	r3, #11
 8000720:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000726:	4619      	mov	r1, r3
 8000728:	480f      	ldr	r0, [pc, #60]	@ (8000768 <HAL_ETH_MspInit+0x168>)
 800072a:	f001 f8ab 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800072e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	@ (800076c <HAL_ETH_MspInit+0x16c>)
 800074c:	f001 f89a 	bl	8001884 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000750:	bf00      	nop
 8000752:	3738      	adds	r7, #56	@ 0x38
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40028000 	.word	0x40028000
 800075c:	40023800 	.word	0x40023800
 8000760:	40020800 	.word	0x40020800
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400
 800076c:	40021800 	.word	0x40021800

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b47      	ldr	r3, [pc, #284]	@ (80008a4 <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a46      	ldr	r2, [pc, #280]	@ (80008a4 <MX_GPIO_Init+0x134>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b44      	ldr	r3, [pc, #272]	@ (80008a4 <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	61bb      	str	r3, [r7, #24]
 800079c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b41      	ldr	r3, [pc, #260]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a40      	ldr	r2, [pc, #256]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b3b      	ldr	r3, [pc, #236]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a3a      	ldr	r2, [pc, #232]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a34      	ldr	r2, [pc, #208]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b32      	ldr	r3, [pc, #200]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e6:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a2e      	ldr	r2, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b2c      	ldr	r3, [pc, #176]	@ (80008a4 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a28      	ldr	r2, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0x134>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0181 	movw	r1, #16513	@ 0x4081
 800081c:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0x138>)
 800081e:	f001 f9dd 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	@ 0x40
 8000826:	4821      	ldr	r0, [pc, #132]	@ (80008ac <MX_GPIO_Init+0x13c>)
 8000828:	f001 f9d8 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0x140>)
 8000844:	f001 f81e 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000848:	f244 0381 	movw	r3, #16513	@ 0x4081
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <MX_GPIO_Init+0x138>)
 8000862:	f001 f80f 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x13c>)
 800087e:	f001 f801 	bl	8001884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000882:	2380      	movs	r3, #128	@ 0x80
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_GPIO_Init+0x13c>)
 8000896:	f000 fff5 	bl	8001884 <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	@ 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020800 	.word	0x40020800

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fa70 	bl	8000d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f81d 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f7ff ff55 	bl	8000770 <MX_GPIO_Init>
  MX_ETH_Init();
 80008c6:	f7ff fe4d 	bl	8000564 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008ca:	f000 f8ff 	bl	8000acc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008ce:	f000 f995 	bl	8000bfc <MX_USB_OTG_FS_PCD_Init>

  uint8_t rx_data;              // Single-byte buffer

    while (1) {
      // Blocking receive (waits forever for a byte)
      if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) {
 80008d2:	1df9      	adds	r1, r7, #7
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	2201      	movs	r2, #1
 80008da:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <main+0x44>)
 80008dc:	f002 fd05 	bl	80032ea <HAL_UART_Receive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1f5      	bne.n	80008d2 <main+0x1e>
        // Echo back the same byte
        HAL_UART_Transmit(&huart3, &rx_data, 1, HAL_MAX_DELAY);
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ec:	2201      	movs	r2, #1
 80008ee:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <main+0x44>)
 80008f0:	f002 fc72 	bl	80031d8 <HAL_UART_Transmit>
      if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) {
 80008f4:	e7ed      	b.n	80008d2 <main+0x1e>
 80008f6:	bf00      	nop
 80008f8:	20000258 	.word	0x20000258

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b094      	sub	sp, #80	@ 0x50
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	2234      	movs	r2, #52	@ 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f004 f894 	bl	8004a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000920:	f001 fab0 	bl	8001e84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	4a2b      	ldr	r2, [pc, #172]	@ (80009d8 <SystemClock_Config+0xdc>)
 800092a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000930:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <SystemClock_Config+0xdc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093c:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <SystemClock_Config+0xe0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000944:	4a25      	ldr	r2, [pc, #148]	@ (80009dc <SystemClock_Config+0xe0>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <SystemClock_Config+0xe0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800095c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800096a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800096c:	2304      	movs	r3, #4
 800096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000970:	2360      	movs	r3, #96	@ 0x60
 8000972:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097c:	2302      	movs	r3, #2
 800097e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fadd 	bl	8001f44 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000990:	f000 f826 	bl	80009e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000994:	f001 fa86 	bl	8001ea4 <HAL_PWREx_EnableOverDrive>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800099e:	f000 f81f 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2103      	movs	r1, #3
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fd6e 	bl	80024a0 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009ca:	f000 f809 	bl	80009e0 <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	@ 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <Error_Handler+0x8>

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <HAL_MspInit+0x44>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <HAL_MspInit+0x44>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <HAL_MspInit+0x44>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x44>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_MspInit+0x44>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_MspInit+0x44>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8a:	f000 f9c5 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a98:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <USART3_IRQHandler+0x10>)
 8000a9a:	f002 fcef 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000258 	.word	0x20000258

08000aa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aac:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <SystemInit+0x20>)
 8000aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <SystemInit+0x20>)
 8000ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000ad2:	4a15      	ldr	r2, [pc, #84]	@ (8000b28 <MX_USART3_UART_Init+0x5c>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	@ (8000b24 <MX_USART3_UART_Init+0x58>)
 8000b10:	f002 fb14 	bl	800313c <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f7ff ff61 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000258 	.word	0x20000258
 8000b28:	40004800 	.word	0x40004800

08000b2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b0ae      	sub	sp, #184	@ 0xb8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2290      	movs	r2, #144	@ 0x90
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 ff73 	bl	8004a38 <memset>
  if(uartHandle->Instance==USART3)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <HAL_UART_MspInit+0xc4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d144      	bne.n	8000be6 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b60:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 febe 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b76:	f7ff ff33 	bl	80009e0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b86:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a17      	ldr	r2, [pc, #92]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000b98:	f043 0308 	orr.w	r3, r3, #8
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_UART_MspInit+0xc8>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000baa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bc4:	2307      	movs	r3, #7
 8000bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <HAL_UART_MspInit+0xcc>)
 8000bd2:	f000 fe57 	bl	8001884 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2027      	movs	r0, #39	@ 0x27
 8000bdc:	f000 fa3b 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000be0:	2027      	movs	r0, #39	@ 0x27
 8000be2:	f000 fa54 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	37b8      	adds	r7, #184	@ 0xb8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	f000 ffe5 	bl	8001c0e <HAL_PCD_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f7ff fec9 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002e0 	.word	0x200002e0

08000c58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2290      	movs	r2, #144	@ 0x90
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fedd 	bl	8004a38 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c86:	d159      	bne.n	8000d3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c88:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000c8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fe27 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ca4:	f7ff fe9c 	bl	80009e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cac:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb4:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000ce8:	f000 fdcc 	bl	8001884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000d08:	f000 fdbc 	bl	8001884 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d10:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d16:	6353      	str	r3, [r2, #52]	@ 0x34
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d30:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	37b8      	adds	r7, #184	@ 0xb8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d50:	f7ff feaa 	bl	8000aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 fe65 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fd99 	bl	80008b4 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	08004ad0 	.word	0x08004ad0
  ldr r2, =_sbss
 8000d94:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d98:	200007c4 	.word	0x200007c4

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>

08000d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 f94c 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f805 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dae:	f7ff fe1d 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f967 	bl	80010aa <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f92f 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200007c0 	.word	0x200007c0

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200007c0 	.word	0x200007c0

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	@ (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	@ (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	@ (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	@ (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	@ 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	@ 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff8e 	bl	8000f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff29 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff3e 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff8e 	bl	8000f94 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5d 	bl	8000f40 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff31 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff feb6 	bl	8000e40 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e052      	b.n	800119a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0216 	bic.w	r2, r2, #22
 8001102:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	695a      	ldr	r2, [r3, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001112:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d103      	bne.n	8001124 <HAL_DMA_Abort+0x62>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001120:	2b00      	cmp	r3, #0
 8001122:	d007      	beq.n	8001134 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0208 	bic.w	r2, r2, #8
 8001132:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0201 	bic.w	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001144:	e013      	b.n	800116e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001146:	f7ff fe7b 	bl	8000e40 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b05      	cmp	r3, #5
 8001152:	d90c      	bls.n	800116e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2220      	movs	r2, #32
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2203      	movs	r2, #3
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e015      	b.n	800119a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1e4      	bne.n	8001146 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001180:	223f      	movs	r2, #63	@ 0x3f
 8001182:	409a      	lsls	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00c      	b.n	80011da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e086      	b.n	8001308 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2220      	movs	r2, #32
 8001208:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff f9f7 	bl	8000600 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <HAL_ETH_Init+0x128>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a3e      	ldr	r2, [pc, #248]	@ (8001310 <HAL_ETH_Init+0x128>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b3c      	ldr	r3, [pc, #240]	@ (8001310 <HAL_ETH_Init+0x128>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800122a:	4b3a      	ldr	r3, [pc, #232]	@ (8001314 <HAL_ETH_Init+0x12c>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a39      	ldr	r2, [pc, #228]	@ (8001314 <HAL_ETH_Init+0x12c>)
 8001230:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001234:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_ETH_Init+0x12c>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4935      	ldr	r1, [pc, #212]	@ (8001314 <HAL_ETH_Init+0x12c>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001244:	4b33      	ldr	r3, [pc, #204]	@ (8001314 <HAL_ETH_Init+0x12c>)
 8001246:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6812      	ldr	r2, [r2, #0]
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800125e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff fdee 	bl	8000e40 <HAL_GetTick>
 8001264:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001266:	e011      	b.n	800128c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001268:	f7ff fdea 	bl	8000e40 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001276:	d909      	bls.n	800128c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2204      	movs	r2, #4
 800127c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	22e0      	movs	r2, #224	@ 0xe0
 8001284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e03d      	b.n	8001308 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1e4      	bne.n	8001268 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f97a 	bl	8001598 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fa25 	bl	80016f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fa7b 	bl	80017a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	461a      	mov	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9e3 	bl	8001684 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80012cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_ETH_Init+0x130>)
 80012dc:	430b      	orrs	r3, r1
 80012de:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012f2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2210      	movs	r2, #16
 8001302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40013800 	.word	0x40013800
 8001318:	00020060 	.word	0x00020060

0800131c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <ETH_SetMACConfig+0x164>)
 8001332:	4013      	ands	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	7b9b      	ldrb	r3, [r3, #14]
 800133a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	7c12      	ldrb	r2, [r2, #16]
 8001340:	2a00      	cmp	r2, #0
 8001342:	d102      	bne.n	800134a <ETH_SetMACConfig+0x2e>
 8001344:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001348:	e000      	b.n	800134c <ETH_SetMACConfig+0x30>
 800134a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800134c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	7c52      	ldrb	r2, [r2, #17]
 8001352:	2a00      	cmp	r2, #0
 8001354:	d102      	bne.n	800135c <ETH_SetMACConfig+0x40>
 8001356:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800135a:	e000      	b.n	800135e <ETH_SetMACConfig+0x42>
 800135c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800135e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001364:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	7fdb      	ldrb	r3, [r3, #31]
 800136a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800136c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001372:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	7f92      	ldrb	r2, [r2, #30]
 8001378:	2a00      	cmp	r2, #0
 800137a:	d102      	bne.n	8001382 <ETH_SetMACConfig+0x66>
 800137c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001380:	e000      	b.n	8001384 <ETH_SetMACConfig+0x68>
 8001382:	2200      	movs	r2, #0
                        macconf->Speed |
 8001384:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	7f1b      	ldrb	r3, [r3, #28]
 800138a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800138c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001392:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800139a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	d102      	bne.n	80013ac <ETH_SetMACConfig+0x90>
 80013a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013aa:	e000      	b.n	80013ae <ETH_SetMACConfig+0x92>
 80013ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	7bdb      	ldrb	r3, [r3, #15]
 80013b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80013c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80013c6:	4313      	orrs	r3, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fd3a 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001402:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800140a:	2a00      	cmp	r2, #0
 800140c:	d101      	bne.n	8001412 <ETH_SetMACConfig+0xf6>
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	e000      	b.n	8001414 <ETH_SetMACConfig+0xf8>
 8001412:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001414:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800141a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001422:	2a01      	cmp	r2, #1
 8001424:	d101      	bne.n	800142a <ETH_SetMACConfig+0x10e>
 8001426:	2208      	movs	r2, #8
 8001428:	e000      	b.n	800142c <ETH_SetMACConfig+0x110>
 800142a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800142c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001434:	2a01      	cmp	r2, #1
 8001436:	d101      	bne.n	800143c <ETH_SetMACConfig+0x120>
 8001438:	2204      	movs	r2, #4
 800143a:	e000      	b.n	800143e <ETH_SetMACConfig+0x122>
 800143c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800143e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001446:	2a01      	cmp	r2, #1
 8001448:	d101      	bne.n	800144e <ETH_SetMACConfig+0x132>
 800144a:	2202      	movs	r2, #2
 800144c:	e000      	b.n	8001450 <ETH_SetMACConfig+0x134>
 800144e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001450:	4313      	orrs	r3, r2
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff fcf5 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	fd20810f 	.word	0xfd20810f

08001484 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <ETH_SetDMAConfig+0x110>)
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	7b1b      	ldrb	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <ETH_SetDMAConfig+0x2c>
 80014aa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014ae:	e000      	b.n	80014b2 <ETH_SetDMAConfig+0x2e>
 80014b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	7b5b      	ldrb	r3, [r3, #13]
 80014b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	7f52      	ldrb	r2, [r2, #29]
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d102      	bne.n	80014c8 <ETH_SetDMAConfig+0x44>
 80014c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80014c6:	e000      	b.n	80014ca <ETH_SetDMAConfig+0x46>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	7b9b      	ldrb	r3, [r3, #14]
 80014d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7f1b      	ldrb	r3, [r3, #28]
 80014de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7f9b      	ldrb	r3, [r3, #30]
 80014e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014f8:	4313      	orrs	r3, r2
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001508:	461a      	mov	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fc9c 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	791b      	ldrb	r3, [r3, #4]
 8001532:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001538:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800153e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001544:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800154c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800154e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001554:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001556:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800155c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001566:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800156a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff fc6d 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	f8de3f23 	.word	0xf8de3f23

08001598 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0a6      	sub	sp, #152	@ 0x98
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80015c2:	2301      	movs	r3, #1
 80015c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015da:	2300      	movs	r3, #0
 80015dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001600:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001604:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001606:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800160a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001612:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe7f 	bl	800131c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800161e:	2301      	movs	r3, #1
 8001620:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800162c:	2301      	movs	r3, #1
 800162e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001640:	2300      	movs	r3, #0
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800164e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001652:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001654:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001658:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800165a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001660:	2301      	movs	r3, #1
 8001662:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff05 	bl	8001484 <ETH_SetDMAConfig>
}
 800167a:	bf00      	nop
 800167c:	3798      	adds	r7, #152	@ 0x98
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3305      	adds	r3, #5
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	3204      	adds	r2, #4
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <ETH_MACAddressConfig+0x68>)
 80016a6:	4413      	add	r3, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3303      	adds	r3, #3
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	061a      	lsls	r2, r3, #24
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3302      	adds	r3, #2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	4313      	orrs	r3, r2
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	7812      	ldrb	r2, [r2, #0]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <ETH_MACAddressConfig+0x6c>)
 80016d6:	4413      	add	r3, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	6013      	str	r3, [r2, #0]
}
 80016de:	bf00      	nop
 80016e0:	371c      	adds	r7, #28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40028040 	.word	0x40028040
 80016f0:	40028044 	.word	0x40028044

080016f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e03e      	b.n	8001780 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	3206      	adds	r2, #6
 8001734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d80c      	bhi.n	8001764 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68d9      	ldr	r1, [r3, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	e004      	b.n	800176e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	461a      	mov	r2, r3
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b03      	cmp	r3, #3
 8001784:	d9bd      	bls.n	8001702 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001798:	611a      	str	r2, [r3, #16]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e048      	b.n	8001846 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6919      	ldr	r1, [r3, #16]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	440b      	add	r3, r1
 80017c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800180a:	68b9      	ldr	r1, [r7, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	3212      	adds	r2, #18
 8001812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d80c      	bhi.n	8001836 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6919      	ldr	r1, [r3, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	461a      	mov	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	e004      	b.n	8001840 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	461a      	mov	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	3301      	adds	r3, #1
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d9b3      	bls.n	80017b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691a      	ldr	r2, [r3, #16]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001876:	60da      	str	r2, [r3, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	e175      	b.n	8001b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018a4:	2201      	movs	r2, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	429a      	cmp	r2, r3
 80018be:	f040 8164 	bne.w	8001b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d005      	beq.n	80018da <HAL_GPIO_Init+0x56>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d130      	bne.n	800193c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001910:	2201      	movs	r2, #1
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 0201 	and.w	r2, r3, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b03      	cmp	r3, #3
 8001946:	d017      	beq.n	8001978 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d123      	bne.n	80019cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	220f      	movs	r2, #15
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691a      	ldr	r2, [r3, #16]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	08da      	lsrs	r2, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3208      	adds	r2, #8
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0203 	and.w	r2, r3, #3
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80be 	beq.w	8001b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a65      	ldr	r2, [pc, #404]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_GPIO_Init+0x324>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a26:	4a61      	ldr	r2, [pc, #388]	@ (8001bac <HAL_GPIO_Init+0x328>)
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	220f      	movs	r2, #15
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4013      	ands	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	@ (8001bb0 <HAL_GPIO_Init+0x32c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d037      	beq.n	8001ac2 <HAL_GPIO_Init+0x23e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a57      	ldr	r2, [pc, #348]	@ (8001bb4 <HAL_GPIO_Init+0x330>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_GPIO_Init+0x23a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a56      	ldr	r2, [pc, #344]	@ (8001bb8 <HAL_GPIO_Init+0x334>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d02b      	beq.n	8001aba <HAL_GPIO_Init+0x236>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a55      	ldr	r2, [pc, #340]	@ (8001bbc <HAL_GPIO_Init+0x338>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d025      	beq.n	8001ab6 <HAL_GPIO_Init+0x232>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a54      	ldr	r2, [pc, #336]	@ (8001bc0 <HAL_GPIO_Init+0x33c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x22e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a53      	ldr	r2, [pc, #332]	@ (8001bc4 <HAL_GPIO_Init+0x340>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d019      	beq.n	8001aae <HAL_GPIO_Init+0x22a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	@ (8001bc8 <HAL_GPIO_Init+0x344>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d013      	beq.n	8001aaa <HAL_GPIO_Init+0x226>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a51      	ldr	r2, [pc, #324]	@ (8001bcc <HAL_GPIO_Init+0x348>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00d      	beq.n	8001aa6 <HAL_GPIO_Init+0x222>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a50      	ldr	r2, [pc, #320]	@ (8001bd0 <HAL_GPIO_Init+0x34c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d007      	beq.n	8001aa2 <HAL_GPIO_Init+0x21e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd4 <HAL_GPIO_Init+0x350>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_GPIO_Init+0x21a>
 8001a9a:	2309      	movs	r3, #9
 8001a9c:	e012      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001a9e:	230a      	movs	r3, #10
 8001aa0:	e010      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	e00e      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00c      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00a      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aae:	2305      	movs	r3, #5
 8001ab0:	e008      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e004      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x240>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	f002 0203 	and.w	r2, r2, #3
 8001aca:	0092      	lsls	r2, r2, #2
 8001acc:	4093      	lsls	r3, r2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ad4:	4935      	ldr	r1, [pc, #212]	@ (8001bac <HAL_GPIO_Init+0x328>)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3302      	adds	r3, #2
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b06:	4a34      	ldr	r2, [pc, #208]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b30:	4a29      	ldr	r2, [pc, #164]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	f67f ae86 	bls.w	80018a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	3724      	adds	r7, #36	@ 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40013800 	.word	0x40013800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40020400 	.word	0x40020400
 8001bb8:	40020800 	.word	0x40020800
 8001bbc:	40020c00 	.word	0x40020c00
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40021400 	.word	0x40021400
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40021c00 	.word	0x40021c00
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40022400 	.word	0x40022400
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af02      	add	r7, sp, #8
 8001c14:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e108      	b.n	8001e32 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff f80c 	bl	8000c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c4e:	d102      	bne.n	8001c56 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fc50 	bl	8004500 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7c1a      	ldrb	r2, [r3, #16]
 8001c68:	f88d 2000 	strb.w	r2, [sp]
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c70:	f002 fbec 	bl	800444c <USB_CoreInit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0d5      	b.n	8001e32 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fc48 	bl	8004522 <USB_SetCurrentMode>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0c6      	b.n	8001e32 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e04a      	b.n	8001d40 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	2201      	movs	r2, #1
 8001cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	3314      	adds	r3, #20
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b298      	uxth	r0, r3
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	332e      	adds	r3, #46	@ 0x2e
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cea:	7bfa      	ldrb	r2, [r7, #15]
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3318      	adds	r3, #24
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	331c      	adds	r3, #28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	3320      	adds	r3, #32
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	3324      	adds	r3, #36	@ 0x24
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	791b      	ldrb	r3, [r3, #4]
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d3af      	bcc.n	8001caa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e044      	b.n	8001dda <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dbe:	7bfa      	ldrb	r2, [r7, #15]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3b5      	bcc.n	8001d50 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7c1a      	ldrb	r2, [r3, #16]
 8001dec:	f88d 2000 	strb.w	r2, [sp]
 8001df0:	3304      	adds	r3, #4
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	f002 fbe2 	bl	80045bc <USB_DevInit>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d005      	beq.n	8001e0a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e013      	b.n	8001e32 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7b1b      	ldrb	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d102      	bne.n	8001e26 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f80b 	bl	8001e3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fd9d 	bl	800496a <USB_DevDisconnect>

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001e6a:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <HAL_PCDEx_ActivateLPM+0x44>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	10000003 	.word	0x10000003

08001e84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b23      	ldr	r3, [pc, #140]	@ (8001f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a22      	ldr	r2, [pc, #136]	@ (8001f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b20      	ldr	r3, [pc, #128]	@ (8001f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed2:	f7fe ffb5 	bl	8000e40 <HAL_GetTick>
 8001ed6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ed8:	e009      	b.n	8001eee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001eda:	f7fe ffb1 	bl	8000e40 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ee8:	d901      	bls.n	8001eee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e022      	b.n	8001f34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001efa:	d1ee      	bne.n	8001eda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7fe ff9a 	bl	8000e40 <HAL_GetTick>
 8001f0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f0e:	e009      	b.n	8001f24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f10:	f7fe ff96 	bl	8000e40 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f1e:	d901      	bls.n	8001f24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e007      	b.n	8001f34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001f30:	d1ee      	bne.n	8001f10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e29b      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b96      	ldr	r3, [pc, #600]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f74:	4b93      	ldr	r3, [pc, #588]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62>
 8001f80:	4b90      	ldr	r3, [pc, #576]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <HAL_RCC_OscConfig+0x130>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d168      	bne.n	8002074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e275      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x7a>
 8001fb0:	4b84      	ldr	r3, [pc, #528]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a83      	ldr	r2, [pc, #524]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e02e      	b.n	800201c <HAL_RCC_OscConfig+0xd8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x9c>
 8001fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7e      	ldr	r2, [pc, #504]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a7b      	ldr	r2, [pc, #492]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xd8>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0xc0>
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a72      	ldr	r2, [pc, #456]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xd8>
 8002004:	4b6f      	ldr	r3, [pc, #444]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6e      	ldr	r2, [pc, #440]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b6c      	ldr	r3, [pc, #432]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7fe ff0c 	bl	8000e40 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe ff08 	bl	8000e40 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e229      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b61      	ldr	r3, [pc, #388]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xe8>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fef8 	bl	8000e40 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7fe fef4 	bl	8000e40 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e215      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b57      	ldr	r3, [pc, #348]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x110>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d069      	beq.n	8002156 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800208e:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x190>
 800209a:	4b4a      	ldr	r3, [pc, #296]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x17a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1e9      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	493d      	ldr	r1, [pc, #244]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e040      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d023      	beq.n	8002124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a38      	ldr	r2, [pc, #224]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe feaa 	bl	8000e40 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe fea6 	bl	8000e40 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1c7      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4929      	ldr	r1, [pc, #164]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
 8002122:	e018      	b.n	8002156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002124:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a26      	ldr	r2, [pc, #152]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fe86 	bl	8000e40 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002138:	f7fe fe82 	bl	8000e40 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1a3      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d038      	beq.n	80021d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d019      	beq.n	800219e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216e:	4a15      	ldr	r2, [pc, #84]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fe63 	bl	8000e40 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe fe5f 	bl	8000e40 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e180      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002190:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 8002192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x23a>
 800219c:	e01a      	b.n	80021d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80021a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a2:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <HAL_RCC_OscConfig+0x280>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7fe fe49 	bl	8000e40 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b2:	f7fe fe45 	bl	8000e40 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d903      	bls.n	80021c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e166      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
 80021c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b92      	ldr	r3, [pc, #584]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ee      	bne.n	80021b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a4 	beq.w	800232a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10d      	bne.n	800220a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b89      	ldr	r3, [pc, #548]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a88      	ldr	r2, [pc, #544]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b86      	ldr	r3, [pc, #536]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220a:	4b83      	ldr	r3, [pc, #524]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002216:	4b80      	ldr	r3, [pc, #512]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7f      	ldr	r2, [pc, #508]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe fe0d 	bl	8000e40 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe fe09 	bl	8000e40 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	@ 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e12a      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	4b76      	ldr	r3, [pc, #472]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x31a>
 8002250:	4b70      	ldr	r3, [pc, #448]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	4a6f      	ldr	r2, [pc, #444]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	@ 0x70
 800225c:	e02d      	b.n	80022ba <HAL_RCC_OscConfig+0x376>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x33c>
 8002266:	4b6b      	ldr	r3, [pc, #428]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226a:	4a6a      	ldr	r2, [pc, #424]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	@ 0x70
 8002272:	4b68      	ldr	r3, [pc, #416]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002276:	4a67      	ldr	r2, [pc, #412]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	6713      	str	r3, [r2, #112]	@ 0x70
 800227e:	e01c      	b.n	80022ba <HAL_RCC_OscConfig+0x376>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x35e>
 8002288:	4b62      	ldr	r3, [pc, #392]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a61      	ldr	r2, [pc, #388]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
 8002294:	4b5f      	ldr	r3, [pc, #380]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002298:	4a5e      	ldr	r2, [pc, #376]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a0:	e00b      	b.n	80022ba <HAL_RCC_OscConfig+0x376>
 80022a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ae:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b2:	4a58      	ldr	r2, [pc, #352]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d015      	beq.n	80022ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c2:	f7fe fdbd 	bl	8000e40 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe fdb9 	bl	8000e40 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0d8      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ee      	beq.n	80022ca <HAL_RCC_OscConfig+0x386>
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe fda7 	bl	8000e40 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fda3 	bl	8000e40 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0c2      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	4b41      	ldr	r3, [pc, #260]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ee      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a3c      	ldr	r2, [pc, #240]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80ae 	beq.w	8002490 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d06d      	beq.n	800241c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d14b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 800234e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fd74 	bl	8000e40 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe fd70 	bl	8000e40 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e091      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	071b      	lsls	r3, r3, #28
 80023a6:	491b      	ldr	r1, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fd42 	bl	8000e40 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe fd3e 	bl	8000e40 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e05f      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x47c>
 80023de:	e057      	b.n	8002490 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 80023e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd28 	bl	8000e40 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fd24 	bl	8000e40 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e045      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_RCC_OscConfig+0x4d0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x4b0>
 8002412:	e03d      	b.n	8002490 <HAL_RCC_OscConfig+0x54c>
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800241c:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <HAL_RCC_OscConfig+0x558>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d030      	beq.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002434:	429a      	cmp	r2, r3
 8002436:	d129      	bne.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d122      	bne.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800244c:	4013      	ands	r3, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002452:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002454:	4293      	cmp	r3, r2
 8002456:	d119      	bne.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	3b01      	subs	r3, #1
 8002466:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d10f      	bne.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d107      	bne.n	800248c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0d0      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d910      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b67      	ldr	r3, [pc, #412]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	4965      	ldr	r1, [pc, #404]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d040      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b41      	ldr	r3, [pc, #260]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e073      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06b      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b39      	ldr	r3, [pc, #228]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4936      	ldr	r1, [pc, #216]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002594:	f7fe fc54 	bl	8000e40 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fc50 	bl	8000e40 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e053      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b27      	ldr	r3, [pc, #156]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d210      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 020f 	bic.w	r2, r3, #15
 80025da:	4922      	ldr	r1, [pc, #136]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	@ (8002668 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	@ (800266c <HAL_RCC_ClockConfig+0x1cc>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1d0>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_ClockConfig+0x1d4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fbb0 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08004aa8 	.word	0x08004aa8
 8002670:	20000000 	.word	0x20000000
 8002674:	20000004 	.word	0x20000004

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b094      	sub	sp, #80	@ 0x50
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	647b      	str	r3, [r7, #68]	@ 0x44
 8002684:	2300      	movs	r3, #0
 8002686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002688:	2300      	movs	r3, #0
 800268a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4b79      	ldr	r3, [pc, #484]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 800269c:	2b08      	cmp	r3, #8
 800269e:	f200 80e1 	bhi.w	8002864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026aa:	e0db      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b73      	ldr	r3, [pc, #460]	@ (800287c <HAL_RCC_GetSysClockFreq+0x204>)
 80026ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b0:	e0db      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b73      	ldr	r3, [pc, #460]	@ (8002880 <HAL_RCC_GetSysClockFreq+0x208>)
 80026b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026b6:	e0d8      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026ea:	4622      	mov	r2, r4
 80026ec:	462b      	mov	r3, r5
 80026ee:	f04f 0000 	mov.w	r0, #0
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	0159      	lsls	r1, r3, #5
 80026f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fc:	0150      	lsls	r0, r2, #5
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4621      	mov	r1, r4
 8002704:	1a51      	subs	r1, r2, r1
 8002706:	6139      	str	r1, [r7, #16]
 8002708:	4629      	mov	r1, r5
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800271c:	4659      	mov	r1, fp
 800271e:	018b      	lsls	r3, r1, #6
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002726:	4651      	mov	r1, sl
 8002728:	018a      	lsls	r2, r1, #6
 800272a:	4651      	mov	r1, sl
 800272c:	ebb2 0801 	subs.w	r8, r2, r1
 8002730:	4659      	mov	r1, fp
 8002732:	eb63 0901 	sbc.w	r9, r3, r1
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274a:	4690      	mov	r8, r2
 800274c:	4699      	mov	r9, r3
 800274e:	4623      	mov	r3, r4
 8002750:	eb18 0303 	adds.w	r3, r8, r3
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	462b      	mov	r3, r5
 8002758:	eb49 0303 	adc.w	r3, r9, r3
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800276a:	4629      	mov	r1, r5
 800276c:	024b      	lsls	r3, r1, #9
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002774:	4621      	mov	r1, r4
 8002776:	024a      	lsls	r2, r1, #9
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277e:	2200      	movs	r2, #0
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002788:	f7fd fd56 	bl	8000238 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4613      	mov	r3, r2
 8002792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002794:	e058      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b38      	ldr	r3, [pc, #224]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	4611      	mov	r1, r2
 80027a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	f04f 0000 	mov.w	r0, #0
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	0159      	lsls	r1, r3, #5
 80027be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c2:	0150      	lsls	r0, r2, #5
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4641      	mov	r1, r8
 80027ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ce:	4649      	mov	r1, r9
 80027d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027e8:	ebb2 040a 	subs.w	r4, r2, sl
 80027ec:	eb63 050b 	sbc.w	r5, r3, fp
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	00eb      	lsls	r3, r5, #3
 80027fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fe:	00e2      	lsls	r2, r4, #3
 8002800:	4614      	mov	r4, r2
 8002802:	461d      	mov	r5, r3
 8002804:	4643      	mov	r3, r8
 8002806:	18e3      	adds	r3, r4, r3
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	464b      	mov	r3, r9
 800280c:	eb45 0303 	adc.w	r3, r5, r3
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281e:	4629      	mov	r1, r5
 8002820:	028b      	lsls	r3, r1, #10
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002828:	4621      	mov	r1, r4
 800282a:	028a      	lsls	r2, r1, #10
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002832:	2200      	movs	r2, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	61fa      	str	r2, [r7, #28]
 8002838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283c:	f7fd fcfc 	bl	8000238 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800285a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <HAL_RCC_GetSysClockFreq+0x204>)
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800286c:	4618      	mov	r0, r3
 800286e:	3750      	adds	r7, #80	@ 0x50
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200

08002884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	@ (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000000 	.word	0x20000000

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff0 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	@ (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	08004ab8 	.word	0x08004ab8

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffdc 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08004ab8 	.word	0x08004ab8

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002914:	4b69      	ldr	r3, [pc, #420]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a68      	ldr	r2, [pc, #416]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800291e:	6093      	str	r3, [r2, #8]
 8002920:	4b66      	ldr	r3, [pc, #408]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002928:	4964      	ldr	r1, [pc, #400]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4313      	orrs	r3, r2
 800292c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002936:	2301      	movs	r3, #1
 8002938:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d017      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002946:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002954:	4959      	ldr	r1, [pc, #356]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002964:	d101      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002966:	2301      	movs	r3, #1
 8002968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002982:	4b4e      	ldr	r3, [pc, #312]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002988:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	494a      	ldr	r1, [pc, #296]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029a0:	d101      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029ae:	2301      	movs	r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808b 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	4a39      	ldr	r2, [pc, #228]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029da:	6413      	str	r3, [r2, #64]	@ 0x40
 80029dc:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e8:	4b35      	ldr	r3, [pc, #212]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a34      	ldr	r2, [pc, #208]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f4:	f7fe fa24 	bl	8000e40 <HAL_GetTick>
 80029f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7fe fa20 	bl	8000e40 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e38f      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a1a:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d035      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d02e      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a38:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a52:	4a1a      	ldr	r2, [pc, #104]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a5a:	4a18      	ldr	r2, [pc, #96]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a60:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d114      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f9e8 	bl	8000e40 <HAL_GetTick>
 8002a70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a72:	e00a      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a74:	f7fe f9e4 	bl	8000e40 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e351      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0ee      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002aa2:	d111      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ab0:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	4901      	ldr	r1, [pc, #4]	@ (8002abc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40007000 	.word	0x40007000
 8002ac4:	0ffffcff 	.word	0x0ffffcff
 8002ac8:	4bac      	ldr	r3, [pc, #688]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4aab      	ldr	r2, [pc, #684]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ace:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ad2:	6093      	str	r3, [r2, #8]
 8002ad4:	4ba9      	ldr	r3, [pc, #676]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	49a6      	ldr	r1, [pc, #664]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002af2:	4ba2      	ldr	r3, [pc, #648]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002af8:	4aa0      	ldr	r2, [pc, #640]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b02:	4b9e      	ldr	r3, [pc, #632]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	499b      	ldr	r1, [pc, #620]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b20:	4b96      	ldr	r3, [pc, #600]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b2e:	4993      	ldr	r1, [pc, #588]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b42:	4b8e      	ldr	r3, [pc, #568]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b50:	498a      	ldr	r1, [pc, #552]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b64:	4b85      	ldr	r3, [pc, #532]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b72:	4982      	ldr	r1, [pc, #520]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b86:	4b7d      	ldr	r3, [pc, #500]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b94:	4979      	ldr	r1, [pc, #484]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba8:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	4971      	ldr	r1, [pc, #452]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bca:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd0:	f023 020c 	bic.w	r2, r3, #12
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bd8:	4968      	ldr	r1, [pc, #416]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bec:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfa:	4960      	ldr	r1, [pc, #384]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1c:	4957      	ldr	r1, [pc, #348]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c30:	4b52      	ldr	r3, [pc, #328]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3e:	494f      	ldr	r1, [pc, #316]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c52:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c60:	4946      	ldr	r1, [pc, #280]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c74:	4b41      	ldr	r3, [pc, #260]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	493e      	ldr	r1, [pc, #248]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c96:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ca4:	4935      	ldr	r1, [pc, #212]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002cc6:	492d      	ldr	r1, [pc, #180]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d011      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002cda:	4b28      	ldr	r3, [pc, #160]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce8:	4924      	ldr	r1, [pc, #144]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1a:	4b18      	ldr	r3, [pc, #96]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d28:	4914      	ldr	r1, [pc, #80]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d4c:	490b      	ldr	r1, [pc, #44]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d60:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d66:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d70:	4902      	ldr	r1, [pc, #8]	@ (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d78:	e002      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00b      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8c:	4b8a      	ldr	r3, [pc, #552]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9c:	4986      	ldr	r1, [pc, #536]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002db0:	4b81      	ldr	r3, [pc, #516]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc0:	497d      	ldr	r1, [pc, #500]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d006      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80d6 	beq.w	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ddc:	4b76      	ldr	r3, [pc, #472]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a75      	ldr	r2, [pc, #468]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002de2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de8:	f7fe f82a 	bl	8000e40 <HAL_GetTick>
 8002dec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002df0:	f7fe f826 	bl	8000e40 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	@ 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e195      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e02:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d021      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11d      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e22:	4b65      	ldr	r3, [pc, #404]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e30:	4b61      	ldr	r3, [pc, #388]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e36:	0e1b      	lsrs	r3, r3, #24
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	019a      	lsls	r2, r3, #6
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	041b      	lsls	r3, r3, #16
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	071b      	lsls	r3, r3, #28
 8002e56:	4958      	ldr	r1, [pc, #352]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d02e      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e88:	d129      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e98:	4b47      	ldr	r3, [pc, #284]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9e:	0f1b      	lsrs	r3, r3, #28
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	019a      	lsls	r2, r3, #6
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	493e      	ldr	r1, [pc, #248]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ecc:	f023 021f 	bic.w	r2, r3, #31
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	4938      	ldr	r1, [pc, #224]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01d      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eea:	4b33      	ldr	r3, [pc, #204]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efe:	0f1b      	lsrs	r3, r3, #28
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	019a      	lsls	r2, r3, #6
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	061b      	lsls	r3, r3, #24
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	071b      	lsls	r3, r3, #28
 8002f1e:	4926      	ldr	r1, [pc, #152]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d011      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	019a      	lsls	r2, r3, #6
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	491a      	ldr	r1, [pc, #104]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f56:	4b18      	ldr	r3, [pc, #96]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f62:	f7fd ff6d 	bl	8000e40 <HAL_GetTick>
 8002f66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f6a:	f7fd ff69 	bl	8000e40 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	@ 0x64
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0d8      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f0      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	f040 80ce 	bne.w	800312c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a08      	ldr	r2, [pc, #32]	@ (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fd ff50 	bl	8000e40 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa2:	e00b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa4:	f7fd ff4c 	bl	8000e40 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	@ 0x64
 8002fb0:	d904      	bls.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0bb      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fb6:	bf00      	nop
 8002fb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc8:	d0ec      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d009      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d02e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d12a      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ff2:	4b51      	ldr	r3, [pc, #324]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003000:	4b4d      	ldr	r3, [pc, #308]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	0f1b      	lsrs	r3, r3, #28
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	019a      	lsls	r2, r3, #6
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	061b      	lsls	r3, r3, #24
 8003020:	431a      	orrs	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	071b      	lsls	r3, r3, #28
 8003026:	4944      	ldr	r1, [pc, #272]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800302e:	4b42      	ldr	r3, [pc, #264]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003030:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003034:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	493d      	ldr	r1, [pc, #244]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800305c:	d11d      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003064:	0e1b      	lsrs	r3, r3, #24
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800306c:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	0f1b      	lsrs	r3, r3, #28
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	019a      	lsls	r2, r3, #6
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	071b      	lsls	r3, r3, #28
 8003092:	4929      	ldr	r1, [pc, #164]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d028      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030a6:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	0e1b      	lsrs	r3, r3, #24
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030b4:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	019a      	lsls	r2, r3, #6
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	041b      	lsls	r3, r3, #16
 80030cc:	431a      	orrs	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	071b      	lsls	r3, r3, #28
 80030da:	4917      	ldr	r1, [pc, #92]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030e2:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	4911      	ldr	r1, [pc, #68]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fd fe9c 	bl	8000e40 <HAL_GetTick>
 8003108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310c:	f7fd fe98 	bl	8000e40 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e007      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800311e:	4b06      	ldr	r3, [pc, #24]	@ (8003138 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800312a:	d1ef      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e040      	b.n	80031d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fce4 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	@ 0x24
 8003168:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0201 	bic.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d002      	beq.n	8003188 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 ff0a 	bl	8003f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fca3 	bl	8003ad4 <UART_SetConfig>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e01b      	b.n	80031d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0201 	orr.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 ff89 	bl	80040e0 <UART_CheckIdleState>
 80031ce:	4603      	mov	r3, r0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	@ 0x28
 80031dc:	af02      	add	r7, sp, #8
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d177      	bne.n	80032e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_UART_Transmit+0x24>
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e070      	b.n	80032e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2221      	movs	r2, #33	@ 0x21
 800320c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320e:	f7fd fe17 	bl	8000e40 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x68>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003248:	e02f      	b.n	80032aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	@ 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 ffeb 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e03b      	b.n	80032e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10b      	bne.n	8003288 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	461a      	mov	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3302      	adds	r3, #2
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	e007      	b.n	8003298 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3301      	adds	r3, #1
 8003296:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1c9      	bne.n	800324a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	@ 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 ffb5 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e005      	b.n	80032e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b08a      	sub	sp, #40	@ 0x28
 80032ee:	af02      	add	r7, sp, #8
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003300:	2b20      	cmp	r3, #32
 8003302:	f040 80b5 	bne.w	8003470 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <HAL_UART_Receive+0x28>
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e0ad      	b.n	8003472 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2222      	movs	r2, #34	@ 0x22
 8003322:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800332c:	f7fd fd88 	bl	8000e40 <HAL_GetTick>
 8003330:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800334a:	d10e      	bne.n	800336a <HAL_UART_Receive+0x80>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d105      	bne.n	8003360 <HAL_UART_Receive+0x76>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800335a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800335e:	e02d      	b.n	80033bc <HAL_UART_Receive+0xd2>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	@ 0xff
 8003364:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003368:	e028      	b.n	80033bc <HAL_UART_Receive+0xd2>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_UART_Receive+0xa4>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d104      	bne.n	8003384 <HAL_UART_Receive+0x9a>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	@ 0xff
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003382:	e01b      	b.n	80033bc <HAL_UART_Receive+0xd2>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	227f      	movs	r2, #127	@ 0x7f
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800338c:	e016      	b.n	80033bc <HAL_UART_Receive+0xd2>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003396:	d10d      	bne.n	80033b4 <HAL_UART_Receive+0xca>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d104      	bne.n	80033aa <HAL_UART_Receive+0xc0>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	227f      	movs	r2, #127	@ 0x7f
 80033a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033a8:	e008      	b.n	80033bc <HAL_UART_Receive+0xd2>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	223f      	movs	r2, #63	@ 0x3f
 80033ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80033b2:	e003      	b.n	80033bc <HAL_UART_Receive+0xd2>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033cc:	d108      	bne.n	80033e0 <HAL_UART_Receive+0xf6>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d104      	bne.n	80033e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e003      	b.n	80033e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80033e8:	e036      	b.n	8003458 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2120      	movs	r1, #32
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 ff1b 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2220      	movs	r2, #32
 8003404:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e032      	b.n	8003472 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	b29a      	uxth	r2, r3
 800341a:	8a7b      	ldrh	r3, [r7, #18]
 800341c:	4013      	ands	r3, r2
 800341e:	b29a      	uxth	r2, r3
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	3302      	adds	r3, #2
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e00c      	b.n	8003446 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	b2da      	uxtb	r2, r3
 8003434:	8a7b      	ldrh	r3, [r7, #18]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	4013      	ands	r3, r2
 800343a:	b2da      	uxtb	r2, r3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	3301      	adds	r3, #1
 8003444:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1c2      	bne.n	80033ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
	...

0800347c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ba      	sub	sp, #232	@ 0xe8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80034a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80034aa:	4013      	ands	r3, r2
 80034ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80034b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 82c6 	beq.w	8003a66 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
      return;
 80034e2:	e2c0      	b.n	8003a66 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8117 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80034fe:	4b85      	ldr	r3, [pc, #532]	@ (8003714 <HAL_UART_IRQHandler+0x298>)
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 810a 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d011      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 822c 	beq.w	8003a6a <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d005      	beq.n	800365e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04f      	beq.n	80036fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fe53 	bl	800430a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366e:	2b40      	cmp	r3, #64	@ 0x40
 8003670:	d141      	bne.n	80036f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800368c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800369e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d9      	bne.n	8003672 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ca:	4a13      	ldr	r2, [pc, #76]	@ (8003718 <HAL_UART_IRQHandler+0x29c>)
 80036cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd65 	bl	80011a2 <HAL_DMA_Abort_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00f      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9d0 	bl	8003a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00b      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9cc 	bl	8003a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e007      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9c8 	bl	8003a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800370c:	e1ad      	b.n	8003a6a <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370e:	bf00      	nop
    return;
 8003710:	e1ab      	b.n	8003a6a <HAL_UART_IRQHandler+0x5ee>
 8003712:	bf00      	nop
 8003714:	04000120 	.word	0x04000120
 8003718:	080043d3 	.word	0x080043d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 8166 	bne.w	80039f2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 815f 	beq.w	80039f2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8158 	beq.w	80039f2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003754:	2b40      	cmp	r3, #64	@ 0x40
 8003756:	f040 80d0 	bne.w	80038fa <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003766:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 80ab 	beq.w	80038c6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800377a:	429a      	cmp	r2, r3
 800377c:	f080 80a3 	bcs.w	80038c6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003786:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003794:	f000 8086 	beq.w	80038a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80037c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80037ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1da      	bne.n	8003798 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3308      	adds	r3, #8
 80037e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003806:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800380a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800380e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1e1      	bne.n	80037e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3308      	adds	r3, #8
 8003824:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800382e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3308      	adds	r3, #8
 800383e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003842:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003848:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e3      	bne.n	800381e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003886:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003888:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800388c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e4      	bne.n	8003864 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fc0f 	bl	80010c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8f2 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80038c4:	e0d3      	b.n	8003a6e <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038d0:	429a      	cmp	r2, r3
 80038d2:	f040 80cc 	bne.w	8003a6e <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	f040 80c5 	bne.w	8003a6e <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f8d8 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
      return;
 80038f8:	e0b9      	b.n	8003a6e <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003906:	b29b      	uxth	r3, r3
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80ab 	beq.w	8003a72 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 800391c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a6 	beq.w	8003a72 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800393a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003948:	647b      	str	r3, [r7, #68]	@ 0x44
 800394a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800394e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e4      	bne.n	8003926 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	3308      	adds	r3, #8
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	623b      	str	r3, [r7, #32]
   return(result);
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3308      	adds	r3, #8
 800397c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003980:	633a      	str	r2, [r7, #48]	@ 0x30
 8003982:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003984:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003988:	e841 2300 	strex	r3, r2, [r1]
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1e3      	bne.n	800395c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	e853 3f00 	ldrex	r3, [r3]
 80039b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	69b9      	ldr	r1, [r7, #24]
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	e841 2300 	strex	r3, r2, [r1]
 80039d6:	617b      	str	r3, [r7, #20]
   return(result);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1e4      	bne.n	80039a8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f85c 	bl	8003aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f0:	e03f      	b.n	8003a72 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00e      	beq.n	8003a1c <HAL_UART_IRQHandler+0x5a0>
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f853 	bl	8003ac0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a1a:	e02d      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d01c      	beq.n	8003a76 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
    }
    return;
 8003a44:	e017      	b.n	8003a76 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d012      	beq.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fcc9 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 8003a64:	e008      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8003a66:	bf00      	nop
 8003a68:	e006      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
    return;
 8003a6a:	bf00      	nop
 8003a6c:	e004      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8003a6e:	bf00      	nop
 8003a70:	e002      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
      return;
 8003a72:	bf00      	nop
 8003a74:	e000      	b.n	8003a78 <HAL_UART_IRQHandler+0x5fc>
    return;
 8003a76:	bf00      	nop
  }

}
 8003a78:	37e8      	adds	r7, #232	@ 0xe8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop

08003a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4ba6      	ldr	r3, [pc, #664]	@ (8003d98 <UART_SetConfig+0x2c4>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a94      	ldr	r2, [pc, #592]	@ (8003d9c <UART_SetConfig+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d120      	bne.n	8003b92 <UART_SetConfig+0xbe>
 8003b50:	4b93      	ldr	r3, [pc, #588]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d816      	bhi.n	8003b8c <UART_SetConfig+0xb8>
 8003b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <UART_SetConfig+0x90>)
 8003b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b81 	.word	0x08003b81
 8003b6c:	08003b7b 	.word	0x08003b7b
 8003b70:	08003b87 	.word	0x08003b87
 8003b74:	2301      	movs	r3, #1
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e150      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	e14d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b80:	2304      	movs	r3, #4
 8003b82:	77fb      	strb	r3, [r7, #31]
 8003b84:	e14a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b86:	2308      	movs	r3, #8
 8003b88:	77fb      	strb	r3, [r7, #31]
 8003b8a:	e147      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	77fb      	strb	r3, [r7, #31]
 8003b90:	e144      	b.n	8003e1c <UART_SetConfig+0x348>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a83      	ldr	r2, [pc, #524]	@ (8003da4 <UART_SetConfig+0x2d0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d132      	bne.n	8003c02 <UART_SetConfig+0x12e>
 8003b9c:	4b80      	ldr	r3, [pc, #512]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba2:	f003 030c 	and.w	r3, r3, #12
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d828      	bhi.n	8003bfc <UART_SetConfig+0x128>
 8003baa:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <UART_SetConfig+0xdc>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003bfd 	.word	0x08003bfd
 8003bb8:	08003bfd 	.word	0x08003bfd
 8003bbc:	08003bfd 	.word	0x08003bfd
 8003bc0:	08003bf1 	.word	0x08003bf1
 8003bc4:	08003bfd 	.word	0x08003bfd
 8003bc8:	08003bfd 	.word	0x08003bfd
 8003bcc:	08003bfd 	.word	0x08003bfd
 8003bd0:	08003beb 	.word	0x08003beb
 8003bd4:	08003bfd 	.word	0x08003bfd
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003bfd 	.word	0x08003bfd
 8003be0:	08003bf7 	.word	0x08003bf7
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e118      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bea:	2302      	movs	r3, #2
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e115      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e112      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e10f      	b.n	8003e1c <UART_SetConfig+0x348>
 8003bfc:	2310      	movs	r3, #16
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e10c      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <UART_SetConfig+0x2d4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d120      	bne.n	8003c4e <UART_SetConfig+0x17a>
 8003c0c:	4b64      	ldr	r3, [pc, #400]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c12:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c16:	2b30      	cmp	r3, #48	@ 0x30
 8003c18:	d013      	beq.n	8003c42 <UART_SetConfig+0x16e>
 8003c1a:	2b30      	cmp	r3, #48	@ 0x30
 8003c1c:	d814      	bhi.n	8003c48 <UART_SetConfig+0x174>
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d009      	beq.n	8003c36 <UART_SetConfig+0x162>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d810      	bhi.n	8003c48 <UART_SetConfig+0x174>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <UART_SetConfig+0x15c>
 8003c2a:	2b10      	cmp	r3, #16
 8003c2c:	d006      	beq.n	8003c3c <UART_SetConfig+0x168>
 8003c2e:	e00b      	b.n	8003c48 <UART_SetConfig+0x174>
 8003c30:	2300      	movs	r3, #0
 8003c32:	77fb      	strb	r3, [r7, #31]
 8003c34:	e0f2      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c36:	2302      	movs	r3, #2
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e0ef      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e0ec      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c42:	2308      	movs	r3, #8
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e0e9      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e0e6      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	@ (8003dac <UART_SetConfig+0x2d8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d120      	bne.n	8003c9a <UART_SetConfig+0x1c6>
 8003c58:	4b51      	ldr	r3, [pc, #324]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c62:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c64:	d013      	beq.n	8003c8e <UART_SetConfig+0x1ba>
 8003c66:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c68:	d814      	bhi.n	8003c94 <UART_SetConfig+0x1c0>
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d009      	beq.n	8003c82 <UART_SetConfig+0x1ae>
 8003c6e:	2b80      	cmp	r3, #128	@ 0x80
 8003c70:	d810      	bhi.n	8003c94 <UART_SetConfig+0x1c0>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <UART_SetConfig+0x1a8>
 8003c76:	2b40      	cmp	r3, #64	@ 0x40
 8003c78:	d006      	beq.n	8003c88 <UART_SetConfig+0x1b4>
 8003c7a:	e00b      	b.n	8003c94 <UART_SetConfig+0x1c0>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	77fb      	strb	r3, [r7, #31]
 8003c80:	e0cc      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c82:	2302      	movs	r3, #2
 8003c84:	77fb      	strb	r3, [r7, #31]
 8003c86:	e0c9      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	77fb      	strb	r3, [r7, #31]
 8003c8c:	e0c6      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c8e:	2308      	movs	r3, #8
 8003c90:	77fb      	strb	r3, [r7, #31]
 8003c92:	e0c3      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c94:	2310      	movs	r3, #16
 8003c96:	77fb      	strb	r3, [r7, #31]
 8003c98:	e0c0      	b.n	8003e1c <UART_SetConfig+0x348>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a44      	ldr	r2, [pc, #272]	@ (8003db0 <UART_SetConfig+0x2dc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d125      	bne.n	8003cf0 <UART_SetConfig+0x21c>
 8003ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb2:	d017      	beq.n	8003ce4 <UART_SetConfig+0x210>
 8003cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb8:	d817      	bhi.n	8003cea <UART_SetConfig+0x216>
 8003cba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cbe:	d00b      	beq.n	8003cd8 <UART_SetConfig+0x204>
 8003cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cc4:	d811      	bhi.n	8003cea <UART_SetConfig+0x216>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <UART_SetConfig+0x1fe>
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cce:	d006      	beq.n	8003cde <UART_SetConfig+0x20a>
 8003cd0:	e00b      	b.n	8003cea <UART_SetConfig+0x216>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	77fb      	strb	r3, [r7, #31]
 8003cd6:	e0a1      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	77fb      	strb	r3, [r7, #31]
 8003cdc:	e09e      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cde:	2304      	movs	r3, #4
 8003ce0:	77fb      	strb	r3, [r7, #31]
 8003ce2:	e09b      	b.n	8003e1c <UART_SetConfig+0x348>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e098      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cea:	2310      	movs	r3, #16
 8003cec:	77fb      	strb	r3, [r7, #31]
 8003cee:	e095      	b.n	8003e1c <UART_SetConfig+0x348>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003db4 <UART_SetConfig+0x2e0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d125      	bne.n	8003d46 <UART_SetConfig+0x272>
 8003cfa:	4b29      	ldr	r3, [pc, #164]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d08:	d017      	beq.n	8003d3a <UART_SetConfig+0x266>
 8003d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d0e:	d817      	bhi.n	8003d40 <UART_SetConfig+0x26c>
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d14:	d00b      	beq.n	8003d2e <UART_SetConfig+0x25a>
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1a:	d811      	bhi.n	8003d40 <UART_SetConfig+0x26c>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <UART_SetConfig+0x254>
 8003d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d24:	d006      	beq.n	8003d34 <UART_SetConfig+0x260>
 8003d26:	e00b      	b.n	8003d40 <UART_SetConfig+0x26c>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e076      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e073      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d34:	2304      	movs	r3, #4
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e070      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e06d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]
 8003d44:	e06a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <UART_SetConfig+0x2e4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d138      	bne.n	8003dc2 <UART_SetConfig+0x2ee>
 8003d50:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <UART_SetConfig+0x2cc>)
 8003d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d5e:	d017      	beq.n	8003d90 <UART_SetConfig+0x2bc>
 8003d60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d64:	d82a      	bhi.n	8003dbc <UART_SetConfig+0x2e8>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d00b      	beq.n	8003d84 <UART_SetConfig+0x2b0>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d70:	d824      	bhi.n	8003dbc <UART_SetConfig+0x2e8>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <UART_SetConfig+0x2aa>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d7a:	d006      	beq.n	8003d8a <UART_SetConfig+0x2b6>
 8003d7c:	e01e      	b.n	8003dbc <UART_SetConfig+0x2e8>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]
 8003d82:	e04b      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d84:	2302      	movs	r3, #2
 8003d86:	77fb      	strb	r3, [r7, #31]
 8003d88:	e048      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	77fb      	strb	r3, [r7, #31]
 8003d8e:	e045      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d90:	2308      	movs	r3, #8
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e042      	b.n	8003e1c <UART_SetConfig+0x348>
 8003d96:	bf00      	nop
 8003d98:	efff69f3 	.word	0xefff69f3
 8003d9c:	40011000 	.word	0x40011000
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40004400 	.word	0x40004400
 8003da8:	40004800 	.word	0x40004800
 8003dac:	40004c00 	.word	0x40004c00
 8003db0:	40005000 	.word	0x40005000
 8003db4:	40011400 	.word	0x40011400
 8003db8:	40007800 	.word	0x40007800
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e02c      	b.n	8003e1c <UART_SetConfig+0x348>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a72      	ldr	r2, [pc, #456]	@ (8003f90 <UART_SetConfig+0x4bc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d125      	bne.n	8003e18 <UART_SetConfig+0x344>
 8003dcc:	4b71      	ldr	r3, [pc, #452]	@ (8003f94 <UART_SetConfig+0x4c0>)
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003dd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003dda:	d017      	beq.n	8003e0c <UART_SetConfig+0x338>
 8003ddc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003de0:	d817      	bhi.n	8003e12 <UART_SetConfig+0x33e>
 8003de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de6:	d00b      	beq.n	8003e00 <UART_SetConfig+0x32c>
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	d811      	bhi.n	8003e12 <UART_SetConfig+0x33e>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <UART_SetConfig+0x326>
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df6:	d006      	beq.n	8003e06 <UART_SetConfig+0x332>
 8003df8:	e00b      	b.n	8003e12 <UART_SetConfig+0x33e>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e00d      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e00:	2302      	movs	r3, #2
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e00a      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e06:	2304      	movs	r3, #4
 8003e08:	77fb      	strb	r3, [r7, #31]
 8003e0a:	e007      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e004      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e12:	2310      	movs	r3, #16
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e001      	b.n	8003e1c <UART_SetConfig+0x348>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e24:	d15b      	bne.n	8003ede <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003e26:	7ffb      	ldrb	r3, [r7, #31]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d828      	bhi.n	8003e7e <UART_SetConfig+0x3aa>
 8003e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e34 <UART_SetConfig+0x360>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	08003e7f 	.word	0x08003e7f
 8003e44:	08003e6f 	.word	0x08003e6f
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003e7f 	.word	0x08003e7f
 8003e50:	08003e7f 	.word	0x08003e7f
 8003e54:	08003e77 	.word	0x08003e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fe fd20 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61b8      	str	r0, [r7, #24]
        break;
 8003e5e:	e013      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e60:	f7fe fd30 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8003e64:	61b8      	str	r0, [r7, #24]
        break;
 8003e66:	e00f      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b4b      	ldr	r3, [pc, #300]	@ (8003f98 <UART_SetConfig+0x4c4>)
 8003e6a:	61bb      	str	r3, [r7, #24]
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe fc03 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8003e72:	61b8      	str	r0, [r7, #24]
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7a:	61bb      	str	r3, [r7, #24]
        break;
 8003e7c:	e004      	b.n	8003e88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	77bb      	strb	r3, [r7, #30]
        break;
 8003e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d074      	beq.n	8003f78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	005a      	lsls	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d916      	bls.n	8003ed8 <UART_SetConfig+0x404>
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d212      	bcs.n	8003ed8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	085b      	lsrs	r3, r3, #1
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	89fb      	ldrh	r3, [r7, #14]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	89fa      	ldrh	r2, [r7, #14]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e04f      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	77bb      	strb	r3, [r7, #30]
 8003edc:	e04c      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d828      	bhi.n	8003f36 <UART_SetConfig+0x462>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <UART_SetConfig+0x418>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f11 	.word	0x08003f11
 8003ef0:	08003f19 	.word	0x08003f19
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	08003f37 	.word	0x08003f37
 8003efc:	08003f27 	.word	0x08003f27
 8003f00:	08003f37 	.word	0x08003f37
 8003f04:	08003f37 	.word	0x08003f37
 8003f08:	08003f37 	.word	0x08003f37
 8003f0c:	08003f2f 	.word	0x08003f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f10:	f7fe fcc4 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 8003f14:	61b8      	str	r0, [r7, #24]
        break;
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f18:	f7fe fcd4 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8003f1c:	61b8      	str	r0, [r7, #24]
        break;
 8003f1e:	e00f      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <UART_SetConfig+0x4c4>)
 8003f22:	61bb      	str	r3, [r7, #24]
        break;
 8003f24:	e00c      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f26:	f7fe fba7 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8003f2a:	61b8      	str	r0, [r7, #24]
        break;
 8003f2c:	e008      	b.n	8003f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f32:	61bb      	str	r3, [r7, #24]
        break;
 8003f34:	e004      	b.n	8003f40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d018      	beq.n	8003f78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	085a      	lsrs	r2, r3, #1
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	441a      	add	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b0f      	cmp	r3, #15
 8003f5e:	d909      	bls.n	8003f74 <UART_SetConfig+0x4a0>
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f66:	d205      	bcs.n	8003f74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	e001      	b.n	8003f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40007c00 	.word	0x40007c00
 8003f94:	40023800 	.word	0x40023800
 8003f98:	00f42400 	.word	0x00f42400

08003f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800409a:	d10a      	bne.n	80040b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b098      	sub	sp, #96	@ 0x60
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040f0:	f7fc fea6 	bl	8000e40 <HAL_GetTick>
 80040f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b08      	cmp	r3, #8
 8004102:	d12e      	bne.n	8004162 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004104:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	2200      	movs	r2, #0
 800410e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f88c 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800412c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004132:	653b      	str	r3, [r7, #80]	@ 0x50
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800413c:	647b      	str	r3, [r7, #68]	@ 0x44
 800413e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800414a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e6      	bne.n	800411e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e062      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d149      	bne.n	8004204 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004170:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	2200      	movs	r2, #0
 800417a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f856 	bl	8004230 <UART_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03c      	beq.n	8004204 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	623b      	str	r3, [r7, #32]
   return(result);
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80041aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e6      	bne.n	800418a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3308      	adds	r3, #8
 80041c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041dc:	61fa      	str	r2, [r7, #28]
 80041de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	69b9      	ldr	r1, [r7, #24]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e011      	b.n	8004228 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3758      	adds	r7, #88	@ 0x58
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	e04f      	b.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004248:	d04b      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800424a:	f7fc fdf9 	bl	8000e40 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	429a      	cmp	r2, r3
 8004258:	d302      	bcc.n	8004260 <UART_WaitOnFlagUntilTimeout+0x30>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e04e      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d037      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b80      	cmp	r3, #128	@ 0x80
 8004276:	d034      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b40      	cmp	r3, #64	@ 0x40
 800427c:	d031      	beq.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d110      	bne.n	80042ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2208      	movs	r2, #8
 8004292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 f838 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2208      	movs	r2, #8
 800429e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e029      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042bc:	d111      	bne.n	80042e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 f81e 	bl	800430a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e00f      	b.n	8004302 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4013      	ands	r3, r2
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	bf0c      	ite	eq
 80042f2:	2301      	moveq	r3, #1
 80042f4:	2300      	movne	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d0a0      	beq.n	8004242 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430a:	b480      	push	{r7}
 800430c:	b095      	sub	sp, #84	@ 0x54
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004330:	643b      	str	r3, [r7, #64]	@ 0x40
 8004332:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004336:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	61fb      	str	r3, [r7, #28]
   return(result);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800436a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800437c:	2b01      	cmp	r3, #1
 800437e:	d118      	bne.n	80043b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	60bb      	str	r3, [r7, #8]
   return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	f023 0310 	bic.w	r3, r3, #16
 8004394:	647b      	str	r3, [r7, #68]	@ 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e6      	bne.n	8004380 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043c6:	bf00      	nop
 80043c8:	3754      	adds	r7, #84	@ 0x54
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f7ff fb53 	bl	8003a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b088      	sub	sp, #32
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	60bb      	str	r3, [r7, #8]
   return(result);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	613b      	str	r3, [r7, #16]
   return(result);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff fb1f 	bl	8003a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800444c:	b084      	sub	sp, #16
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	f107 001c 	add.w	r0, r7, #28
 800445a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800445e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004462:	2b01      	cmp	r3, #1
 8004464:	d121      	bne.n	80044aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	4b21      	ldr	r3, [pc, #132]	@ (80044fc <USB_CoreInit+0xb0>)
 8004478:	4013      	ands	r3, r2
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800448a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800448e:	2b01      	cmp	r3, #1
 8004490:	d105      	bne.n	800449e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fa92 	bl	80049c8 <USB_CoreReset>
 80044a4:	4603      	mov	r3, r0
 80044a6:	73fb      	strb	r3, [r7, #15]
 80044a8:	e010      	b.n	80044cc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa86 	bl	80049c8 <USB_CoreReset>
 80044bc:	4603      	mov	r3, r0
 80044be:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80044cc:	7fbb      	ldrb	r3, [r7, #30]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10b      	bne.n	80044ea <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f043 0206 	orr.w	r2, r3, #6
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044f6:	b004      	add	sp, #16
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	ffbdffbf 	.word	0xffbdffbf

08004500 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 0201 	bic.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d115      	bne.n	8004570 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004550:	200a      	movs	r0, #10
 8004552:	f7fc fc81 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	330a      	adds	r3, #10
 800455a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fa25 	bl	80049ac <USB_GetMode>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d01e      	beq.n	80045a6 <USB_SetCurrentMode+0x84>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2bc7      	cmp	r3, #199	@ 0xc7
 800456c:	d9f0      	bls.n	8004550 <USB_SetCurrentMode+0x2e>
 800456e:	e01a      	b.n	80045a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d115      	bne.n	80045a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004582:	200a      	movs	r0, #10
 8004584:	f7fc fc68 	bl	8000e58 <HAL_Delay>
      ms += 10U;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	330a      	adds	r3, #10
 800458c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa0c 	bl	80049ac <USB_GetMode>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <USB_SetCurrentMode+0x84>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2bc7      	cmp	r3, #199	@ 0xc7
 800459e:	d9f0      	bls.n	8004582 <USB_SetCurrentMode+0x60>
 80045a0:	e001      	b.n	80045a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e005      	b.n	80045b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2bc8      	cmp	r3, #200	@ 0xc8
 80045aa:	d101      	bne.n	80045b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045bc:	b084      	sub	sp, #16
 80045be:	b580      	push	{r7, lr}
 80045c0:	b086      	sub	sp, #24
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e009      	b.n	80045f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3340      	adds	r3, #64	@ 0x40
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	2200      	movs	r2, #0
 80045e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3301      	adds	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0e      	cmp	r3, #14
 80045f4:	d9f2      	bls.n	80045dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11c      	bne.n	8004638 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e005      	b.n	8004644 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004650:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004654:	2b01      	cmp	r3, #1
 8004656:	d10d      	bne.n	8004674 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f968 	bl	8004938 <USB_SetDevSpeed>
 8004668:	e008      	b.n	800467c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800466a:	2101      	movs	r1, #1
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f963 	bl	8004938 <USB_SetDevSpeed>
 8004672:	e003      	b.n	800467c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004674:	2103      	movs	r1, #3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f95e 	bl	8004938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800467c:	2110      	movs	r1, #16
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8fa 	bl	8004878 <USB_FlushTxFifo>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f924 	bl	80048dc <USB_FlushRxFifo>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e043      	b.n	8004750 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046de:	d118      	bne.n	8004712 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e013      	b.n	8004724 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004708:	461a      	mov	r2, r3
 800470a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e008      	b.n	8004724 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004742:	461a      	mov	r2, r3
 8004744:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004754:	461a      	mov	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4293      	cmp	r3, r2
 800475a:	d3b5      	bcc.n	80046c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e043      	b.n	80047ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004778:	d118      	bne.n	80047ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	461a      	mov	r2, r3
 800478e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e013      	b.n	80047be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a2:	461a      	mov	r2, r3
 80047a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e008      	b.n	80047be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ca:	461a      	mov	r2, r3
 80047cc:	2300      	movs	r3, #0
 80047ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3301      	adds	r3, #1
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ee:	461a      	mov	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d3b5      	bcc.n	8004762 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004808:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004816:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 0210 	orr.w	r2, r3, #16
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	4b0f      	ldr	r3, [pc, #60]	@ (8004870 <USB_DevInit+0x2b4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f043 0208 	orr.w	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800484c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <USB_DevInit+0x2b8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800486c:	b004      	add	sp, #16
 800486e:	4770      	bx	lr
 8004870:	803c3800 	.word	0x803c3800
 8004874:	40000004 	.word	0x40000004

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004892:	d901      	bls.n	8004898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e01b      	b.n	80048d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	daf2      	bge.n	8004886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048bc:	d901      	bls.n	80048c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e006      	b.n	80048d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d0f0      	beq.n	80048b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f4:	d901      	bls.n	80048fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e018      	b.n	800492c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	daf2      	bge.n	80048e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2210      	movs	r2, #16
 800490a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004918:	d901      	bls.n	800491e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e006      	b.n	800492c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b10      	cmp	r3, #16
 8004928:	d0f0      	beq.n	800490c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004984:	f023 0303 	bic.w	r3, r3, #3
 8004988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049e0:	d901      	bls.n	80049e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e022      	b.n	8004a2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	daf2      	bge.n	80049d4 <USB_CoreReset+0xc>

  count = 10U;
 80049ee:	230a      	movs	r3, #10
 80049f0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80049f2:	e002      	b.n	80049fa <USB_CoreReset+0x32>
  {
    count--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f9      	bne.n	80049f4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f043 0201 	orr.w	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a18:	d901      	bls.n	8004a1e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e006      	b.n	8004a2c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d0f0      	beq.n	8004a0c <USB_CoreReset+0x44>

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <memset>:
 8004a38:	4402      	add	r2, r0
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d100      	bne.n	8004a42 <memset+0xa>
 8004a40:	4770      	bx	lr
 8004a42:	f803 1b01 	strb.w	r1, [r3], #1
 8004a46:	e7f9      	b.n	8004a3c <memset+0x4>

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2600      	movs	r6, #0
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4d0b      	ldr	r5, [pc, #44]	@ (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f000 f818 	bl	8004a90 <_init>
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2600      	movs	r6, #0
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08004ac8 	.word	0x08004ac8
 8004a84:	08004ac8 	.word	0x08004ac8
 8004a88:	08004ac8 	.word	0x08004ac8
 8004a8c:	08004acc 	.word	0x08004acc

08004a90 <_init>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr

08004a9c <_fini>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr
