
temp_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08007828  08007828  00008828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bcc  08007bcc  00009314  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd4  08007bd4  00009314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd4  08007bd4  00008bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bd8  08007bd8  00008bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007bdc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d4  08007db0  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000274  08007e50  00009274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000810  20000314  08007ef0  00009314  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000b24  08007ef0  00009b24  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00009314  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013a73  00000000  00000000  00009342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003042  00000000  00000000  0001cdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f68  00000000  00000000  0001fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bb2  00000000  00000000  00020d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002acd7  00000000  00000000  00021912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016365  00000000  00000000  0004c5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100c34  00000000  00000000  0006294e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00163582  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004dd4  00000000  00000000  001635c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  0016839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000314 	.word	0x20000314
 800021c:	00000000 	.word	0x00000000
 8000220:	0800780c 	.word	0x0800780c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000318 	.word	0x20000318
 800023c:	0800780c 	.word	0x0800780c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062e:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <MX_ADC1_Init+0x9c>)
 8000632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000636:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800063a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000648:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800065e:	4a17      	ldr	r2, [pc, #92]	@ (80006bc <MX_ADC1_Init+0xa0>)
 8000660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_ADC1_Init+0x98>)
 8000678:	2201      	movs	r2, #1
 800067a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800067e:	f000 fdfb 	bl	8001278 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000688:	f000 fae2 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_ADC1_Init+0xa4>)
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000694:	2307      	movs	r3, #7
 8000696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_ADC1_Init+0x98>)
 800069e:	f000 ffc9 	bl	8001634 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 fad2 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000330 	.word	0x20000330
 80006b8:	40012000 	.word	0x40012000
 80006bc:	0f000001 	.word	0x0f000001
 80006c0:	10000012 	.word	0x10000012

080006c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <HAL_ADC_MspInit+0x38>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d10b      	bne.n	80006ee <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <HAL_ADC_MspInit+0x3c>)
 80006d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <HAL_ADC_MspInit+0x3c>)
 80006dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80006e2:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <HAL_ADC_MspInit+0x3c>)
 80006e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40012000 	.word	0x40012000
 8000700:	40023800 	.word	0x40023800

08000704 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	@ 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	@ 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	@ (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_ETH_Init+0x84>)
 8000756:	f001 faa7 	bl	8001ca8 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 fa76 	bl	8000c50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	@ 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ETH_Init+0x98>)
 800076a:	f004 fff2 	bl	8005752 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	@ 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	@ (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200003b0 	.word	0x200003b0
 800078c:	40028000 	.word	0x40028000
 8000790:	20000460 	.word	0x20000460
 8000794:	20000274 	.word	0x20000274
 8000798:	200001d4 	.word	0x200001d4
 800079c:	20000378 	.word	0x20000378

080007a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a4e      	ldr	r2, [pc, #312]	@ (80008f8 <HAL_ETH_MspInit+0x158>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	f040 8096 	bne.w	80008f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80007c4:	4b4d      	ldr	r3, [pc, #308]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c8:	4a4c      	ldr	r2, [pc, #304]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d0:	4b4a      	ldr	r3, [pc, #296]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007d8:	623b      	str	r3, [r7, #32]
 80007da:	6a3b      	ldr	r3, [r7, #32]
 80007dc:	4b47      	ldr	r3, [pc, #284]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e0:	4a46      	ldr	r2, [pc, #280]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80007e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e8:	4b44      	ldr	r3, [pc, #272]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80007f0:	61fb      	str	r3, [r7, #28]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	4b41      	ldr	r3, [pc, #260]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f8:	4a40      	ldr	r2, [pc, #256]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 80007fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80007fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000800:	4b3e      	ldr	r3, [pc, #248]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800080c:	4b3b      	ldr	r3, [pc, #236]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000810:	4a3a      	ldr	r2, [pc, #232]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6313      	str	r3, [r2, #48]	@ 0x30
 8000818:	4b38      	ldr	r3, [pc, #224]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000828:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000830:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000840:	4a2e      	ldr	r2, [pc, #184]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	6313      	str	r3, [r2, #48]	@ 0x30
 8000848:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000858:	4a28      	ldr	r2, [pc, #160]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 800085a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <HAL_ETH_MspInit+0x15c>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800086c:	2332      	movs	r3, #50	@ 0x32
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800087c:	230b      	movs	r3, #11
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	481e      	ldr	r0, [pc, #120]	@ (8000900 <HAL_ETH_MspInit+0x160>)
 8000888:	f001 fd5c 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800088c:	2386      	movs	r3, #134	@ 0x86
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089c:	230b      	movs	r3, #11
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4817      	ldr	r0, [pc, #92]	@ (8000904 <HAL_ETH_MspInit+0x164>)
 80008a8:	f001 fd4c 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008be:	230b      	movs	r3, #11
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	@ (8000908 <HAL_ETH_MspInit+0x168>)
 80008ca:	f001 fd3b 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ce:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e0:	230b      	movs	r3, #11
 80008e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <HAL_ETH_MspInit+0x16c>)
 80008ec:	f001 fd2a 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80008f0:	bf00      	nop
 80008f2:	3738      	adds	r7, #56	@ 0x38
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40028000 	.word	0x40028000
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020800 	.word	0x40020800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020400 	.word	0x40020400
 800090c:	40021800 	.word	0x40021800

08000910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	@ 0x30
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b47      	ldr	r3, [pc, #284]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a46      	ldr	r2, [pc, #280]	@ (8000a44 <MX_GPIO_Init+0x134>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b44      	ldr	r3, [pc, #272]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b41      	ldr	r3, [pc, #260]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a40      	ldr	r2, [pc, #256]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a44 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a44 <MX_GPIO_Init+0x134>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b38      	ldr	r3, [pc, #224]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a34      	ldr	r2, [pc, #208]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b32      	ldr	r3, [pc, #200]	@ (8000a44 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	4b2f      	ldr	r3, [pc, #188]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a44 <MX_GPIO_Init+0x134>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b2c      	ldr	r3, [pc, #176]	@ (8000a44 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a28      	ldr	r2, [pc, #160]	@ (8000a44 <MX_GPIO_Init+0x134>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009bc:	4822      	ldr	r0, [pc, #136]	@ (8000a48 <MX_GPIO_Init+0x138>)
 80009be:	f001 fe6d 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2140      	movs	r1, #64	@ 0x40
 80009c6:	4821      	ldr	r0, [pc, #132]	@ (8000a4c <MX_GPIO_Init+0x13c>)
 80009c8:	f001 fe68 	bl	800269c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <MX_GPIO_Init+0x140>)
 80009e4:	f001 fcae 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_GPIO_Init+0x138>)
 8000a02:	f001 fc9f 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <MX_GPIO_Init+0x13c>)
 8000a1e:	f001 fc91 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_GPIO_Init+0x13c>)
 8000a36:	f001 fc85 	bl	8002344 <HAL_GPIO_Init>

}
 8000a3a:	bf00      	nop
 8000a3c:	3730      	adds	r7, #48	@ 0x30
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	40020800 	.word	0x40020800

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08e      	sub	sp, #56	@ 0x38
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5a:	f000 fb8c 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5e:	f000 f885 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a62:	f7ff ff55 	bl	8000910 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a66:	f7ff fe4d 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a6a:	f000 fa23 	bl	8000eb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a6e:	f000 fab1 	bl	8000fd4 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a72:	f7ff fdd3 	bl	800061c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1) {
          float temp = Read_Temperature();
 8000a76:	f000 f823 	bl	8000ac0 <Read_Temperature>
 8000a7a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
          char msg[50];
          sprintf(msg, "Temperature: %.2f°C\r\n", temp);
 8000a7e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000a82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a86:	4638      	mov	r0, r7
 8000a88:	ec53 2b17 	vmov	r2, r3, d7
 8000a8c:	490a      	ldr	r1, [pc, #40]	@ (8000ab8 <main+0x64>)
 8000a8e:	f004 fdfb 	bl	8005688 <siprintf>
          HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a92:	463b      	mov	r3, r7
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fc23 	bl	80002e0 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	4639      	mov	r1, r7
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <main+0x68>)
 8000aa6:	f003 f8f7 	bl	8003c98 <HAL_UART_Transmit>
          HAL_Delay(1000);  // Update every 1s
 8000aaa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000aae:	f000 fbbf 	bl	8001230 <HAL_Delay>
  while (1) {
 8000ab2:	bf00      	nop
 8000ab4:	e7df      	b.n	8000a76 <main+0x22>
 8000ab6:	bf00      	nop
 8000ab8:	08007828 	.word	0x08007828
 8000abc:	2000046c 	.word	0x2000046c

08000ac0 <Read_Temperature>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
float Read_Temperature(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]

    // Configure ADC for Temperature Sensor (Channel 18)
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <Read_Temperature+0x94>)
 8000ad4:	607b      	str	r3, [r7, #4]
    sConfig.Rank = 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ada:	2307      	movs	r3, #7
 8000adc:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481d      	ldr	r0, [pc, #116]	@ (8000b58 <Read_Temperature+0x98>)
 8000ae4:	f000 fda6 	bl	8001634 <HAL_ADC_ConfigChannel>

    // Start ADC & read value
    HAL_ADC_Start(&hadc1);
 8000ae8:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <Read_Temperature+0x98>)
 8000aea:	f000 fc09 	bl	8001300 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000aee:	f04f 31ff 	mov.w	r1, #4294967295
 8000af2:	4819      	ldr	r0, [pc, #100]	@ (8000b58 <Read_Temperature+0x98>)
 8000af4:	f000 fd06 	bl	8001504 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000af8:	4817      	ldr	r0, [pc, #92]	@ (8000b58 <Read_Temperature+0x98>)
 8000afa:	f000 fd8e 	bl	800161a <HAL_ADC_GetValue>
 8000afe:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(&hadc1);
 8000b00:	4815      	ldr	r0, [pc, #84]	@ (8000b58 <Read_Temperature+0x98>)
 8000b02:	f000 fccb 	bl	800149c <HAL_ADC_Stop>

    // Convert to voltage
    float voltage = (float)adcValue * VREF / 4095.0f;  // 12-bit ADC (0-4095)
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	ee07 3a90 	vmov	s15, r3
 8000b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b10:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000b5c <Read_Temperature+0x9c>
 8000b14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b18:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000b60 <Read_Temperature+0xa0>
 8000b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b20:	edc7 7a06 	vstr	s15, [r7, #24]

    // Calculate temperature (from datasheet formula)
    float temperature = ((voltage - V25) / AVG_SLOPE) + 25.0f;
 8000b24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000b28:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000b64 <Read_Temperature+0xa4>
 8000b2c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b30:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000b68 <Read_Temperature+0xa8>
 8000b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b38:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b40:	edc7 7a05 	vstr	s15, [r7, #20]
    return temperature;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	ee07 3a90 	vmov	s15, r3
}
 8000b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	10000012 	.word	0x10000012
 8000b58:	20000330 	.word	0x20000330
 8000b5c:	40533333 	.word	0x40533333
 8000b60:	457ff000 	.word	0x457ff000
 8000b64:	3f428f5c 	.word	0x3f428f5c
 8000b68:	3b23d70a 	.word	0x3b23d70a

08000b6c <SystemClock_Config>:
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	@ 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2234      	movs	r2, #52	@ 0x34
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f004 fde9 	bl	8005752 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b90:	f001 fed8 	bl	8002944 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <SystemClock_Config+0xdc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a2b      	ldr	r2, [pc, #172]	@ (8000c48 <SystemClock_Config+0xdc>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <SystemClock_Config+0xdc>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <SystemClock_Config+0xe0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb4:	4a25      	ldr	r2, [pc, #148]	@ (8000c4c <SystemClock_Config+0xe0>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <SystemClock_Config+0xe0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bcc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000bd0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000be0:	2360      	movs	r3, #96	@ 0x60
 8000be2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 ff05 	bl	8002a04 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c00:	f000 f826 	bl	8000c50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c04:	f001 feae 	bl	8002964 <HAL_PWREx_EnableOverDrive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0e:	f000 f81f 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c12:	230f      	movs	r3, #15
 8000c14:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c16:	2302      	movs	r3, #2
 8000c18:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f996 	bl	8002f60 <HAL_RCC_ClockConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000c3a:	f000 f809 	bl	8000c50 <Error_Handler>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	3750      	adds	r7, #80	@ 0x50
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	4a08      	ldr	r2, [pc, #32]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfa:	f000 fa79 	bl	80011f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_kill>:

int _kill(int pid, int sig)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d1c:	f004 fd6c 	bl	80057f8 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2216      	movs	r2, #22
 8000d24:	601a      	str	r2, [r3, #0]
  return -1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_exit>:

void _exit (int status)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffe7 	bl	8000d12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <_exit+0x12>

08000d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
  }

  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	e009      	b.n	8000da8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	dbf1      	blt.n	8000d94 <_write+0x12>
  }
  return len;
 8000db0:	687b      	ldr	r3, [r7, #4]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_close>:

int _close(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de2:	605a      	str	r2, [r3, #4]
  return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_isatty>:

int _isatty(int file)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <_sbrk+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <_sbrk+0x60>)
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e38:	4b13      	ldr	r3, [pc, #76]	@ (8000e88 <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <_sbrk+0x64>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <_sbrk+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d207      	bcs.n	8000e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e54:	f004 fcd0 	bl	80057f8 <__errno>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20080000 	.word	0x20080000
 8000e84:	00000400 	.word	0x00000400
 8000e88:	20000468 	.word	0x20000468
 8000e8c:	20000b28 	.word	0x20000b28

08000e90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <SystemInit+0x20>)
 8000e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <SystemInit+0x20>)
 8000e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <MX_USART3_UART_Init+0x5c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_USART3_UART_Init+0x58>)
 8000ef8:	f002 fe80 	bl	8003bfc <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f02:	f7ff fea5 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	2000046c 	.word	0x2000046c
 8000f10:	40004800 	.word	0x40004800

08000f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ae      	sub	sp, #184	@ 0xb8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2290      	movs	r2, #144	@ 0x90
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f004 fc0c 	bl	8005752 <memset>
  if(uartHandle->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <HAL_UART_MspInit+0xb4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13c      	bne.n	8000fbe <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fa2a 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff fe77 	bl	8000c50 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_UART_MspInit+0xb8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0308 	and.w	r3, r3, #8
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <HAL_UART_MspInit+0xbc>)
 8000fba:	f001 f9c3 	bl	8002344 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	37b8      	adds	r7, #184	@ 0xb8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020c00 	.word	0x40020c00

08000fd4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fda:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100c:	2201      	movs	r2, #1
 800100e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001018:	f001 fb59 	bl	80026ce <HAL_PCD_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001022:	f7ff fe15 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200004f4 	.word	0x200004f4

08001030 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0ae      	sub	sp, #184	@ 0xb8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2290      	movs	r2, #144	@ 0x90
 800104e:	2100      	movs	r1, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fb7e 	bl	8005752 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800105e:	d159      	bne.n	8001114 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001060:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001064:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f002 f99b 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800107c:	f7ff fde8 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001080:	4b26      	ldr	r3, [pc, #152]	@ (800111c <HAL_PCD_MspInit+0xec>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001084:	4a25      	ldr	r2, [pc, #148]	@ (800111c <HAL_PCD_MspInit+0xec>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6313      	str	r3, [r2, #48]	@ 0x30
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <HAL_PCD_MspInit+0xec>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001098:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800109c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010b2:	230a      	movs	r3, #10
 80010b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010bc:	4619      	mov	r1, r3
 80010be:	4818      	ldr	r0, [pc, #96]	@ (8001120 <HAL_PCD_MspInit+0xf0>)
 80010c0:	f001 f940 	bl	8002344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010dc:	4619      	mov	r1, r3
 80010de:	4810      	ldr	r0, [pc, #64]	@ (8001120 <HAL_PCD_MspInit+0xf0>)
 80010e0:	f001 f930 	bl	8002344 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010e4:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <HAL_PCD_MspInit+0xec>)
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	4a0c      	ldr	r2, [pc, #48]	@ (800111c <HAL_PCD_MspInit+0xec>)
 80010ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ee:	6353      	str	r3, [r2, #52]	@ 0x34
 80010f0:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <HAL_PCD_MspInit+0xec>)
 80010f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4b07      	ldr	r3, [pc, #28]	@ (800111c <HAL_PCD_MspInit+0xec>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001100:	4a06      	ldr	r2, [pc, #24]	@ (800111c <HAL_PCD_MspInit+0xec>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001106:	6453      	str	r3, [r2, #68]	@ 0x44
 8001108:	4b04      	ldr	r3, [pc, #16]	@ (800111c <HAL_PCD_MspInit+0xec>)
 800110a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001114:	bf00      	nop
 8001116:	37b8      	adds	r7, #184	@ 0xb8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800115c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001128:	f7ff feb2 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001152:	f004 fb57 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001156:	f7ff fc7d 	bl	8000a54 <main>
  bx  lr    
 800115a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800115c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001168:	08007bdc 	.word	0x08007bdc
  ldr r2, =_sbss
 800116c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001170:	20000b24 	.word	0x20000b24

08001174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC_IRQHandler>

08001176 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 fd60 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f805 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001186:	f7ff fd69 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fd6d 	bl	8001c8e <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 fd43 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	200009d4 	.word	0x200009d4

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	200009d4 	.word	0x200009d4

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e031      	b.n	80012f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fa14 	bl	80006c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d116      	bne.n	80012e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_ADC_Init+0x84>)
 80012bc:	4013      	ands	r3, r2
 80012be:	f043 0202 	orr.w	r2, r3, #2
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 fb0e 	bl	80018e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	f023 0303 	bic.w	r3, r3, #3
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80012e2:	e001      	b.n	80012e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	ffffeefd 	.word	0xffffeefd

08001300 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001312:	2b01      	cmp	r3, #1
 8001314:	d101      	bne.n	800131a <HAL_ADC_Start+0x1a>
 8001316:	2302      	movs	r3, #2
 8001318:	e0ad      	b.n	8001476 <HAL_ADC_Start+0x176>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2201      	movs	r2, #1
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d018      	beq.n	8001362 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001340:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <HAL_ADC_Start+0x184>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_ADC_Start+0x188>)
 8001346:	fba2 2303 	umull	r2, r3, r2, r3
 800134a:	0c9a      	lsrs	r2, r3, #18
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001354:	e002      	b.n	800135c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f9      	bne.n	8001356 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b01      	cmp	r3, #1
 800136e:	d175      	bne.n	800145c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001374:	4b45      	ldr	r3, [pc, #276]	@ (800148c <HAL_ADC_Start+0x18c>)
 8001376:	4013      	ands	r3, r2
 8001378:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001396:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80013aa:	d106      	bne.n	80013ba <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	f023 0206 	bic.w	r2, r3, #6
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80013b8:	e002      	b.n	80013c0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80013d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_ADC_Start+0x190>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d143      	bne.n	8001474 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e03a      	b.n	8001474 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a24      	ldr	r2, [pc, #144]	@ (8001494 <HAL_ADC_Start+0x194>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d10e      	bne.n	8001426 <HAL_ADC_Start+0x126>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001424:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001426:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <HAL_ADC_Start+0x190>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d120      	bne.n	8001474 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_ADC_Start+0x198>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d11b      	bne.n	8001474 <HAL_ADC_Start+0x174>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d114      	bne.n	8001474 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	e00b      	b.n	8001474 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	f043 0210 	orr.w	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146c:	f043 0201 	orr.w	r2, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000
 8001488:	431bde83 	.word	0x431bde83
 800148c:	fffff8fe 	.word	0xfffff8fe
 8001490:	40012300 	.word	0x40012300
 8001494:	40012000 	.word	0x40012000
 8001498:	40012200 	.word	0x40012200

0800149c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_ADC_Stop+0x16>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e01f      	b.n	80014f2 <HAL_ADC_Stop+0x56>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d107      	bne.n	80014e8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <HAL_ADC_Stop+0x64>)
 80014de:	4013      	ands	r3, r2
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	ffffeefe 	.word	0xffffeefe

08001504 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800151c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001520:	d113      	bne.n	800154a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800152c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001530:	d10b      	bne.n	800154a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f043 0220 	orr.w	r2, r3, #32
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e063      	b.n	8001612 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800154a:	f7ff fe65 	bl	8001218 <HAL_GetTick>
 800154e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001550:	e021      	b.n	8001596 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001558:	d01d      	beq.n	8001596 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_ADC_PollForConversion+0x6c>
 8001560:	f7ff fe5a 	bl	8001218 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d212      	bcs.n	8001596 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d00b      	beq.n	8001596 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f043 0204 	orr.w	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e03d      	b.n	8001612 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d1d6      	bne.n	8001552 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 0212 	mvn.w	r2, #18
 80015ac:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d123      	bne.n	8001610 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d11f      	bne.n	8001610 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d111      	bne.n	8001610 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d105      	bne.n	8001610 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	f043 0201 	orr.w	r2, r3, #1
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1c>
 800164c:	2302      	movs	r3, #2
 800164e:	e13a      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x292>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d93a      	bls.n	80016d6 <HAL_ADC_ConfigChannel+0xa2>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001668:	d035      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68d9      	ldr	r1, [r3, #12]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	3b1e      	subs	r3, #30
 8001680:	2207      	movs	r2, #7
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8f      	ldr	r2, [pc, #572]	@ (80018d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10a      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68d9      	ldr	r1, [r3, #12]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	061a      	lsls	r2, r3, #24
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ae:	e039      	b.n	8001724 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68d9      	ldr	r1, [r3, #12]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4403      	add	r3, r0
 80016c8:	3b1e      	subs	r3, #30
 80016ca:	409a      	lsls	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d4:	e026      	b.n	8001724 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6919      	ldr	r1, [r3, #16]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6919      	ldr	r1, [r3, #16]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4403      	add	r3, r0
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	409a      	lsls	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d824      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b05      	subs	r3, #5
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	3b05      	subs	r3, #5
 8001768:	fa00 f203 	lsl.w	r2, r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
 8001774:	e04c      	b.n	8001810 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b0c      	cmp	r3, #12
 800177c:	d824      	bhi.n	80017c8 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	3b23      	subs	r3, #35	@ 0x23
 8001790:	221f      	movs	r2, #31
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43da      	mvns	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	400a      	ands	r2, r1
 800179e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	3b23      	subs	r3, #35	@ 0x23
 80017ba:	fa00 f203 	lsl.w	r2, r0, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c6:	e023      	b.n	8001810 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b41      	subs	r3, #65	@ 0x41
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b41      	subs	r3, #65	@ 0x41
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a30      	ldr	r2, [pc, #192]	@ (80018d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d10a      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1fc>
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001822:	d105      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	4a2c      	ldr	r2, [pc, #176]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 800182a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800182e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10f      	bne.n	800185a <HAL_ADC_ConfigChannel+0x226>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b12      	cmp	r3, #18
 8001840:	d10b      	bne.n	800185a <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001842:	4b26      	ldr	r3, [pc, #152]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a25      	ldr	r2, [pc, #148]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001848:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800184c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4a22      	ldr	r2, [pc, #136]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001854:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001858:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d12b      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x288>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1a      	ldr	r2, [pc, #104]	@ (80018d4 <HAL_ADC_ConfigChannel+0x2a0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d003      	beq.n	8001876 <HAL_ADC_ConfigChannel+0x242>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b11      	cmp	r3, #17
 8001874:	d122      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a18      	ldr	r2, [pc, #96]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 800187c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001880:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <HAL_ADC_ConfigChannel+0x2a8>)
 8001888:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800188c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a10      	ldr	r2, [pc, #64]	@ (80018d4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d111      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_ADC_ConfigChannel+0x2ac>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <HAL_ADC_ConfigChannel+0x2b0>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9a      	lsrs	r2, r3, #18
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018ae:	e002      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f9      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	10000012 	.word	0x10000012
 80018d8:	40012000 	.word	0x40012000
 80018dc:	40012300 	.word	0x40012300
 80018e0:	20000000 	.word	0x20000000
 80018e4:	431bde83 	.word	0x431bde83

080018e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80018f0:	4b78      	ldr	r3, [pc, #480]	@ (8001ad4 <ADC_Init+0x1ec>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a77      	ldr	r2, [pc, #476]	@ (8001ad4 <ADC_Init+0x1ec>)
 80018f6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80018fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80018fc:	4b75      	ldr	r3, [pc, #468]	@ (8001ad4 <ADC_Init+0x1ec>)
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4973      	ldr	r1, [pc, #460]	@ (8001ad4 <ADC_Init+0x1ec>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	021a      	lsls	r2, r3, #8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800195e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001976:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <ADC_Init+0x1f0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d022      	beq.n	80019c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800198a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00f      	b.n	80019e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0202 	bic.w	r2, r2, #2
 80019f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	005a      	lsls	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	035a      	lsls	r2, r3, #13
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	e007      	b.n	8001a58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	051a      	lsls	r2, r3, #20
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a9a:	025a      	lsls	r2, r3, #9
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	029a      	lsls	r2, r3, #10
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	0f000001 	.word	0x0f000001

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <__NVIC_SetPriorityGrouping+0x40>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00
 8001b20:	05fa0000 	.word	0x05fa0000

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	@ (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff47 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff5c 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff8e 	bl	8001b94 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5d 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ffb0 	bl	8001bfc <SysTick_Config>
 8001c9c:	4603      	mov	r3, r0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e086      	b.n	8001dc8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d106      	bne.n	8001cd2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fd67 	bl	80007a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd0 <HAL_ETH_Init+0x128>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001dd0 <HAL_ETH_Init+0x128>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cde:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd0 <HAL_ETH_Init+0x128>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001cea:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <HAL_ETH_Init+0x12c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a39      	ldr	r2, [pc, #228]	@ (8001dd4 <HAL_ETH_Init+0x12c>)
 8001cf0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cf4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001cf6:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <HAL_ETH_Init+0x12c>)
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4935      	ldr	r1, [pc, #212]	@ (8001dd4 <HAL_ETH_Init+0x12c>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d04:	4b33      	ldr	r3, [pc, #204]	@ (8001dd4 <HAL_ETH_Init+0x12c>)
 8001d06:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d20:	f7ff fa7a 	bl	8001218 <HAL_GetTick>
 8001d24:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d26:	e011      	b.n	8001d4c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d28:	f7ff fa76 	bl	8001218 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d36:	d909      	bls.n	8001d4c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	22e0      	movs	r2, #224	@ 0xe0
 8001d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e03d      	b.n	8001dc8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e4      	bne.n	8001d28 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f97a 	bl	8002058 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 fa25 	bl	80021b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fa7b 	bl	8002266 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	461a      	mov	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f9e3 	bl	8002144 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001d8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_ETH_Init+0x130>)
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001db2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	00020060 	.word	0x00020060

08001ddc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4b53      	ldr	r3, [pc, #332]	@ (8001f40 <ETH_SetMACConfig+0x164>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7b9b      	ldrb	r3, [r3, #14]
 8001dfa:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	7c12      	ldrb	r2, [r2, #16]
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	d102      	bne.n	8001e0a <ETH_SetMACConfig+0x2e>
 8001e04:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e08:	e000      	b.n	8001e0c <ETH_SetMACConfig+0x30>
 8001e0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	7c52      	ldrb	r2, [r2, #17]
 8001e12:	2a00      	cmp	r2, #0
 8001e14:	d102      	bne.n	8001e1c <ETH_SetMACConfig+0x40>
 8001e16:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e1a:	e000      	b.n	8001e1e <ETH_SetMACConfig+0x42>
 8001e1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e1e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	7fdb      	ldrb	r3, [r3, #31]
 8001e2a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e2c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	7f92      	ldrb	r2, [r2, #30]
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	d102      	bne.n	8001e42 <ETH_SetMACConfig+0x66>
 8001e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e40:	e000      	b.n	8001e44 <ETH_SetMACConfig+0x68>
 8001e42:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e4c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	d102      	bne.n	8001e6c <ETH_SetMACConfig+0x90>
 8001e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e6a:	e000      	b.n	8001e6e <ETH_SetMACConfig+0x92>
 8001e6c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	7bdb      	ldrb	r3, [r3, #15]
 8001e74:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e76:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e84:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e86:	4313      	orrs	r3, r2
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff f9c6 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ec2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001eca:	2a00      	cmp	r2, #0
 8001ecc:	d101      	bne.n	8001ed2 <ETH_SetMACConfig+0xf6>
 8001ece:	2280      	movs	r2, #128	@ 0x80
 8001ed0:	e000      	b.n	8001ed4 <ETH_SetMACConfig+0xf8>
 8001ed2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ed4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001eda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	d101      	bne.n	8001eea <ETH_SetMACConfig+0x10e>
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	e000      	b.n	8001eec <ETH_SetMACConfig+0x110>
 8001eea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001eec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001ef4:	2a01      	cmp	r2, #1
 8001ef6:	d101      	bne.n	8001efc <ETH_SetMACConfig+0x120>
 8001ef8:	2204      	movs	r2, #4
 8001efa:	e000      	b.n	8001efe <ETH_SetMACConfig+0x122>
 8001efc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001efe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f06:	2a01      	cmp	r2, #1
 8001f08:	d101      	bne.n	8001f0e <ETH_SetMACConfig+0x132>
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	e000      	b.n	8001f10 <ETH_SetMACConfig+0x134>
 8001f0e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f10:	4313      	orrs	r3, r2
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f28:	2001      	movs	r0, #1
 8001f2a:	f7ff f981 	bl	8001230 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	fd20810f 	.word	0xfd20810f

08001f44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <ETH_SetDMAConfig+0x110>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	7b1b      	ldrb	r3, [r3, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <ETH_SetDMAConfig+0x2c>
 8001f6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f6e:	e000      	b.n	8001f72 <ETH_SetDMAConfig+0x2e>
 8001f70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	7b5b      	ldrb	r3, [r3, #13]
 8001f76:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f78:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	7f52      	ldrb	r2, [r2, #29]
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetDMAConfig+0x44>
 8001f82:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f86:	e000      	b.n	8001f8a <ETH_SetDMAConfig+0x46>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	7b9b      	ldrb	r3, [r3, #14]
 8001f90:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f92:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	7f1b      	ldrb	r3, [r3, #28]
 8001f9e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fa0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7f9b      	ldrb	r3, [r3, #30]
 8001fa6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fa8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fb6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f7ff f928 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	791b      	ldrb	r3, [r3, #4]
 8001ff2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ff8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ffe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002004:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800200c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800200e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002016:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800201c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002026:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800202a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002038:	2001      	movs	r0, #1
 800203a:	f7ff f8f9 	bl	8001230 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	f8de3f23 	.word	0xf8de3f23

08002058 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a6      	sub	sp, #152	@ 0x98
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800209a:	2300      	movs	r3, #0
 800209c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020c0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020d6:	4619      	mov	r1, r3
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fe7f 	bl	8001ddc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020de:	2301      	movs	r3, #1
 80020e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020e2:	2301      	movs	r3, #1
 80020e4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800210e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002112:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002114:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002118:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800211a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800211e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff05 	bl	8001f44 <ETH_SetDMAConfig>
}
 800213a:	bf00      	nop
 800213c:	3798      	adds	r7, #152	@ 0x98
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3305      	adds	r3, #5
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	3204      	adds	r2, #4
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	4b11      	ldr	r3, [pc, #68]	@ (80021ac <ETH_MACAddressConfig+0x68>)
 8002166:	4413      	add	r3, r2
 8002168:	461a      	mov	r2, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3303      	adds	r3, #3
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	061a      	lsls	r2, r3, #24
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3302      	adds	r3, #2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3301      	adds	r3, #1
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	4313      	orrs	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <ETH_MACAddressConfig+0x6c>)
 8002196:	4413      	add	r3, r2
 8002198:	461a      	mov	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40028040 	.word	0x40028040
 80021b0:	40028044 	.word	0x40028044

080021b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	e03e      	b.n	8002240 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d9      	ldr	r1, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	3206      	adds	r2, #6
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d80c      	bhi.n	8002224 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68d9      	ldr	r1, [r3, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	461a      	mov	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	e004      	b.n	800222e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	461a      	mov	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d9bd      	bls.n	80021c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	611a      	str	r2, [r3, #16]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	e048      	b.n	8002306 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022ca:	68b9      	ldr	r1, [r7, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	3212      	adds	r2, #18
 80022d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d80c      	bhi.n	80022f6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6919      	ldr	r1, [r3, #16]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	e004      	b.n	8002300 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	461a      	mov	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	3301      	adds	r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d9b3      	bls.n	8002274 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002336:	60da      	str	r2, [r3, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e175      	b.n	8002650 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8164 	bne.w	800264a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x56>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80be 	beq.w	800264a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	4b66      	ldr	r3, [pc, #408]	@ (8002668 <HAL_GPIO_Init+0x324>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a65      	ldr	r2, [pc, #404]	@ (8002668 <HAL_GPIO_Init+0x324>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b63      	ldr	r3, [pc, #396]	@ (8002668 <HAL_GPIO_Init+0x324>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024e6:	4a61      	ldr	r2, [pc, #388]	@ (800266c <HAL_GPIO_Init+0x328>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_GPIO_Init+0x32c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d037      	beq.n	8002582 <HAL_GPIO_Init+0x23e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a57      	ldr	r2, [pc, #348]	@ (8002674 <HAL_GPIO_Init+0x330>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d031      	beq.n	800257e <HAL_GPIO_Init+0x23a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a56      	ldr	r2, [pc, #344]	@ (8002678 <HAL_GPIO_Init+0x334>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d02b      	beq.n	800257a <HAL_GPIO_Init+0x236>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a55      	ldr	r2, [pc, #340]	@ (800267c <HAL_GPIO_Init+0x338>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d025      	beq.n	8002576 <HAL_GPIO_Init+0x232>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a54      	ldr	r2, [pc, #336]	@ (8002680 <HAL_GPIO_Init+0x33c>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d01f      	beq.n	8002572 <HAL_GPIO_Init+0x22e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a53      	ldr	r2, [pc, #332]	@ (8002684 <HAL_GPIO_Init+0x340>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d019      	beq.n	800256e <HAL_GPIO_Init+0x22a>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a52      	ldr	r2, [pc, #328]	@ (8002688 <HAL_GPIO_Init+0x344>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0x226>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a51      	ldr	r2, [pc, #324]	@ (800268c <HAL_GPIO_Init+0x348>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_Init+0x222>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a50      	ldr	r2, [pc, #320]	@ (8002690 <HAL_GPIO_Init+0x34c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x21e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a4f      	ldr	r2, [pc, #316]	@ (8002694 <HAL_GPIO_Init+0x350>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_Init+0x21a>
 800255a:	2309      	movs	r3, #9
 800255c:	e012      	b.n	8002584 <HAL_GPIO_Init+0x240>
 800255e:	230a      	movs	r3, #10
 8002560:	e010      	b.n	8002584 <HAL_GPIO_Init+0x240>
 8002562:	2308      	movs	r3, #8
 8002564:	e00e      	b.n	8002584 <HAL_GPIO_Init+0x240>
 8002566:	2307      	movs	r3, #7
 8002568:	e00c      	b.n	8002584 <HAL_GPIO_Init+0x240>
 800256a:	2306      	movs	r3, #6
 800256c:	e00a      	b.n	8002584 <HAL_GPIO_Init+0x240>
 800256e:	2305      	movs	r3, #5
 8002570:	e008      	b.n	8002584 <HAL_GPIO_Init+0x240>
 8002572:	2304      	movs	r3, #4
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x240>
 8002576:	2303      	movs	r3, #3
 8002578:	e004      	b.n	8002584 <HAL_GPIO_Init+0x240>
 800257a:	2302      	movs	r3, #2
 800257c:	e002      	b.n	8002584 <HAL_GPIO_Init+0x240>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_GPIO_Init+0x240>
 8002582:	2300      	movs	r3, #0
 8002584:	69fa      	ldr	r2, [r7, #28]
 8002586:	f002 0203 	and.w	r2, r2, #3
 800258a:	0092      	lsls	r2, r2, #2
 800258c:	4093      	lsls	r3, r2
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002594:	4935      	ldr	r1, [pc, #212]	@ (800266c <HAL_GPIO_Init+0x328>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	089b      	lsrs	r3, r3, #2
 800259a:	3302      	adds	r3, #2
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_GPIO_Init+0x354>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4013      	ands	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025c6:	4a34      	ldr	r2, [pc, #208]	@ (8002698 <HAL_GPIO_Init+0x354>)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025cc:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <HAL_GPIO_Init+0x354>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f0:	4a29      	ldr	r2, [pc, #164]	@ (8002698 <HAL_GPIO_Init+0x354>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025f6:	4b28      	ldr	r3, [pc, #160]	@ (8002698 <HAL_GPIO_Init+0x354>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <HAL_GPIO_Init+0x354>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <HAL_GPIO_Init+0x354>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002644:	4a14      	ldr	r2, [pc, #80]	@ (8002698 <HAL_GPIO_Init+0x354>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	f67f ae86 	bls.w	8002364 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3724      	adds	r7, #36	@ 0x24
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	40013800 	.word	0x40013800
 8002670:	40020000 	.word	0x40020000
 8002674:	40020400 	.word	0x40020400
 8002678:	40020800 	.word	0x40020800
 800267c:	40020c00 	.word	0x40020c00
 8002680:	40021000 	.word	0x40021000
 8002684:	40021400 	.word	0x40021400
 8002688:	40021800 	.word	0x40021800
 800268c:	40021c00 	.word	0x40021c00
 8002690:	40022000 	.word	0x40022000
 8002694:	40022400 	.word	0x40022400
 8002698:	40013c00 	.word	0x40013c00

0800269c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ac:	787b      	ldrb	r3, [r7, #1]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b2:	887a      	ldrh	r2, [r7, #2]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	619a      	str	r2, [r3, #24]
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e108      	b.n	80028f2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fc98 	bl	8001030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2203      	movs	r2, #3
 8002704:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270e:	d102      	bne.n	8002716 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 f820 	bl	8004760 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7c1a      	ldrb	r2, [r3, #16]
 8002728:	f88d 2000 	strb.w	r2, [sp]
 800272c:	3304      	adds	r3, #4
 800272e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002730:	f001 ffbc 	bl	80046ac <USB_CoreInit>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0d5      	b.n	80028f2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f002 f818 	bl	8004782 <USB_SetCurrentMode>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0c6      	b.n	80028f2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e04a      	b.n	8002800 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3315      	adds	r3, #21
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	3314      	adds	r3, #20
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	b298      	uxth	r0, r3
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	332e      	adds	r3, #46	@ 0x2e
 80027a6:	4602      	mov	r2, r0
 80027a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	440b      	add	r3, r1
 80027b8:	3318      	adds	r3, #24
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	331c      	adds	r3, #28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	3320      	adds	r3, #32
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3324      	adds	r3, #36	@ 0x24
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
 80027fc:	3301      	adds	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	791b      	ldrb	r3, [r3, #4]
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	429a      	cmp	r2, r3
 8002808:	d3af      	bcc.n	800276a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e044      	b.n	800289a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800283c:	7bfa      	ldrb	r2, [r7, #15]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800287e:	7bfa      	ldrb	r2, [r7, #15]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	3301      	adds	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	791b      	ldrb	r3, [r3, #4]
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3b5      	bcc.n	8002810 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6818      	ldr	r0, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7c1a      	ldrb	r2, [r3, #16]
 80028ac:	f88d 2000 	strb.w	r2, [sp]
 80028b0:	3304      	adds	r3, #4
 80028b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b4:	f001 ffb2 	bl	800481c <USB_DevInit>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e013      	b.n	80028f2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7b1b      	ldrb	r3, [r3, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f80b 	bl	80028fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 f96d 	bl	8004bca <USB_DevDisconnect>

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800292a:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_PCDEx_ActivateLPM+0x44>)
 800292c:	4313      	orrs	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	10000003 	.word	0x10000003

08002944 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002952:	6013      	str	r3, [r2, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <HAL_PWREx_EnableOverDrive+0x98>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002990:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002992:	f7fe fc41 	bl	8001218 <HAL_GetTick>
 8002996:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002998:	e009      	b.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299a:	f7fe fc3d 	bl	8001218 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029a8:	d901      	bls.n	80029ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e022      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029ae:	4b14      	ldr	r3, [pc, #80]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ba:	d1ee      	bne.n	800299a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0f      	ldr	r2, [pc, #60]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c8:	f7fe fc26 	bl	8001218 <HAL_GetTick>
 80029cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029ce:	e009      	b.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d0:	f7fe fc22 	bl	8001218 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029de:	d901      	bls.n	80029e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e007      	b.n	80029f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e4:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80029f0:	d1ee      	bne.n	80029d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40007000 	.word	0x40007000

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e29b      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b96      	ldr	r3, [pc, #600]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a34:	4b93      	ldr	r3, [pc, #588]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
 8002a40:	4b90      	ldr	r3, [pc, #576]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x130>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e275      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x7a>
 8002a70:	4b84      	ldr	r3, [pc, #528]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x9c>
 8002a86:	4b7f      	ldr	r3, [pc, #508]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b7c      	ldr	r3, [pc, #496]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7b      	ldr	r2, [pc, #492]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xc0>
 8002aaa:	4b76      	ldr	r3, [pc, #472]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a75      	ldr	r2, [pc, #468]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b73      	ldr	r3, [pc, #460]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a72      	ldr	r2, [pc, #456]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd8>
 8002ac4:	4b6f      	ldr	r3, [pc, #444]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6e      	ldr	r2, [pc, #440]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6b      	ldr	r2, [pc, #428]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fb98 	bl	8001218 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fb94 	bl	8001218 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e229      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b61      	ldr	r3, [pc, #388]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe8>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe fb84 	bl	8001218 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe fb80 	bl	8001218 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e215      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b57      	ldr	r3, [pc, #348]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x110>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d069      	beq.n	8002c16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b50      	ldr	r3, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
 8002b5a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b47      	ldr	r3, [pc, #284]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1e9      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b41      	ldr	r3, [pc, #260]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	493d      	ldr	r1, [pc, #244]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e040      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d023      	beq.n	8002be4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a38      	ldr	r2, [pc, #224]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fb36 	bl	8001218 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fb32 	bl	8001218 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1c7      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc2:	4b30      	ldr	r3, [pc, #192]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b2d      	ldr	r3, [pc, #180]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4929      	ldr	r1, [pc, #164]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
 8002be2:	e018      	b.n	8002c16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be4:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002bea:	f023 0301 	bic.w	r3, r3, #1
 8002bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fb12 	bl	8001218 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fe fb0e 	bl	8001218 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1a3      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d038      	beq.n	8002c94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe faef 	bl	8001218 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3e:	f7fe faeb 	bl	8001218 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e180      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x23a>
 8002c5c:	e01a      	b.n	8002c94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c62:	4a08      	ldr	r2, [pc, #32]	@ (8002c84 <HAL_RCC_OscConfig+0x280>)
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fad5 	bl	8001218 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c72:	f7fe fad1 	bl	8001218 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d903      	bls.n	8002c88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e166      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
 8002c84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a4 	beq.w	8002dea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10d      	bne.n	8002cca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cae:	4b89      	ldr	r3, [pc, #548]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a88      	ldr	r2, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b86      	ldr	r3, [pc, #536]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cca:	4b83      	ldr	r3, [pc, #524]	@ (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cd6:	4b80      	ldr	r3, [pc, #512]	@ (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a7f      	ldr	r2, [pc, #508]	@ (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe fa99 	bl	8001218 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe fa95 	bl	8001218 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	@ 0x64
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e12a      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cfc:	4b76      	ldr	r3, [pc, #472]	@ (8002ed8 <HAL_RCC_OscConfig+0x4d4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x31a>
 8002d10:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a6f      	ldr	r2, [pc, #444]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x33c>
 8002d26:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	4b68      	ldr	r3, [pc, #416]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a67      	ldr	r2, [pc, #412]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3e:	e01c      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b05      	cmp	r3, #5
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCC_OscConfig+0x35e>
 8002d48:	4b62      	ldr	r3, [pc, #392]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	4a61      	ldr	r2, [pc, #388]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d54:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a5e      	ldr	r2, [pc, #376]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d60:	e00b      	b.n	8002d7a <HAL_RCC_OscConfig+0x376>
 8002d62:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d66:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6e:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d72:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002d74:	f023 0304 	bic.w	r3, r3, #4
 8002d78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe fa49 	bl	8001218 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fa45 	bl	8001218 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0d8      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ee      	beq.n	8002d8a <HAL_RCC_OscConfig+0x386>
 8002dac:	e014      	b.n	8002dd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dae:	f7fe fa33 	bl	8001218 <HAL_GetTick>
 8002db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db6:	f7fe fa2f 	bl	8001218 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0c2      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ee      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d105      	bne.n	8002dea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dde:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80ae 	beq.w	8002f50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df4:	4b37      	ldr	r3, [pc, #220]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d06d      	beq.n	8002edc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d14b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b32      	ldr	r3, [pc, #200]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a31      	ldr	r2, [pc, #196]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fa00 	bl	8001218 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f9fc 	bl	8001218 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e091      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	019b      	lsls	r3, r3, #6
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e50:	085b      	lsrs	r3, r3, #1
 8002e52:	3b01      	subs	r3, #1
 8002e54:	041b      	lsls	r3, r3, #16
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	071b      	lsls	r3, r3, #28
 8002e66:	491b      	ldr	r1, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe f9ce 	bl	8001218 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe f9ca 	bl	8001218 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e05f      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x47c>
 8002e9e:	e057      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe f9b4 	bl	8001218 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe f9b0 	bl	8001218 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e045      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b03      	ldr	r3, [pc, #12]	@ (8002ed4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4b0>
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x54c>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f5c <HAL_RCC_OscConfig+0x558>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d129      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d122      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d119      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10f      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800

08002f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0d0      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f78:	4b6a      	ldr	r3, [pc, #424]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d910      	bls.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 020f 	bic.w	r2, r3, #15
 8002f8e:	4965      	ldr	r1, [pc, #404]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0b8      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d020      	beq.n	8002ff6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fc0:	4b59      	ldr	r3, [pc, #356]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	4a58      	ldr	r2, [pc, #352]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd8:	4b53      	ldr	r3, [pc, #332]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a52      	ldr	r2, [pc, #328]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe4:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	494d      	ldr	r1, [pc, #308]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d040      	beq.n	8003084 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b47      	ldr	r3, [pc, #284]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e07f      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b41      	ldr	r3, [pc, #260]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e073      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003032:	4b3d      	ldr	r3, [pc, #244]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e06b      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4936      	ldr	r1, [pc, #216]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fe f8e0 	bl	8001218 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fe f8dc 	bl	8001218 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e053      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b2d      	ldr	r3, [pc, #180]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003084:	4b27      	ldr	r3, [pc, #156]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d210      	bcs.n	80030b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b24      	ldr	r3, [pc, #144]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4922      	ldr	r1, [pc, #136]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b20      	ldr	r3, [pc, #128]	@ (8003124 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e032      	b.n	800311a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4916      	ldr	r1, [pc, #88]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d009      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	490e      	ldr	r1, [pc, #56]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030f2:	f000 f821 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 80030f6:	4602      	mov	r2, r0
 80030f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	490a      	ldr	r1, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	5ccb      	ldrb	r3, [r1, r3]
 8003106:	fa22 f303 	lsr.w	r3, r2, r3
 800310a:	4a09      	ldr	r2, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1d0>)
 800310c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800310e:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_RCC_ClockConfig+0x1d4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe f83c 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40023c00 	.word	0x40023c00
 8003128:	40023800 	.word	0x40023800
 800312c:	08007840 	.word	0x08007840
 8003130:	20000000 	.word	0x20000000
 8003134:	20000004 	.word	0x20000004

08003138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313c:	b094      	sub	sp, #80	@ 0x50
 800313e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	647b      	str	r3, [r7, #68]	@ 0x44
 8003144:	2300      	movs	r3, #0
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003148:	2300      	movs	r3, #0
 800314a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003150:	4b79      	ldr	r3, [pc, #484]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b08      	cmp	r3, #8
 800315a:	d00d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x40>
 800315c:	2b08      	cmp	r3, #8
 800315e:	f200 80e1 	bhi.w	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x34>
 8003166:	2b04      	cmp	r3, #4
 8003168:	d003      	beq.n	8003172 <HAL_RCC_GetSysClockFreq+0x3a>
 800316a:	e0db      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b73      	ldr	r3, [pc, #460]	@ (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 800316e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003170:	e0db      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003172:	4b73      	ldr	r3, [pc, #460]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x208>)
 8003174:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003176:	e0d8      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003178:	4b6f      	ldr	r3, [pc, #444]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003180:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003182:	4b6d      	ldr	r3, [pc, #436]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d063      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318e:	4b6a      	ldr	r3, [pc, #424]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	2200      	movs	r2, #0
 8003196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003198:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800319a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031aa:	4622      	mov	r2, r4
 80031ac:	462b      	mov	r3, r5
 80031ae:	f04f 0000 	mov.w	r0, #0
 80031b2:	f04f 0100 	mov.w	r1, #0
 80031b6:	0159      	lsls	r1, r3, #5
 80031b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031bc:	0150      	lsls	r0, r2, #5
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4621      	mov	r1, r4
 80031c4:	1a51      	subs	r1, r2, r1
 80031c6:	6139      	str	r1, [r7, #16]
 80031c8:	4629      	mov	r1, r5
 80031ca:	eb63 0301 	sbc.w	r3, r3, r1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031dc:	4659      	mov	r1, fp
 80031de:	018b      	lsls	r3, r1, #6
 80031e0:	4651      	mov	r1, sl
 80031e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e6:	4651      	mov	r1, sl
 80031e8:	018a      	lsls	r2, r1, #6
 80031ea:	4651      	mov	r1, sl
 80031ec:	ebb2 0801 	subs.w	r8, r2, r1
 80031f0:	4659      	mov	r1, fp
 80031f2:	eb63 0901 	sbc.w	r9, r3, r1
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800320a:	4690      	mov	r8, r2
 800320c:	4699      	mov	r9, r3
 800320e:	4623      	mov	r3, r4
 8003210:	eb18 0303 	adds.w	r3, r8, r3
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	462b      	mov	r3, r5
 8003218:	eb49 0303 	adc.w	r3, r9, r3
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800322a:	4629      	mov	r1, r5
 800322c:	024b      	lsls	r3, r1, #9
 800322e:	4621      	mov	r1, r4
 8003230:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003234:	4621      	mov	r1, r4
 8003236:	024a      	lsls	r2, r1, #9
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003242:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003244:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003248:	f7fd f852 	bl	80002f0 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003254:	e058      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b38      	ldr	r3, [pc, #224]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	2200      	movs	r2, #0
 800325e:	4618      	mov	r0, r3
 8003260:	4611      	mov	r1, r2
 8003262:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
 800326c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003270:	4642      	mov	r2, r8
 8003272:	464b      	mov	r3, r9
 8003274:	f04f 0000 	mov.w	r0, #0
 8003278:	f04f 0100 	mov.w	r1, #0
 800327c:	0159      	lsls	r1, r3, #5
 800327e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003282:	0150      	lsls	r0, r2, #5
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4641      	mov	r1, r8
 800328a:	ebb2 0a01 	subs.w	sl, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb63 0b01 	sbc.w	fp, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a8:	ebb2 040a 	subs.w	r4, r2, sl
 80032ac:	eb63 050b 	sbc.w	r5, r3, fp
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	00eb      	lsls	r3, r5, #3
 80032ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032be:	00e2      	lsls	r2, r4, #3
 80032c0:	4614      	mov	r4, r2
 80032c2:	461d      	mov	r5, r3
 80032c4:	4643      	mov	r3, r8
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	464b      	mov	r3, r9
 80032cc:	eb45 0303 	adc.w	r3, r5, r3
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032de:	4629      	mov	r1, r5
 80032e0:	028b      	lsls	r3, r1, #10
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e8:	4621      	mov	r1, r4
 80032ea:	028a      	lsls	r2, r1, #10
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	2200      	movs	r2, #0
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	61fa      	str	r2, [r7, #28]
 80032f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032fc:	f7fc fff8 	bl	80002f0 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x200>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	0c1b      	lsrs	r3, r3, #16
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003318:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800331a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_RCC_GetSysClockFreq+0x204>)
 8003326:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800332c:	4618      	mov	r0, r3
 800332e:	3750      	adds	r7, #80	@ 0x50
 8003330:	46bd      	mov	sp, r7
 8003332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800
 800333c:	00f42400 	.word	0x00f42400
 8003340:	007a1200 	.word	0x007a1200

08003344 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003348:	4b03      	ldr	r3, [pc, #12]	@ (8003358 <HAL_RCC_GetHCLKFreq+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000

0800335c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003360:	f7ff fff0 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0a9b      	lsrs	r3, r3, #10
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	08007850 	.word	0x08007850

08003384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003388:	f7ff ffdc 	bl	8003344 <HAL_RCC_GetHCLKFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	0b5b      	lsrs	r3, r3, #13
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	4903      	ldr	r1, [pc, #12]	@ (80033a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	08007850 	.word	0x08007850

080033ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033d4:	4b69      	ldr	r3, [pc, #420]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	4a68      	ldr	r2, [pc, #416]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033de:	6093      	str	r3, [r2, #8]
 80033e0:	4b66      	ldr	r3, [pc, #408]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e8:	4964      	ldr	r1, [pc, #400]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003406:	4b5d      	ldr	r3, [pc, #372]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800340c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	4959      	ldr	r1, [pc, #356]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003420:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003432:	2301      	movs	r3, #1
 8003434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003442:	4b4e      	ldr	r3, [pc, #312]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003444:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003448:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	494a      	ldr	r1, [pc, #296]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003460:	d101      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003462:	2301      	movs	r3, #1
 8003464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 808b 	beq.w	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	4b3a      	ldr	r3, [pc, #232]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	4a39      	ldr	r2, [pc, #228]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800349a:	6413      	str	r3, [r2, #64]	@ 0x40
 800349c:	4b37      	ldr	r3, [pc, #220]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034a8:	4b35      	ldr	r3, [pc, #212]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a34      	ldr	r2, [pc, #208]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b4:	f7fd feb0 	bl	8001218 <HAL_GetTick>
 80034b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fd feac 	bl	8001218 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e38f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034da:	4b28      	ldr	r3, [pc, #160]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d035      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d02e      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034f8:	4b20      	ldr	r3, [pc, #128]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003500:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003502:	4b1e      	ldr	r3, [pc, #120]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800350c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003512:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003518:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003520:	4b16      	ldr	r3, [pc, #88]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d114      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fe74 	bl	8001218 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fd fe70 	bl	8001218 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e351      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0ee      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003562:	d111      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003570:	4b04      	ldr	r3, [pc, #16]	@ (8003584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003572:	400b      	ands	r3, r1
 8003574:	4901      	ldr	r1, [pc, #4]	@ (800357c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
 800357a:	e00b      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800357c:	40023800 	.word	0x40023800
 8003580:	40007000 	.word	0x40007000
 8003584:	0ffffcff 	.word	0x0ffffcff
 8003588:	4bac      	ldr	r3, [pc, #688]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4aab      	ldr	r2, [pc, #684]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003592:	6093      	str	r3, [r2, #8]
 8003594:	4ba9      	ldr	r3, [pc, #676]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003596:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	49a6      	ldr	r1, [pc, #664]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035b2:	4ba2      	ldr	r3, [pc, #648]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b8:	4aa0      	ldr	r2, [pc, #640]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035c2:	4b9e      	ldr	r3, [pc, #632]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	499b      	ldr	r1, [pc, #620]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e0:	4b96      	ldr	r3, [pc, #600]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035ee:	4993      	ldr	r1, [pc, #588]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003602:	4b8e      	ldr	r3, [pc, #568]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003610:	498a      	ldr	r1, [pc, #552]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003624:	4b85      	ldr	r3, [pc, #532]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003632:	4982      	ldr	r1, [pc, #520]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003646:	4b7d      	ldr	r3, [pc, #500]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4979      	ldr	r1, [pc, #484]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003668:	4b74      	ldr	r3, [pc, #464]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	4971      	ldr	r1, [pc, #452]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800368a:	4b6c      	ldr	r3, [pc, #432]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800368c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003690:	f023 020c 	bic.w	r2, r3, #12
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003698:	4968      	ldr	r1, [pc, #416]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ac:	4b63      	ldr	r3, [pc, #396]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ba:	4960      	ldr	r1, [pc, #384]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036ce:	4b5b      	ldr	r3, [pc, #364]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	4957      	ldr	r1, [pc, #348]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036f0:	4b52      	ldr	r3, [pc, #328]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036fe:	494f      	ldr	r1, [pc, #316]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003712:	4b4a      	ldr	r3, [pc, #296]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003718:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003720:	4946      	ldr	r1, [pc, #280]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00a      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003734:	4b41      	ldr	r3, [pc, #260]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	493e      	ldr	r1, [pc, #248]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00a      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003756:	4b39      	ldr	r3, [pc, #228]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800375c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	4935      	ldr	r1, [pc, #212]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003778:	4b30      	ldr	r3, [pc, #192]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003786:	492d      	ldr	r1, [pc, #180]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800379a:	4b28      	ldr	r3, [pc, #160]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a8:	4924      	ldr	r1, [pc, #144]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037da:	4b18      	ldr	r3, [pc, #96]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e8:	4914      	ldr	r1, [pc, #80]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380c:	490b      	ldr	r1, [pc, #44]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	4313      	orrs	r3, r2
 8003810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00f      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003820:	4b06      	ldr	r3, [pc, #24]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003826:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	4902      	ldr	r1, [pc, #8]	@ (800383c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003838:	e002      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800384c:	4b8a      	ldr	r3, [pc, #552]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800384e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003852:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	4986      	ldr	r1, [pc, #536]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003870:	4b81      	ldr	r3, [pc, #516]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003876:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003880:	497d      	ldr	r1, [pc, #500]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d006      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80d6 	beq.w	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800389c:	4b76      	ldr	r3, [pc, #472]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a75      	ldr	r2, [pc, #468]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a8:	f7fd fcb6 	bl	8001218 <HAL_GetTick>
 80038ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038b0:	f7fd fcb2 	bl	8001218 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e195      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d021      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d11d      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038e2:	4b65      	ldr	r3, [pc, #404]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038f0:	4b61      	ldr	r3, [pc, #388]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f6:	0e1b      	lsrs	r3, r3, #24
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	019a      	lsls	r2, r3, #6
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	041b      	lsls	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	071b      	lsls	r3, r3, #28
 8003916:	4958      	ldr	r1, [pc, #352]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003932:	d00a      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003948:	d129      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800394a:	4b4b      	ldr	r3, [pc, #300]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800394c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003958:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800395e:	0f1b      	lsrs	r3, r3, #28
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	019a      	lsls	r2, r3, #6
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	061b      	lsls	r3, r3, #24
 8003978:	431a      	orrs	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	071b      	lsls	r3, r3, #28
 800397e:	493e      	ldr	r1, [pc, #248]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003986:	4b3c      	ldr	r3, [pc, #240]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003988:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800398c:	f023 021f 	bic.w	r2, r3, #31
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	3b01      	subs	r3, #1
 8003996:	4938      	ldr	r1, [pc, #224]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d01d      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039aa:	4b33      	ldr	r3, [pc, #204]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039b0:	0e1b      	lsrs	r3, r3, #24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039be:	0f1b      	lsrs	r3, r3, #28
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	019a      	lsls	r2, r3, #6
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	061b      	lsls	r3, r3, #24
 80039d8:	431a      	orrs	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	071b      	lsls	r3, r3, #28
 80039de:	4926      	ldr	r1, [pc, #152]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	019a      	lsls	r2, r3, #6
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	491a      	ldr	r1, [pc, #104]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a16:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fd fbf9 	bl	8001218 <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a2a:	f7fd fbf5 	bl	8001218 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b64      	cmp	r3, #100	@ 0x64
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e0d8      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	f040 80ce 	bne.w	8003bec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a50:	4b09      	ldr	r3, [pc, #36]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a08      	ldr	r2, [pc, #32]	@ (8003a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fbdc 	bl	8001218 <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a62:	e00b      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a64:	f7fd fbd8 	bl	8001218 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	@ 0x64
 8003a70:	d904      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0bb      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a76:	bf00      	nop
 8003a78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a88:	d0ec      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12a      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ab2:	4b51      	ldr	r3, [pc, #324]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac6:	0f1b      	lsrs	r3, r3, #28
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	019a      	lsls	r2, r3, #6
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	041b      	lsls	r3, r3, #16
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	071b      	lsls	r3, r3, #28
 8003ae6:	4944      	ldr	r1, [pc, #272]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aee:	4b42      	ldr	r3, [pc, #264]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003af4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	493d      	ldr	r1, [pc, #244]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d022      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b1c:	d11d      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b1e:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b2c:	4b32      	ldr	r3, [pc, #200]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b32:	0f1b      	lsrs	r3, r3, #28
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	041b      	lsls	r3, r3, #16
 8003b46:	431a      	orrs	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4929      	ldr	r1, [pc, #164]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d028      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b66:	4b24      	ldr	r3, [pc, #144]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6c:	0e1b      	lsrs	r3, r3, #24
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b74:	4b20      	ldr	r3, [pc, #128]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	019a      	lsls	r2, r3, #6
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	071b      	lsls	r3, r3, #28
 8003b9a:	4917      	ldr	r1, [pc, #92]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4911      	ldr	r1, [pc, #68]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bc4:	f7fd fb28 	bl	8001218 <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bcc:	f7fd fb24 	bl	8001218 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e007      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bea:	d1ef      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3720      	adds	r7, #32
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e040      	b.n	8003c90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd f978 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2224      	movs	r2, #36	@ 0x24
 8003c28:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fb16 	bl	8004274 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8af 	bl	8003dac <UART_SetConfig>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e01b      	b.n	8003c90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fb95 	bl	80043b8 <UART_CheckIdleState>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	@ 0x28
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d177      	bne.n	8003da0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_UART_Transmit+0x24>
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e070      	b.n	8003da2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2221      	movs	r2, #33	@ 0x21
 8003ccc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cce:	f7fd faa3 	bl	8001218 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cec:	d108      	bne.n	8003d00 <HAL_UART_Transmit+0x68>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e003      	b.n	8003d08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d08:	e02f      	b.n	8003d6a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2200      	movs	r2, #0
 8003d12:	2180      	movs	r1, #128	@ 0x80
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fbf7 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e03b      	b.n	8003da2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	3302      	adds	r3, #2
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e007      	b.n	8003d58 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	781a      	ldrb	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3301      	adds	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1c9      	bne.n	8003d0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2140      	movs	r1, #64	@ 0x40
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fbc1 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e005      	b.n	8003da2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
	...

08003dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689a      	ldr	r2, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4ba6      	ldr	r3, [pc, #664]	@ (8004070 <UART_SetConfig+0x2c4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6812      	ldr	r2, [r2, #0]
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a94      	ldr	r2, [pc, #592]	@ (8004074 <UART_SetConfig+0x2c8>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d120      	bne.n	8003e6a <UART_SetConfig+0xbe>
 8003e28:	4b93      	ldr	r3, [pc, #588]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d816      	bhi.n	8003e64 <UART_SetConfig+0xb8>
 8003e36:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <UART_SetConfig+0x90>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e4d 	.word	0x08003e4d
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003e53 	.word	0x08003e53
 8003e48:	08003e5f 	.word	0x08003e5f
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e150      	b.n	80040f4 <UART_SetConfig+0x348>
 8003e52:	2302      	movs	r3, #2
 8003e54:	77fb      	strb	r3, [r7, #31]
 8003e56:	e14d      	b.n	80040f4 <UART_SetConfig+0x348>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e14a      	b.n	80040f4 <UART_SetConfig+0x348>
 8003e5e:	2308      	movs	r3, #8
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e147      	b.n	80040f4 <UART_SetConfig+0x348>
 8003e64:	2310      	movs	r3, #16
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e144      	b.n	80040f4 <UART_SetConfig+0x348>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a83      	ldr	r2, [pc, #524]	@ (800407c <UART_SetConfig+0x2d0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d132      	bne.n	8003eda <UART_SetConfig+0x12e>
 8003e74:	4b80      	ldr	r3, [pc, #512]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d828      	bhi.n	8003ed4 <UART_SetConfig+0x128>
 8003e82:	a201      	add	r2, pc, #4	@ (adr r2, 8003e88 <UART_SetConfig+0xdc>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003ebd 	.word	0x08003ebd
 8003e8c:	08003ed5 	.word	0x08003ed5
 8003e90:	08003ed5 	.word	0x08003ed5
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003ec9 	.word	0x08003ec9
 8003e9c:	08003ed5 	.word	0x08003ed5
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003ed5 	.word	0x08003ed5
 8003ea8:	08003ec3 	.word	0x08003ec3
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003ed5 	.word	0x08003ed5
 8003eb4:	08003ed5 	.word	0x08003ed5
 8003eb8:	08003ecf 	.word	0x08003ecf
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e118      	b.n	80040f4 <UART_SetConfig+0x348>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
 8003ec6:	e115      	b.n	80040f4 <UART_SetConfig+0x348>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	77fb      	strb	r3, [r7, #31]
 8003ecc:	e112      	b.n	80040f4 <UART_SetConfig+0x348>
 8003ece:	2308      	movs	r3, #8
 8003ed0:	77fb      	strb	r3, [r7, #31]
 8003ed2:	e10f      	b.n	80040f4 <UART_SetConfig+0x348>
 8003ed4:	2310      	movs	r3, #16
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e10c      	b.n	80040f4 <UART_SetConfig+0x348>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a68      	ldr	r2, [pc, #416]	@ (8004080 <UART_SetConfig+0x2d4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d120      	bne.n	8003f26 <UART_SetConfig+0x17a>
 8003ee4:	4b64      	ldr	r3, [pc, #400]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eea:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003eee:	2b30      	cmp	r3, #48	@ 0x30
 8003ef0:	d013      	beq.n	8003f1a <UART_SetConfig+0x16e>
 8003ef2:	2b30      	cmp	r3, #48	@ 0x30
 8003ef4:	d814      	bhi.n	8003f20 <UART_SetConfig+0x174>
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d009      	beq.n	8003f0e <UART_SetConfig+0x162>
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d810      	bhi.n	8003f20 <UART_SetConfig+0x174>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <UART_SetConfig+0x15c>
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d006      	beq.n	8003f14 <UART_SetConfig+0x168>
 8003f06:	e00b      	b.n	8003f20 <UART_SetConfig+0x174>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0f2      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
 8003f12:	e0ef      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f14:	2304      	movs	r3, #4
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e0ec      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e0e9      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f20:	2310      	movs	r3, #16
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e0e6      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a56      	ldr	r2, [pc, #344]	@ (8004084 <UART_SetConfig+0x2d8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d120      	bne.n	8003f72 <UART_SetConfig+0x1c6>
 8003f30:	4b51      	ldr	r3, [pc, #324]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003f3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f3c:	d013      	beq.n	8003f66 <UART_SetConfig+0x1ba>
 8003f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f40:	d814      	bhi.n	8003f6c <UART_SetConfig+0x1c0>
 8003f42:	2b80      	cmp	r3, #128	@ 0x80
 8003f44:	d009      	beq.n	8003f5a <UART_SetConfig+0x1ae>
 8003f46:	2b80      	cmp	r3, #128	@ 0x80
 8003f48:	d810      	bhi.n	8003f6c <UART_SetConfig+0x1c0>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <UART_SetConfig+0x1a8>
 8003f4e:	2b40      	cmp	r3, #64	@ 0x40
 8003f50:	d006      	beq.n	8003f60 <UART_SetConfig+0x1b4>
 8003f52:	e00b      	b.n	8003f6c <UART_SetConfig+0x1c0>
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]
 8003f58:	e0cc      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e0c9      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f60:	2304      	movs	r3, #4
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e0c6      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f66:	2308      	movs	r3, #8
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e0c3      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e0c0      	b.n	80040f4 <UART_SetConfig+0x348>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a44      	ldr	r2, [pc, #272]	@ (8004088 <UART_SetConfig+0x2dc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d125      	bne.n	8003fc8 <UART_SetConfig+0x21c>
 8003f7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f8a:	d017      	beq.n	8003fbc <UART_SetConfig+0x210>
 8003f8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f90:	d817      	bhi.n	8003fc2 <UART_SetConfig+0x216>
 8003f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f96:	d00b      	beq.n	8003fb0 <UART_SetConfig+0x204>
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9c:	d811      	bhi.n	8003fc2 <UART_SetConfig+0x216>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <UART_SetConfig+0x1fe>
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa6:	d006      	beq.n	8003fb6 <UART_SetConfig+0x20a>
 8003fa8:	e00b      	b.n	8003fc2 <UART_SetConfig+0x216>
 8003faa:	2300      	movs	r3, #0
 8003fac:	77fb      	strb	r3, [r7, #31]
 8003fae:	e0a1      	b.n	80040f4 <UART_SetConfig+0x348>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e09e      	b.n	80040f4 <UART_SetConfig+0x348>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e09b      	b.n	80040f4 <UART_SetConfig+0x348>
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e098      	b.n	80040f4 <UART_SetConfig+0x348>
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e095      	b.n	80040f4 <UART_SetConfig+0x348>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800408c <UART_SetConfig+0x2e0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d125      	bne.n	800401e <UART_SetConfig+0x272>
 8003fd2:	4b29      	ldr	r3, [pc, #164]	@ (8004078 <UART_SetConfig+0x2cc>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe0:	d017      	beq.n	8004012 <UART_SetConfig+0x266>
 8003fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fe6:	d817      	bhi.n	8004018 <UART_SetConfig+0x26c>
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fec:	d00b      	beq.n	8004006 <UART_SetConfig+0x25a>
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff2:	d811      	bhi.n	8004018 <UART_SetConfig+0x26c>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <UART_SetConfig+0x254>
 8003ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffc:	d006      	beq.n	800400c <UART_SetConfig+0x260>
 8003ffe:	e00b      	b.n	8004018 <UART_SetConfig+0x26c>
 8004000:	2301      	movs	r3, #1
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e076      	b.n	80040f4 <UART_SetConfig+0x348>
 8004006:	2302      	movs	r3, #2
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e073      	b.n	80040f4 <UART_SetConfig+0x348>
 800400c:	2304      	movs	r3, #4
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e070      	b.n	80040f4 <UART_SetConfig+0x348>
 8004012:	2308      	movs	r3, #8
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e06d      	b.n	80040f4 <UART_SetConfig+0x348>
 8004018:	2310      	movs	r3, #16
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e06a      	b.n	80040f4 <UART_SetConfig+0x348>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <UART_SetConfig+0x2e4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d138      	bne.n	800409a <UART_SetConfig+0x2ee>
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <UART_SetConfig+0x2cc>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004032:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004036:	d017      	beq.n	8004068 <UART_SetConfig+0x2bc>
 8004038:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800403c:	d82a      	bhi.n	8004094 <UART_SetConfig+0x2e8>
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004042:	d00b      	beq.n	800405c <UART_SetConfig+0x2b0>
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004048:	d824      	bhi.n	8004094 <UART_SetConfig+0x2e8>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <UART_SetConfig+0x2aa>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	d006      	beq.n	8004062 <UART_SetConfig+0x2b6>
 8004054:	e01e      	b.n	8004094 <UART_SetConfig+0x2e8>
 8004056:	2300      	movs	r3, #0
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e04b      	b.n	80040f4 <UART_SetConfig+0x348>
 800405c:	2302      	movs	r3, #2
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	e048      	b.n	80040f4 <UART_SetConfig+0x348>
 8004062:	2304      	movs	r3, #4
 8004064:	77fb      	strb	r3, [r7, #31]
 8004066:	e045      	b.n	80040f4 <UART_SetConfig+0x348>
 8004068:	2308      	movs	r3, #8
 800406a:	77fb      	strb	r3, [r7, #31]
 800406c:	e042      	b.n	80040f4 <UART_SetConfig+0x348>
 800406e:	bf00      	nop
 8004070:	efff69f3 	.word	0xefff69f3
 8004074:	40011000 	.word	0x40011000
 8004078:	40023800 	.word	0x40023800
 800407c:	40004400 	.word	0x40004400
 8004080:	40004800 	.word	0x40004800
 8004084:	40004c00 	.word	0x40004c00
 8004088:	40005000 	.word	0x40005000
 800408c:	40011400 	.word	0x40011400
 8004090:	40007800 	.word	0x40007800
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e02c      	b.n	80040f4 <UART_SetConfig+0x348>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a72      	ldr	r2, [pc, #456]	@ (8004268 <UART_SetConfig+0x4bc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d125      	bne.n	80040f0 <UART_SetConfig+0x344>
 80040a4:	4b71      	ldr	r3, [pc, #452]	@ (800426c <UART_SetConfig+0x4c0>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040aa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040ae:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040b2:	d017      	beq.n	80040e4 <UART_SetConfig+0x338>
 80040b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80040b8:	d817      	bhi.n	80040ea <UART_SetConfig+0x33e>
 80040ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040be:	d00b      	beq.n	80040d8 <UART_SetConfig+0x32c>
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c4:	d811      	bhi.n	80040ea <UART_SetConfig+0x33e>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <UART_SetConfig+0x326>
 80040ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ce:	d006      	beq.n	80040de <UART_SetConfig+0x332>
 80040d0:	e00b      	b.n	80040ea <UART_SetConfig+0x33e>
 80040d2:	2300      	movs	r3, #0
 80040d4:	77fb      	strb	r3, [r7, #31]
 80040d6:	e00d      	b.n	80040f4 <UART_SetConfig+0x348>
 80040d8:	2302      	movs	r3, #2
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e00a      	b.n	80040f4 <UART_SetConfig+0x348>
 80040de:	2304      	movs	r3, #4
 80040e0:	77fb      	strb	r3, [r7, #31]
 80040e2:	e007      	b.n	80040f4 <UART_SetConfig+0x348>
 80040e4:	2308      	movs	r3, #8
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e004      	b.n	80040f4 <UART_SetConfig+0x348>
 80040ea:	2310      	movs	r3, #16
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e001      	b.n	80040f4 <UART_SetConfig+0x348>
 80040f0:	2310      	movs	r3, #16
 80040f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fc:	d15b      	bne.n	80041b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040fe:	7ffb      	ldrb	r3, [r7, #31]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d828      	bhi.n	8004156 <UART_SetConfig+0x3aa>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <UART_SetConfig+0x360>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004131 	.word	0x08004131
 8004110:	08004139 	.word	0x08004139
 8004114:	08004141 	.word	0x08004141
 8004118:	08004157 	.word	0x08004157
 800411c:	08004147 	.word	0x08004147
 8004120:	08004157 	.word	0x08004157
 8004124:	08004157 	.word	0x08004157
 8004128:	08004157 	.word	0x08004157
 800412c:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7ff f914 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e013      	b.n	8004160 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff f924 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 800413c:	61b8      	str	r0, [r7, #24]
        break;
 800413e:	e00f      	b.n	8004160 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b4b      	ldr	r3, [pc, #300]	@ (8004270 <UART_SetConfig+0x4c4>)
 8004142:	61bb      	str	r3, [r7, #24]
        break;
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7fe fff7 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 800414a:	61b8      	str	r0, [r7, #24]
        break;
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004152:	61bb      	str	r3, [r7, #24]
        break;
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	77bb      	strb	r3, [r7, #30]
        break;
 800415e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d074      	beq.n	8004250 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	005a      	lsls	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	441a      	add	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	fbb2 f3f3 	udiv	r3, r2, r3
 800417a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b0f      	cmp	r3, #15
 8004180:	d916      	bls.n	80041b0 <UART_SetConfig+0x404>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004188:	d212      	bcs.n	80041b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	b29b      	uxth	r3, r3
 800418e:	f023 030f 	bic.w	r3, r3, #15
 8004192:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	b29a      	uxth	r2, r3
 80041a0:	89fb      	ldrh	r3, [r7, #14]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	89fa      	ldrh	r2, [r7, #14]
 80041ac:	60da      	str	r2, [r3, #12]
 80041ae:	e04f      	b.n	8004250 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77bb      	strb	r3, [r7, #30]
 80041b4:	e04c      	b.n	8004250 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d828      	bhi.n	800420e <UART_SetConfig+0x462>
 80041bc:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <UART_SetConfig+0x418>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	080041e9 	.word	0x080041e9
 80041c8:	080041f1 	.word	0x080041f1
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	0800420f 	.word	0x0800420f
 80041d4:	080041ff 	.word	0x080041ff
 80041d8:	0800420f 	.word	0x0800420f
 80041dc:	0800420f 	.word	0x0800420f
 80041e0:	0800420f 	.word	0x0800420f
 80041e4:	08004207 	.word	0x08004207
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041e8:	f7ff f8b8 	bl	800335c <HAL_RCC_GetPCLK1Freq>
 80041ec:	61b8      	str	r0, [r7, #24]
        break;
 80041ee:	e013      	b.n	8004218 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7ff f8c8 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
 80041f4:	61b8      	str	r0, [r7, #24]
        break;
 80041f6:	e00f      	b.n	8004218 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <UART_SetConfig+0x4c4>)
 80041fa:	61bb      	str	r3, [r7, #24]
        break;
 80041fc:	e00c      	b.n	8004218 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fe ff9b 	bl	8003138 <HAL_RCC_GetSysClockFreq>
 8004202:	61b8      	str	r0, [r7, #24]
        break;
 8004204:	e008      	b.n	8004218 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420a:	61bb      	str	r3, [r7, #24]
        break;
 800420c:	e004      	b.n	8004218 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	77bb      	strb	r3, [r7, #30]
        break;
 8004216:	bf00      	nop
    }

    if (pclk != 0U)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	085a      	lsrs	r2, r3, #1
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	441a      	add	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	2b0f      	cmp	r3, #15
 8004236:	d909      	bls.n	800424c <UART_SetConfig+0x4a0>
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423e:	d205      	bcs.n	800424c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	e001      	b.n	8004250 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800425c:	7fbb      	ldrb	r3, [r7, #30]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3720      	adds	r7, #32
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40007c00 	.word	0x40007c00
 800426c:	40023800 	.word	0x40023800
 8004270:	00f42400 	.word	0x00f42400

08004274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004372:	d10a      	bne.n	800438a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b098      	sub	sp, #96	@ 0x60
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043c8:	f7fc ff26 	bl	8001218 <HAL_GetTick>
 80043cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d12e      	bne.n	800443a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e4:	2200      	movs	r2, #0
 80043e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f88c 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d021      	beq.n	800443a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440a:	653b      	str	r3, [r7, #80]	@ 0x50
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004414:	647b      	str	r3, [r7, #68]	@ 0x44
 8004416:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e062      	b.n	8004500 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d149      	bne.n	80044dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f856 	bl	8004508 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d03c      	beq.n	80044dc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	623b      	str	r3, [r7, #32]
   return(result);
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004480:	633b      	str	r3, [r7, #48]	@ 0x30
 8004482:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800448e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b4:	61fa      	str	r2, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	69b9      	ldr	r1, [r7, #24]
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	617b      	str	r3, [r7, #20]
   return(result);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e011      	b.n	8004500 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3758      	adds	r7, #88	@ 0x58
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004518:	e04f      	b.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d04b      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fc fe79 	bl	8001218 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <UART_WaitOnFlagUntilTimeout+0x30>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e04e      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d037      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b80      	cmp	r3, #128	@ 0x80
 800454e:	d034      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b40      	cmp	r3, #64	@ 0x40
 8004554:	d031      	beq.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b08      	cmp	r3, #8
 8004562:	d110      	bne.n	8004586 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2208      	movs	r2, #8
 800456a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 f838 	bl	80045e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2208      	movs	r2, #8
 8004576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e029      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004590:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004594:	d111      	bne.n	80045ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800459e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f81e 	bl	80045e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e00f      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4013      	ands	r3, r2
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	461a      	mov	r2, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d0a0      	beq.n	800451a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b095      	sub	sp, #84	@ 0x54
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004608:	643b      	str	r3, [r7, #64]	@ 0x40
 800460a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800460e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	61fb      	str	r3, [r7, #28]
   return(result);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800463c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800463e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004654:	2b01      	cmp	r3, #1
 8004656:	d118      	bne.n	800468a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	60bb      	str	r3, [r7, #8]
   return(result);
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f023 0310 	bic.w	r3, r3, #16
 800466c:	647b      	str	r3, [r7, #68]	@ 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6979      	ldr	r1, [r7, #20]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	613b      	str	r3, [r7, #16]
   return(result);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e6      	bne.n	8004658 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800469e:	bf00      	nop
 80046a0:	3754      	adds	r7, #84	@ 0x54
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ac:	b084      	sub	sp, #16
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	f107 001c 	add.w	r0, r7, #28
 80046ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046be:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d121      	bne.n	800470a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	4b21      	ldr	r3, [pc, #132]	@ (800475c <USB_CoreInit+0xb0>)
 80046d8:	4013      	ands	r3, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fa92 	bl	8004c28 <USB_CoreReset>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e010      	b.n	800472c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fa86 	bl	8004c28 <USB_CoreReset>
 800471c:	4603      	mov	r3, r0
 800471e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800472c:	7fbb      	ldrb	r3, [r7, #30]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10b      	bne.n	800474a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f043 0206 	orr.w	r2, r3, #6
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004756:	b004      	add	sp, #16
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	ffbdffbf 	.word	0xffbdffbf

08004760 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 0201 	bic.w	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800479e:	78fb      	ldrb	r3, [r7, #3]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d115      	bne.n	80047d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047b0:	200a      	movs	r0, #10
 80047b2:	f7fc fd3d 	bl	8001230 <HAL_Delay>
      ms += 10U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	330a      	adds	r3, #10
 80047ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa25 	bl	8004c0c <USB_GetMode>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d01e      	beq.n	8004806 <USB_SetCurrentMode+0x84>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80047cc:	d9f0      	bls.n	80047b0 <USB_SetCurrentMode+0x2e>
 80047ce:	e01a      	b.n	8004806 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d115      	bne.n	8004802 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80047e2:	200a      	movs	r0, #10
 80047e4:	f7fc fd24 	bl	8001230 <HAL_Delay>
      ms += 10U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	330a      	adds	r3, #10
 80047ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fa0c 	bl	8004c0c <USB_GetMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <USB_SetCurrentMode+0x84>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80047fe:	d9f0      	bls.n	80047e2 <USB_SetCurrentMode+0x60>
 8004800:	e001      	b.n	8004806 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e005      	b.n	8004812 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2bc8      	cmp	r3, #200	@ 0xc8
 800480a:	d101      	bne.n	8004810 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e000      	b.n	8004812 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800481c:	b084      	sub	sp, #16
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800482a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	e009      	b.n	8004850 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	3340      	adds	r3, #64	@ 0x40
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	2200      	movs	r2, #0
 8004848:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b0e      	cmp	r3, #14
 8004854:	d9f2      	bls.n	800483c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004856:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11c      	bne.n	8004898 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800486c:	f043 0302 	orr.w	r3, r3, #2
 8004870:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004876:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e005      	b.n	80048a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80048aa:	461a      	mov	r2, r3
 80048ac:	2300      	movs	r3, #0
 80048ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10d      	bne.n	80048d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c0:	2100      	movs	r1, #0
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f968 	bl	8004b98 <USB_SetDevSpeed>
 80048c8:	e008      	b.n	80048dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048ca:	2101      	movs	r1, #1
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f963 	bl	8004b98 <USB_SetDevSpeed>
 80048d2:	e003      	b.n	80048dc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048d4:	2103      	movs	r1, #3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f95e 	bl	8004b98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048dc:	2110      	movs	r1, #16
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f8fa 	bl	8004ad8 <USB_FlushTxFifo>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f924 	bl	8004b3c <USB_FlushRxFifo>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004910:	461a      	mov	r2, r3
 8004912:	2300      	movs	r3, #0
 8004914:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e043      	b.n	80049b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800493a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800493e:	d118      	bne.n	8004972 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004952:	461a      	mov	r2, r3
 8004954:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e013      	b.n	8004984 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004968:	461a      	mov	r2, r3
 800496a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e008      	b.n	8004984 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800497e:	461a      	mov	r2, r3
 8004980:	2300      	movs	r3, #0
 8004982:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049a2:	461a      	mov	r2, r3
 80049a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3301      	adds	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80049b4:	461a      	mov	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d3b5      	bcc.n	8004928 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049bc:	2300      	movs	r3, #0
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	e043      	b.n	8004a4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049d8:	d118      	bne.n	8004a0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10a      	bne.n	80049f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ec:	461a      	mov	r2, r3
 80049ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	e013      	b.n	8004a1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e008      	b.n	8004a1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3301      	adds	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a4e:	461a      	mov	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d3b5      	bcc.n	80049c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d105      	bne.n	8004a8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f043 0210 	orr.w	r2, r3, #16
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <USB_DevInit+0x2b4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d005      	beq.n	8004aac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f043 0208 	orr.w	r2, r3, #8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <USB_DevInit+0x2b8>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3718      	adds	r7, #24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004acc:	b004      	add	sp, #16
 8004ace:	4770      	bx	lr
 8004ad0:	803c3800 	.word	0x803c3800
 8004ad4:	40000004 	.word	0x40000004

08004ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004af2:	d901      	bls.n	8004af8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e01b      	b.n	8004b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	daf2      	bge.n	8004ae6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	019b      	lsls	r3, r3, #6
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b1c:	d901      	bls.n	8004b22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e006      	b.n	8004b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d0f0      	beq.n	8004b10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b54:	d901      	bls.n	8004b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e018      	b.n	8004b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	daf2      	bge.n	8004b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b78:	d901      	bls.n	8004b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e006      	b.n	8004b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b10      	cmp	r3, #16
 8004b88:	d0f0      	beq.n	8004b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004be4:	f023 0303 	bic.w	r3, r3, #3
 8004be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bf8:	f043 0302 	orr.w	r3, r3, #2
 8004bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0301 	and.w	r3, r3, #1
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c40:	d901      	bls.n	8004c46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e022      	b.n	8004c8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	daf2      	bge.n	8004c34 <USB_CoreReset+0xc>

  count = 10U;
 8004c4e:	230a      	movs	r3, #10
 8004c50:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004c52:	e002      	b.n	8004c5a <USB_CoreReset+0x32>
  {
    count--;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f9      	bne.n	8004c54 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c78:	d901      	bls.n	8004c7e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e006      	b.n	8004c8c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d0f0      	beq.n	8004c6c <USB_CoreReset+0x44>

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <__cvt>:
 8004c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c9a:	ed2d 8b02 	vpush	{d8}
 8004c9e:	eeb0 8b40 	vmov.f64	d8, d0
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	4617      	mov	r7, r2
 8004ca6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004ca8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004caa:	ee18 2a90 	vmov	r2, s17
 8004cae:	f025 0520 	bic.w	r5, r5, #32
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	bfb6      	itet	lt
 8004cb6:	222d      	movlt	r2, #45	@ 0x2d
 8004cb8:	2200      	movge	r2, #0
 8004cba:	eeb1 8b40 	vneglt.f64	d8, d0
 8004cbe:	2d46      	cmp	r5, #70	@ 0x46
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	701a      	strb	r2, [r3, #0]
 8004cc4:	d004      	beq.n	8004cd0 <__cvt+0x38>
 8004cc6:	2d45      	cmp	r5, #69	@ 0x45
 8004cc8:	d100      	bne.n	8004ccc <__cvt+0x34>
 8004cca:	3401      	adds	r4, #1
 8004ccc:	2102      	movs	r1, #2
 8004cce:	e000      	b.n	8004cd2 <__cvt+0x3a>
 8004cd0:	2103      	movs	r1, #3
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	ab02      	add	r3, sp, #8
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4622      	mov	r2, r4
 8004cdc:	4633      	mov	r3, r6
 8004cde:	eeb0 0b48 	vmov.f64	d0, d8
 8004ce2:	f000 fe41 	bl	8005968 <_dtoa_r>
 8004ce6:	2d47      	cmp	r5, #71	@ 0x47
 8004ce8:	d114      	bne.n	8004d14 <__cvt+0x7c>
 8004cea:	07fb      	lsls	r3, r7, #31
 8004cec:	d50a      	bpl.n	8004d04 <__cvt+0x6c>
 8004cee:	1902      	adds	r2, r0, r4
 8004cf0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	bf08      	it	eq
 8004cfa:	9203      	streq	r2, [sp, #12]
 8004cfc:	2130      	movs	r1, #48	@ 0x30
 8004cfe:	9b03      	ldr	r3, [sp, #12]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d319      	bcc.n	8004d38 <__cvt+0xa0>
 8004d04:	9b03      	ldr	r3, [sp, #12]
 8004d06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d08:	1a1b      	subs	r3, r3, r0
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	b005      	add	sp, #20
 8004d0e:	ecbd 8b02 	vpop	{d8}
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d14:	2d46      	cmp	r5, #70	@ 0x46
 8004d16:	eb00 0204 	add.w	r2, r0, r4
 8004d1a:	d1e9      	bne.n	8004cf0 <__cvt+0x58>
 8004d1c:	7803      	ldrb	r3, [r0, #0]
 8004d1e:	2b30      	cmp	r3, #48	@ 0x30
 8004d20:	d107      	bne.n	8004d32 <__cvt+0x9a>
 8004d22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2a:	bf1c      	itt	ne
 8004d2c:	f1c4 0401 	rsbne	r4, r4, #1
 8004d30:	6034      	strne	r4, [r6, #0]
 8004d32:	6833      	ldr	r3, [r6, #0]
 8004d34:	441a      	add	r2, r3
 8004d36:	e7db      	b.n	8004cf0 <__cvt+0x58>
 8004d38:	1c5c      	adds	r4, r3, #1
 8004d3a:	9403      	str	r4, [sp, #12]
 8004d3c:	7019      	strb	r1, [r3, #0]
 8004d3e:	e7de      	b.n	8004cfe <__cvt+0x66>

08004d40 <__exponent>:
 8004d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d42:	2900      	cmp	r1, #0
 8004d44:	bfba      	itte	lt
 8004d46:	4249      	neglt	r1, r1
 8004d48:	232d      	movlt	r3, #45	@ 0x2d
 8004d4a:	232b      	movge	r3, #43	@ 0x2b
 8004d4c:	2909      	cmp	r1, #9
 8004d4e:	7002      	strb	r2, [r0, #0]
 8004d50:	7043      	strb	r3, [r0, #1]
 8004d52:	dd29      	ble.n	8004da8 <__exponent+0x68>
 8004d54:	f10d 0307 	add.w	r3, sp, #7
 8004d58:	461d      	mov	r5, r3
 8004d5a:	270a      	movs	r7, #10
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004d62:	fb07 1416 	mls	r4, r7, r6, r1
 8004d66:	3430      	adds	r4, #48	@ 0x30
 8004d68:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	2c63      	cmp	r4, #99	@ 0x63
 8004d70:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d74:	4631      	mov	r1, r6
 8004d76:	dcf1      	bgt.n	8004d5c <__exponent+0x1c>
 8004d78:	3130      	adds	r1, #48	@ 0x30
 8004d7a:	1e94      	subs	r4, r2, #2
 8004d7c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d80:	1c41      	adds	r1, r0, #1
 8004d82:	4623      	mov	r3, r4
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	d30a      	bcc.n	8004d9e <__exponent+0x5e>
 8004d88:	f10d 0309 	add.w	r3, sp, #9
 8004d8c:	1a9b      	subs	r3, r3, r2
 8004d8e:	42ac      	cmp	r4, r5
 8004d90:	bf88      	it	hi
 8004d92:	2300      	movhi	r3, #0
 8004d94:	3302      	adds	r3, #2
 8004d96:	4403      	add	r3, r0
 8004d98:	1a18      	subs	r0, r3, r0
 8004d9a:	b003      	add	sp, #12
 8004d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d9e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004da2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004da6:	e7ed      	b.n	8004d84 <__exponent+0x44>
 8004da8:	2330      	movs	r3, #48	@ 0x30
 8004daa:	3130      	adds	r1, #48	@ 0x30
 8004dac:	7083      	strb	r3, [r0, #2]
 8004dae:	70c1      	strb	r1, [r0, #3]
 8004db0:	1d03      	adds	r3, r0, #4
 8004db2:	e7f1      	b.n	8004d98 <__exponent+0x58>
 8004db4:	0000      	movs	r0, r0
	...

08004db8 <_printf_float>:
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b08d      	sub	sp, #52	@ 0x34
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	4605      	mov	r5, r0
 8004dca:	f000 fccb 	bl	8005764 <_localeconv_r>
 8004dce:	f8d0 b000 	ldr.w	fp, [r0]
 8004dd2:	4658      	mov	r0, fp
 8004dd4:	f7fb fa84 	bl	80002e0 <strlen>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8004de0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	9005      	str	r0, [sp, #20]
 8004de8:	3307      	adds	r3, #7
 8004dea:	f023 0307 	bic.w	r3, r3, #7
 8004dee:	f103 0108 	add.w	r1, r3, #8
 8004df2:	f8c8 1000 	str.w	r1, [r8]
 8004df6:	ed93 0b00 	vldr	d0, [r3]
 8004dfa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005058 <_printf_float+0x2a0>
 8004dfe:	eeb0 7bc0 	vabs.f64	d7, d0
 8004e02:	eeb4 7b46 	vcmp.f64	d7, d6
 8004e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e0a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004e0e:	dd24      	ble.n	8004e5a <_printf_float+0xa2>
 8004e10:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e18:	d502      	bpl.n	8004e20 <_printf_float+0x68>
 8004e1a:	232d      	movs	r3, #45	@ 0x2d
 8004e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e20:	498f      	ldr	r1, [pc, #572]	@ (8005060 <_printf_float+0x2a8>)
 8004e22:	4b90      	ldr	r3, [pc, #576]	@ (8005064 <_printf_float+0x2ac>)
 8004e24:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8004e28:	bf8c      	ite	hi
 8004e2a:	4688      	movhi	r8, r1
 8004e2c:	4698      	movls	r8, r3
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	2303      	movs	r3, #3
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	f04f 0a00 	mov.w	sl, #0
 8004e3c:	9700      	str	r7, [sp, #0]
 8004e3e:	4633      	mov	r3, r6
 8004e40:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 f9d1 	bl	80051ec <_printf_common>
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f040 8089 	bne.w	8004f62 <_printf_float+0x1aa>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	b00d      	add	sp, #52	@ 0x34
 8004e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5a:	eeb4 0b40 	vcmp.f64	d0, d0
 8004e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e62:	d709      	bvc.n	8004e78 <_printf_float+0xc0>
 8004e64:	ee10 3a90 	vmov	r3, s1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bfbc      	itt	lt
 8004e6c:	232d      	movlt	r3, #45	@ 0x2d
 8004e6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e72:	497d      	ldr	r1, [pc, #500]	@ (8005068 <_printf_float+0x2b0>)
 8004e74:	4b7d      	ldr	r3, [pc, #500]	@ (800506c <_printf_float+0x2b4>)
 8004e76:	e7d5      	b.n	8004e24 <_printf_float+0x6c>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004e80:	d139      	bne.n	8004ef6 <_printf_float+0x13e>
 8004e82:	2306      	movs	r3, #6
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	9303      	str	r3, [sp, #12]
 8004e90:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e92:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004e96:	ab09      	add	r3, sp, #36	@ 0x24
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	6861      	ldr	r1, [r4, #4]
 8004e9c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f7ff fef9 	bl	8004c98 <__cvt>
 8004ea6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004eac:	4680      	mov	r8, r0
 8004eae:	d129      	bne.n	8004f04 <_printf_float+0x14c>
 8004eb0:	1cc8      	adds	r0, r1, #3
 8004eb2:	db02      	blt.n	8004eba <_printf_float+0x102>
 8004eb4:	6863      	ldr	r3, [r4, #4]
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	dd41      	ble.n	8004f3e <_printf_float+0x186>
 8004eba:	f1a9 0902 	sub.w	r9, r9, #2
 8004ebe:	fa5f f989 	uxtb.w	r9, r9
 8004ec2:	3901      	subs	r1, #1
 8004ec4:	464a      	mov	r2, r9
 8004ec6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004eca:	9109      	str	r1, [sp, #36]	@ 0x24
 8004ecc:	f7ff ff38 	bl	8004d40 <__exponent>
 8004ed0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ed2:	1813      	adds	r3, r2, r0
 8004ed4:	2a01      	cmp	r2, #1
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	dc02      	bgt.n	8004ee2 <_printf_float+0x12a>
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	07d2      	lsls	r2, r2, #31
 8004ee0:	d501      	bpl.n	8004ee6 <_printf_float+0x12e>
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0a6      	beq.n	8004e3c <_printf_float+0x84>
 8004eee:	232d      	movs	r3, #45	@ 0x2d
 8004ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef4:	e7a2      	b.n	8004e3c <_printf_float+0x84>
 8004ef6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004efa:	d1c4      	bne.n	8004e86 <_printf_float+0xce>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1c2      	bne.n	8004e86 <_printf_float+0xce>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e7bf      	b.n	8004e84 <_printf_float+0xcc>
 8004f04:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004f08:	d9db      	bls.n	8004ec2 <_printf_float+0x10a>
 8004f0a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004f0e:	d118      	bne.n	8004f42 <_printf_float+0x18a>
 8004f10:	2900      	cmp	r1, #0
 8004f12:	6863      	ldr	r3, [r4, #4]
 8004f14:	dd0b      	ble.n	8004f2e <_printf_float+0x176>
 8004f16:	6121      	str	r1, [r4, #16]
 8004f18:	b913      	cbnz	r3, 8004f20 <_printf_float+0x168>
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	07d0      	lsls	r0, r2, #31
 8004f1e:	d502      	bpl.n	8004f26 <_printf_float+0x16e>
 8004f20:	3301      	adds	r3, #1
 8004f22:	440b      	add	r3, r1
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004f28:	f04f 0a00 	mov.w	sl, #0
 8004f2c:	e7db      	b.n	8004ee6 <_printf_float+0x12e>
 8004f2e:	b913      	cbnz	r3, 8004f36 <_printf_float+0x17e>
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	07d2      	lsls	r2, r2, #31
 8004f34:	d501      	bpl.n	8004f3a <_printf_float+0x182>
 8004f36:	3302      	adds	r3, #2
 8004f38:	e7f4      	b.n	8004f24 <_printf_float+0x16c>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e7f2      	b.n	8004f24 <_printf_float+0x16c>
 8004f3e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8004f42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f44:	4299      	cmp	r1, r3
 8004f46:	db05      	blt.n	8004f54 <_printf_float+0x19c>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	6121      	str	r1, [r4, #16]
 8004f4c:	07d8      	lsls	r0, r3, #31
 8004f4e:	d5ea      	bpl.n	8004f26 <_printf_float+0x16e>
 8004f50:	1c4b      	adds	r3, r1, #1
 8004f52:	e7e7      	b.n	8004f24 <_printf_float+0x16c>
 8004f54:	2900      	cmp	r1, #0
 8004f56:	bfd4      	ite	le
 8004f58:	f1c1 0202 	rsble	r2, r1, #2
 8004f5c:	2201      	movgt	r2, #1
 8004f5e:	4413      	add	r3, r2
 8004f60:	e7e0      	b.n	8004f24 <_printf_float+0x16c>
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	055a      	lsls	r2, r3, #21
 8004f66:	d407      	bmi.n	8004f78 <_printf_float+0x1c0>
 8004f68:	6923      	ldr	r3, [r4, #16]
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	47b8      	blx	r7
 8004f72:	3001      	adds	r0, #1
 8004f74:	d12a      	bne.n	8004fcc <_printf_float+0x214>
 8004f76:	e76b      	b.n	8004e50 <_printf_float+0x98>
 8004f78:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004f7c:	f240 80e0 	bls.w	8005140 <_printf_float+0x388>
 8004f80:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8004f84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f8c:	d133      	bne.n	8004ff6 <_printf_float+0x23e>
 8004f8e:	4a38      	ldr	r2, [pc, #224]	@ (8005070 <_printf_float+0x2b8>)
 8004f90:	2301      	movs	r3, #1
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	f43f af59 	beq.w	8004e50 <_printf_float+0x98>
 8004f9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004fa2:	4543      	cmp	r3, r8
 8004fa4:	db02      	blt.n	8004fac <_printf_float+0x1f4>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	07d8      	lsls	r0, r3, #31
 8004faa:	d50f      	bpl.n	8004fcc <_printf_float+0x214>
 8004fac:	9b05      	ldr	r3, [sp, #20]
 8004fae:	465a      	mov	r2, fp
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af4a 	beq.w	8004e50 <_printf_float+0x98>
 8004fbc:	f04f 0900 	mov.w	r9, #0
 8004fc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fc4:	f104 0a1a 	add.w	sl, r4, #26
 8004fc8:	45c8      	cmp	r8, r9
 8004fca:	dc09      	bgt.n	8004fe0 <_printf_float+0x228>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	079b      	lsls	r3, r3, #30
 8004fd0:	f100 8107 	bmi.w	80051e2 <_printf_float+0x42a>
 8004fd4:	68e0      	ldr	r0, [r4, #12]
 8004fd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004fd8:	4298      	cmp	r0, r3
 8004fda:	bfb8      	it	lt
 8004fdc:	4618      	movlt	r0, r3
 8004fde:	e739      	b.n	8004e54 <_printf_float+0x9c>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	4652      	mov	r2, sl
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f af30 	beq.w	8004e50 <_printf_float+0x98>
 8004ff0:	f109 0901 	add.w	r9, r9, #1
 8004ff4:	e7e8      	b.n	8004fc8 <_printf_float+0x210>
 8004ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dc3b      	bgt.n	8005074 <_printf_float+0x2bc>
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <_printf_float+0x2b8>)
 8004ffe:	2301      	movs	r3, #1
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af22 	beq.w	8004e50 <_printf_float+0x98>
 800500c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005010:	ea59 0303 	orrs.w	r3, r9, r3
 8005014:	d102      	bne.n	800501c <_printf_float+0x264>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	07d9      	lsls	r1, r3, #31
 800501a:	d5d7      	bpl.n	8004fcc <_printf_float+0x214>
 800501c:	9b05      	ldr	r3, [sp, #20]
 800501e:	465a      	mov	r2, fp
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f af12 	beq.w	8004e50 <_printf_float+0x98>
 800502c:	f04f 0a00 	mov.w	sl, #0
 8005030:	f104 0b1a 	add.w	fp, r4, #26
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	425b      	negs	r3, r3
 8005038:	4553      	cmp	r3, sl
 800503a:	dc01      	bgt.n	8005040 <_printf_float+0x288>
 800503c:	464b      	mov	r3, r9
 800503e:	e794      	b.n	8004f6a <_printf_float+0x1b2>
 8005040:	2301      	movs	r3, #1
 8005042:	465a      	mov	r2, fp
 8005044:	4631      	mov	r1, r6
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	f43f af00 	beq.w	8004e50 <_printf_float+0x98>
 8005050:	f10a 0a01 	add.w	sl, sl, #1
 8005054:	e7ee      	b.n	8005034 <_printf_float+0x27c>
 8005056:	bf00      	nop
 8005058:	ffffffff 	.word	0xffffffff
 800505c:	7fefffff 	.word	0x7fefffff
 8005060:	0800785c 	.word	0x0800785c
 8005064:	08007858 	.word	0x08007858
 8005068:	08007864 	.word	0x08007864
 800506c:	08007860 	.word	0x08007860
 8005070:	08007868 	.word	0x08007868
 8005074:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005076:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800507a:	4553      	cmp	r3, sl
 800507c:	bfa8      	it	ge
 800507e:	4653      	movge	r3, sl
 8005080:	2b00      	cmp	r3, #0
 8005082:	4699      	mov	r9, r3
 8005084:	dc37      	bgt.n	80050f6 <_printf_float+0x33e>
 8005086:	2300      	movs	r3, #0
 8005088:	9307      	str	r3, [sp, #28]
 800508a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800508e:	f104 021a 	add.w	r2, r4, #26
 8005092:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005094:	9907      	ldr	r1, [sp, #28]
 8005096:	9306      	str	r3, [sp, #24]
 8005098:	eba3 0309 	sub.w	r3, r3, r9
 800509c:	428b      	cmp	r3, r1
 800509e:	dc31      	bgt.n	8005104 <_printf_float+0x34c>
 80050a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a2:	459a      	cmp	sl, r3
 80050a4:	dc3b      	bgt.n	800511e <_printf_float+0x366>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	07da      	lsls	r2, r3, #31
 80050aa:	d438      	bmi.n	800511e <_printf_float+0x366>
 80050ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ae:	ebaa 0903 	sub.w	r9, sl, r3
 80050b2:	9b06      	ldr	r3, [sp, #24]
 80050b4:	ebaa 0303 	sub.w	r3, sl, r3
 80050b8:	4599      	cmp	r9, r3
 80050ba:	bfa8      	it	ge
 80050bc:	4699      	movge	r9, r3
 80050be:	f1b9 0f00 	cmp.w	r9, #0
 80050c2:	dc34      	bgt.n	800512e <_printf_float+0x376>
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050cc:	f104 0b1a 	add.w	fp, r4, #26
 80050d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d2:	ebaa 0303 	sub.w	r3, sl, r3
 80050d6:	eba3 0309 	sub.w	r3, r3, r9
 80050da:	4543      	cmp	r3, r8
 80050dc:	f77f af76 	ble.w	8004fcc <_printf_float+0x214>
 80050e0:	2301      	movs	r3, #1
 80050e2:	465a      	mov	r2, fp
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	f43f aeb0 	beq.w	8004e50 <_printf_float+0x98>
 80050f0:	f108 0801 	add.w	r8, r8, #1
 80050f4:	e7ec      	b.n	80050d0 <_printf_float+0x318>
 80050f6:	4642      	mov	r2, r8
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d1c1      	bne.n	8005086 <_printf_float+0x2ce>
 8005102:	e6a5      	b.n	8004e50 <_printf_float+0x98>
 8005104:	2301      	movs	r3, #1
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	9206      	str	r2, [sp, #24]
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f ae9e 	beq.w	8004e50 <_printf_float+0x98>
 8005114:	9b07      	ldr	r3, [sp, #28]
 8005116:	9a06      	ldr	r2, [sp, #24]
 8005118:	3301      	adds	r3, #1
 800511a:	9307      	str	r3, [sp, #28]
 800511c:	e7b9      	b.n	8005092 <_printf_float+0x2da>
 800511e:	9b05      	ldr	r3, [sp, #20]
 8005120:	465a      	mov	r2, fp
 8005122:	4631      	mov	r1, r6
 8005124:	4628      	mov	r0, r5
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	d1bf      	bne.n	80050ac <_printf_float+0x2f4>
 800512c:	e690      	b.n	8004e50 <_printf_float+0x98>
 800512e:	9a06      	ldr	r2, [sp, #24]
 8005130:	464b      	mov	r3, r9
 8005132:	4442      	add	r2, r8
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	d1c2      	bne.n	80050c4 <_printf_float+0x30c>
 800513e:	e687      	b.n	8004e50 <_printf_float+0x98>
 8005140:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8005144:	f1b9 0f01 	cmp.w	r9, #1
 8005148:	dc01      	bgt.n	800514e <_printf_float+0x396>
 800514a:	07db      	lsls	r3, r3, #31
 800514c:	d536      	bpl.n	80051bc <_printf_float+0x404>
 800514e:	2301      	movs	r3, #1
 8005150:	4642      	mov	r2, r8
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f ae79 	beq.w	8004e50 <_printf_float+0x98>
 800515e:	9b05      	ldr	r3, [sp, #20]
 8005160:	465a      	mov	r2, fp
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	f43f ae71 	beq.w	8004e50 <_printf_float+0x98>
 800516e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8005172:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	f109 39ff 	add.w	r9, r9, #4294967295
 800517e:	d018      	beq.n	80051b2 <_printf_float+0x3fa>
 8005180:	464b      	mov	r3, r9
 8005182:	f108 0201 	add.w	r2, r8, #1
 8005186:	4631      	mov	r1, r6
 8005188:	4628      	mov	r0, r5
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	d10c      	bne.n	80051aa <_printf_float+0x3f2>
 8005190:	e65e      	b.n	8004e50 <_printf_float+0x98>
 8005192:	2301      	movs	r3, #1
 8005194:	465a      	mov	r2, fp
 8005196:	4631      	mov	r1, r6
 8005198:	4628      	mov	r0, r5
 800519a:	47b8      	blx	r7
 800519c:	3001      	adds	r0, #1
 800519e:	f43f ae57 	beq.w	8004e50 <_printf_float+0x98>
 80051a2:	f108 0801 	add.w	r8, r8, #1
 80051a6:	45c8      	cmp	r8, r9
 80051a8:	dbf3      	blt.n	8005192 <_printf_float+0x3da>
 80051aa:	4653      	mov	r3, sl
 80051ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80051b0:	e6dc      	b.n	8004f6c <_printf_float+0x1b4>
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	f104 0b1a 	add.w	fp, r4, #26
 80051ba:	e7f4      	b.n	80051a6 <_printf_float+0x3ee>
 80051bc:	2301      	movs	r3, #1
 80051be:	4642      	mov	r2, r8
 80051c0:	e7e1      	b.n	8005186 <_printf_float+0x3ce>
 80051c2:	2301      	movs	r3, #1
 80051c4:	464a      	mov	r2, r9
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f ae3f 	beq.w	8004e50 <_printf_float+0x98>
 80051d2:	f108 0801 	add.w	r8, r8, #1
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	4543      	cmp	r3, r8
 80051de:	dcf0      	bgt.n	80051c2 <_printf_float+0x40a>
 80051e0:	e6f8      	b.n	8004fd4 <_printf_float+0x21c>
 80051e2:	f04f 0800 	mov.w	r8, #0
 80051e6:	f104 0919 	add.w	r9, r4, #25
 80051ea:	e7f4      	b.n	80051d6 <_printf_float+0x41e>

080051ec <_printf_common>:
 80051ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	4616      	mov	r6, r2
 80051f2:	4698      	mov	r8, r3
 80051f4:	688a      	ldr	r2, [r1, #8]
 80051f6:	690b      	ldr	r3, [r1, #16]
 80051f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051fc:	4293      	cmp	r3, r2
 80051fe:	bfb8      	it	lt
 8005200:	4613      	movlt	r3, r2
 8005202:	6033      	str	r3, [r6, #0]
 8005204:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005208:	4607      	mov	r7, r0
 800520a:	460c      	mov	r4, r1
 800520c:	b10a      	cbz	r2, 8005212 <_printf_common+0x26>
 800520e:	3301      	adds	r3, #1
 8005210:	6033      	str	r3, [r6, #0]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	0699      	lsls	r1, r3, #26
 8005216:	bf42      	ittt	mi
 8005218:	6833      	ldrmi	r3, [r6, #0]
 800521a:	3302      	addmi	r3, #2
 800521c:	6033      	strmi	r3, [r6, #0]
 800521e:	6825      	ldr	r5, [r4, #0]
 8005220:	f015 0506 	ands.w	r5, r5, #6
 8005224:	d106      	bne.n	8005234 <_printf_common+0x48>
 8005226:	f104 0a19 	add.w	sl, r4, #25
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	6832      	ldr	r2, [r6, #0]
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	42ab      	cmp	r3, r5
 8005232:	dc26      	bgt.n	8005282 <_printf_common+0x96>
 8005234:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005238:	6822      	ldr	r2, [r4, #0]
 800523a:	3b00      	subs	r3, #0
 800523c:	bf18      	it	ne
 800523e:	2301      	movne	r3, #1
 8005240:	0692      	lsls	r2, r2, #26
 8005242:	d42b      	bmi.n	800529c <_printf_common+0xb0>
 8005244:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005248:	4641      	mov	r1, r8
 800524a:	4638      	mov	r0, r7
 800524c:	47c8      	blx	r9
 800524e:	3001      	adds	r0, #1
 8005250:	d01e      	beq.n	8005290 <_printf_common+0xa4>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	6922      	ldr	r2, [r4, #16]
 8005256:	f003 0306 	and.w	r3, r3, #6
 800525a:	2b04      	cmp	r3, #4
 800525c:	bf02      	ittt	eq
 800525e:	68e5      	ldreq	r5, [r4, #12]
 8005260:	6833      	ldreq	r3, [r6, #0]
 8005262:	1aed      	subeq	r5, r5, r3
 8005264:	68a3      	ldr	r3, [r4, #8]
 8005266:	bf0c      	ite	eq
 8005268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800526c:	2500      	movne	r5, #0
 800526e:	4293      	cmp	r3, r2
 8005270:	bfc4      	itt	gt
 8005272:	1a9b      	subgt	r3, r3, r2
 8005274:	18ed      	addgt	r5, r5, r3
 8005276:	2600      	movs	r6, #0
 8005278:	341a      	adds	r4, #26
 800527a:	42b5      	cmp	r5, r6
 800527c:	d11a      	bne.n	80052b4 <_printf_common+0xc8>
 800527e:	2000      	movs	r0, #0
 8005280:	e008      	b.n	8005294 <_printf_common+0xa8>
 8005282:	2301      	movs	r3, #1
 8005284:	4652      	mov	r2, sl
 8005286:	4641      	mov	r1, r8
 8005288:	4638      	mov	r0, r7
 800528a:	47c8      	blx	r9
 800528c:	3001      	adds	r0, #1
 800528e:	d103      	bne.n	8005298 <_printf_common+0xac>
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005298:	3501      	adds	r5, #1
 800529a:	e7c6      	b.n	800522a <_printf_common+0x3e>
 800529c:	18e1      	adds	r1, r4, r3
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	2030      	movs	r0, #48	@ 0x30
 80052a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052a6:	4422      	add	r2, r4
 80052a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052b0:	3302      	adds	r3, #2
 80052b2:	e7c7      	b.n	8005244 <_printf_common+0x58>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4622      	mov	r2, r4
 80052b8:	4641      	mov	r1, r8
 80052ba:	4638      	mov	r0, r7
 80052bc:	47c8      	blx	r9
 80052be:	3001      	adds	r0, #1
 80052c0:	d0e6      	beq.n	8005290 <_printf_common+0xa4>
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7d9      	b.n	800527a <_printf_common+0x8e>
	...

080052c8 <_printf_i>:
 80052c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052cc:	7e0f      	ldrb	r7, [r1, #24]
 80052ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052d0:	2f78      	cmp	r7, #120	@ 0x78
 80052d2:	4691      	mov	r9, r2
 80052d4:	4680      	mov	r8, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	469a      	mov	sl, r3
 80052da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052de:	d807      	bhi.n	80052f0 <_printf_i+0x28>
 80052e0:	2f62      	cmp	r7, #98	@ 0x62
 80052e2:	d80a      	bhi.n	80052fa <_printf_i+0x32>
 80052e4:	2f00      	cmp	r7, #0
 80052e6:	f000 80d1 	beq.w	800548c <_printf_i+0x1c4>
 80052ea:	2f58      	cmp	r7, #88	@ 0x58
 80052ec:	f000 80b8 	beq.w	8005460 <_printf_i+0x198>
 80052f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052f8:	e03a      	b.n	8005370 <_printf_i+0xa8>
 80052fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052fe:	2b15      	cmp	r3, #21
 8005300:	d8f6      	bhi.n	80052f0 <_printf_i+0x28>
 8005302:	a101      	add	r1, pc, #4	@ (adr r1, 8005308 <_printf_i+0x40>)
 8005304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005308:	08005361 	.word	0x08005361
 800530c:	08005375 	.word	0x08005375
 8005310:	080052f1 	.word	0x080052f1
 8005314:	080052f1 	.word	0x080052f1
 8005318:	080052f1 	.word	0x080052f1
 800531c:	080052f1 	.word	0x080052f1
 8005320:	08005375 	.word	0x08005375
 8005324:	080052f1 	.word	0x080052f1
 8005328:	080052f1 	.word	0x080052f1
 800532c:	080052f1 	.word	0x080052f1
 8005330:	080052f1 	.word	0x080052f1
 8005334:	08005473 	.word	0x08005473
 8005338:	0800539f 	.word	0x0800539f
 800533c:	0800542d 	.word	0x0800542d
 8005340:	080052f1 	.word	0x080052f1
 8005344:	080052f1 	.word	0x080052f1
 8005348:	08005495 	.word	0x08005495
 800534c:	080052f1 	.word	0x080052f1
 8005350:	0800539f 	.word	0x0800539f
 8005354:	080052f1 	.word	0x080052f1
 8005358:	080052f1 	.word	0x080052f1
 800535c:	08005435 	.word	0x08005435
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6032      	str	r2, [r6, #0]
 8005368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800536c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005370:	2301      	movs	r3, #1
 8005372:	e09c      	b.n	80054ae <_printf_i+0x1e6>
 8005374:	6833      	ldr	r3, [r6, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6031      	str	r1, [r6, #0]
 800537c:	0606      	lsls	r6, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xbc>
 8005380:	681d      	ldr	r5, [r3, #0]
 8005382:	e003      	b.n	800538c <_printf_i+0xc4>
 8005384:	0645      	lsls	r5, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xb8>
 8005388:	f9b3 5000 	ldrsh.w	r5, [r3]
 800538c:	2d00      	cmp	r5, #0
 800538e:	da03      	bge.n	8005398 <_printf_i+0xd0>
 8005390:	232d      	movs	r3, #45	@ 0x2d
 8005392:	426d      	negs	r5, r5
 8005394:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005398:	4858      	ldr	r0, [pc, #352]	@ (80054fc <_printf_i+0x234>)
 800539a:	230a      	movs	r3, #10
 800539c:	e011      	b.n	80053c2 <_printf_i+0xfa>
 800539e:	6821      	ldr	r1, [r4, #0]
 80053a0:	6833      	ldr	r3, [r6, #0]
 80053a2:	0608      	lsls	r0, r1, #24
 80053a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80053a8:	d402      	bmi.n	80053b0 <_printf_i+0xe8>
 80053aa:	0649      	lsls	r1, r1, #25
 80053ac:	bf48      	it	mi
 80053ae:	b2ad      	uxthmi	r5, r5
 80053b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053b2:	4852      	ldr	r0, [pc, #328]	@ (80054fc <_printf_i+0x234>)
 80053b4:	6033      	str	r3, [r6, #0]
 80053b6:	bf14      	ite	ne
 80053b8:	230a      	movne	r3, #10
 80053ba:	2308      	moveq	r3, #8
 80053bc:	2100      	movs	r1, #0
 80053be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053c2:	6866      	ldr	r6, [r4, #4]
 80053c4:	60a6      	str	r6, [r4, #8]
 80053c6:	2e00      	cmp	r6, #0
 80053c8:	db05      	blt.n	80053d6 <_printf_i+0x10e>
 80053ca:	6821      	ldr	r1, [r4, #0]
 80053cc:	432e      	orrs	r6, r5
 80053ce:	f021 0104 	bic.w	r1, r1, #4
 80053d2:	6021      	str	r1, [r4, #0]
 80053d4:	d04b      	beq.n	800546e <_printf_i+0x1a6>
 80053d6:	4616      	mov	r6, r2
 80053d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053dc:	fb03 5711 	mls	r7, r3, r1, r5
 80053e0:	5dc7      	ldrb	r7, [r0, r7]
 80053e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053e6:	462f      	mov	r7, r5
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	460d      	mov	r5, r1
 80053ec:	d9f4      	bls.n	80053d8 <_printf_i+0x110>
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d10b      	bne.n	800540a <_printf_i+0x142>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	07df      	lsls	r7, r3, #31
 80053f6:	d508      	bpl.n	800540a <_printf_i+0x142>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	6861      	ldr	r1, [r4, #4]
 80053fc:	4299      	cmp	r1, r3
 80053fe:	bfde      	ittt	le
 8005400:	2330      	movle	r3, #48	@ 0x30
 8005402:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005406:	f106 36ff 	addle.w	r6, r6, #4294967295
 800540a:	1b92      	subs	r2, r2, r6
 800540c:	6122      	str	r2, [r4, #16]
 800540e:	f8cd a000 	str.w	sl, [sp]
 8005412:	464b      	mov	r3, r9
 8005414:	aa03      	add	r2, sp, #12
 8005416:	4621      	mov	r1, r4
 8005418:	4640      	mov	r0, r8
 800541a:	f7ff fee7 	bl	80051ec <_printf_common>
 800541e:	3001      	adds	r0, #1
 8005420:	d14a      	bne.n	80054b8 <_printf_i+0x1f0>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	b004      	add	sp, #16
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	4832      	ldr	r0, [pc, #200]	@ (8005500 <_printf_i+0x238>)
 8005436:	2778      	movs	r7, #120	@ 0x78
 8005438:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	6831      	ldr	r1, [r6, #0]
 8005440:	061f      	lsls	r7, r3, #24
 8005442:	f851 5b04 	ldr.w	r5, [r1], #4
 8005446:	d402      	bmi.n	800544e <_printf_i+0x186>
 8005448:	065f      	lsls	r7, r3, #25
 800544a:	bf48      	it	mi
 800544c:	b2ad      	uxthmi	r5, r5
 800544e:	6031      	str	r1, [r6, #0]
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	bf44      	itt	mi
 8005454:	f043 0320 	orrmi.w	r3, r3, #32
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b11d      	cbz	r5, 8005464 <_printf_i+0x19c>
 800545c:	2310      	movs	r3, #16
 800545e:	e7ad      	b.n	80053bc <_printf_i+0xf4>
 8005460:	4826      	ldr	r0, [pc, #152]	@ (80054fc <_printf_i+0x234>)
 8005462:	e7e9      	b.n	8005438 <_printf_i+0x170>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	f023 0320 	bic.w	r3, r3, #32
 800546a:	6023      	str	r3, [r4, #0]
 800546c:	e7f6      	b.n	800545c <_printf_i+0x194>
 800546e:	4616      	mov	r6, r2
 8005470:	e7bd      	b.n	80053ee <_printf_i+0x126>
 8005472:	6833      	ldr	r3, [r6, #0]
 8005474:	6825      	ldr	r5, [r4, #0]
 8005476:	6961      	ldr	r1, [r4, #20]
 8005478:	1d18      	adds	r0, r3, #4
 800547a:	6030      	str	r0, [r6, #0]
 800547c:	062e      	lsls	r6, r5, #24
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	d501      	bpl.n	8005486 <_printf_i+0x1be>
 8005482:	6019      	str	r1, [r3, #0]
 8005484:	e002      	b.n	800548c <_printf_i+0x1c4>
 8005486:	0668      	lsls	r0, r5, #25
 8005488:	d5fb      	bpl.n	8005482 <_printf_i+0x1ba>
 800548a:	8019      	strh	r1, [r3, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	4616      	mov	r6, r2
 8005492:	e7bc      	b.n	800540e <_printf_i+0x146>
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	1d1a      	adds	r2, r3, #4
 8005498:	6032      	str	r2, [r6, #0]
 800549a:	681e      	ldr	r6, [r3, #0]
 800549c:	6862      	ldr	r2, [r4, #4]
 800549e:	2100      	movs	r1, #0
 80054a0:	4630      	mov	r0, r6
 80054a2:	f7fa fecd 	bl	8000240 <memchr>
 80054a6:	b108      	cbz	r0, 80054ac <_printf_i+0x1e4>
 80054a8:	1b80      	subs	r0, r0, r6
 80054aa:	6060      	str	r0, [r4, #4]
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	6123      	str	r3, [r4, #16]
 80054b0:	2300      	movs	r3, #0
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b6:	e7aa      	b.n	800540e <_printf_i+0x146>
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	4632      	mov	r2, r6
 80054bc:	4649      	mov	r1, r9
 80054be:	4640      	mov	r0, r8
 80054c0:	47d0      	blx	sl
 80054c2:	3001      	adds	r0, #1
 80054c4:	d0ad      	beq.n	8005422 <_printf_i+0x15a>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	079b      	lsls	r3, r3, #30
 80054ca:	d413      	bmi.n	80054f4 <_printf_i+0x22c>
 80054cc:	68e0      	ldr	r0, [r4, #12]
 80054ce:	9b03      	ldr	r3, [sp, #12]
 80054d0:	4298      	cmp	r0, r3
 80054d2:	bfb8      	it	lt
 80054d4:	4618      	movlt	r0, r3
 80054d6:	e7a6      	b.n	8005426 <_printf_i+0x15e>
 80054d8:	2301      	movs	r3, #1
 80054da:	4632      	mov	r2, r6
 80054dc:	4649      	mov	r1, r9
 80054de:	4640      	mov	r0, r8
 80054e0:	47d0      	blx	sl
 80054e2:	3001      	adds	r0, #1
 80054e4:	d09d      	beq.n	8005422 <_printf_i+0x15a>
 80054e6:	3501      	adds	r5, #1
 80054e8:	68e3      	ldr	r3, [r4, #12]
 80054ea:	9903      	ldr	r1, [sp, #12]
 80054ec:	1a5b      	subs	r3, r3, r1
 80054ee:	42ab      	cmp	r3, r5
 80054f0:	dcf2      	bgt.n	80054d8 <_printf_i+0x210>
 80054f2:	e7eb      	b.n	80054cc <_printf_i+0x204>
 80054f4:	2500      	movs	r5, #0
 80054f6:	f104 0619 	add.w	r6, r4, #25
 80054fa:	e7f5      	b.n	80054e8 <_printf_i+0x220>
 80054fc:	0800786a 	.word	0x0800786a
 8005500:	0800787b 	.word	0x0800787b

08005504 <std>:
 8005504:	2300      	movs	r3, #0
 8005506:	b510      	push	{r4, lr}
 8005508:	4604      	mov	r4, r0
 800550a:	e9c0 3300 	strd	r3, r3, [r0]
 800550e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005512:	6083      	str	r3, [r0, #8]
 8005514:	8181      	strh	r1, [r0, #12]
 8005516:	6643      	str	r3, [r0, #100]	@ 0x64
 8005518:	81c2      	strh	r2, [r0, #14]
 800551a:	6183      	str	r3, [r0, #24]
 800551c:	4619      	mov	r1, r3
 800551e:	2208      	movs	r2, #8
 8005520:	305c      	adds	r0, #92	@ 0x5c
 8005522:	f000 f916 	bl	8005752 <memset>
 8005526:	4b0d      	ldr	r3, [pc, #52]	@ (800555c <std+0x58>)
 8005528:	6263      	str	r3, [r4, #36]	@ 0x24
 800552a:	4b0d      	ldr	r3, [pc, #52]	@ (8005560 <std+0x5c>)
 800552c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800552e:	4b0d      	ldr	r3, [pc, #52]	@ (8005564 <std+0x60>)
 8005530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005532:	4b0d      	ldr	r3, [pc, #52]	@ (8005568 <std+0x64>)
 8005534:	6323      	str	r3, [r4, #48]	@ 0x30
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <std+0x68>)
 8005538:	6224      	str	r4, [r4, #32]
 800553a:	429c      	cmp	r4, r3
 800553c:	d006      	beq.n	800554c <std+0x48>
 800553e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005542:	4294      	cmp	r4, r2
 8005544:	d002      	beq.n	800554c <std+0x48>
 8005546:	33d0      	adds	r3, #208	@ 0xd0
 8005548:	429c      	cmp	r4, r3
 800554a:	d105      	bne.n	8005558 <std+0x54>
 800554c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005554:	f000 b97a 	b.w	800584c <__retarget_lock_init_recursive>
 8005558:	bd10      	pop	{r4, pc}
 800555a:	bf00      	nop
 800555c:	080056cd 	.word	0x080056cd
 8005560:	080056ef 	.word	0x080056ef
 8005564:	08005727 	.word	0x08005727
 8005568:	0800574b 	.word	0x0800574b
 800556c:	200009d8 	.word	0x200009d8

08005570 <stdio_exit_handler>:
 8005570:	4a02      	ldr	r2, [pc, #8]	@ (800557c <stdio_exit_handler+0xc>)
 8005572:	4903      	ldr	r1, [pc, #12]	@ (8005580 <stdio_exit_handler+0x10>)
 8005574:	4803      	ldr	r0, [pc, #12]	@ (8005584 <stdio_exit_handler+0x14>)
 8005576:	f000 b869 	b.w	800564c <_fwalk_sglue>
 800557a:	bf00      	nop
 800557c:	2000000c 	.word	0x2000000c
 8005580:	080070d1 	.word	0x080070d1
 8005584:	2000001c 	.word	0x2000001c

08005588 <cleanup_stdio>:
 8005588:	6841      	ldr	r1, [r0, #4]
 800558a:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <cleanup_stdio+0x34>)
 800558c:	4299      	cmp	r1, r3
 800558e:	b510      	push	{r4, lr}
 8005590:	4604      	mov	r4, r0
 8005592:	d001      	beq.n	8005598 <cleanup_stdio+0x10>
 8005594:	f001 fd9c 	bl	80070d0 <_fflush_r>
 8005598:	68a1      	ldr	r1, [r4, #8]
 800559a:	4b09      	ldr	r3, [pc, #36]	@ (80055c0 <cleanup_stdio+0x38>)
 800559c:	4299      	cmp	r1, r3
 800559e:	d002      	beq.n	80055a6 <cleanup_stdio+0x1e>
 80055a0:	4620      	mov	r0, r4
 80055a2:	f001 fd95 	bl	80070d0 <_fflush_r>
 80055a6:	68e1      	ldr	r1, [r4, #12]
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <cleanup_stdio+0x3c>)
 80055aa:	4299      	cmp	r1, r3
 80055ac:	d004      	beq.n	80055b8 <cleanup_stdio+0x30>
 80055ae:	4620      	mov	r0, r4
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f001 bd8c 	b.w	80070d0 <_fflush_r>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	200009d8 	.word	0x200009d8
 80055c0:	20000a40 	.word	0x20000a40
 80055c4:	20000aa8 	.word	0x20000aa8

080055c8 <global_stdio_init.part.0>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	4b0b      	ldr	r3, [pc, #44]	@ (80055f8 <global_stdio_init.part.0+0x30>)
 80055cc:	4c0b      	ldr	r4, [pc, #44]	@ (80055fc <global_stdio_init.part.0+0x34>)
 80055ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005600 <global_stdio_init.part.0+0x38>)
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	4620      	mov	r0, r4
 80055d4:	2200      	movs	r2, #0
 80055d6:	2104      	movs	r1, #4
 80055d8:	f7ff ff94 	bl	8005504 <std>
 80055dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055e0:	2201      	movs	r2, #1
 80055e2:	2109      	movs	r1, #9
 80055e4:	f7ff ff8e 	bl	8005504 <std>
 80055e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055ec:	2202      	movs	r2, #2
 80055ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055f2:	2112      	movs	r1, #18
 80055f4:	f7ff bf86 	b.w	8005504 <std>
 80055f8:	20000b10 	.word	0x20000b10
 80055fc:	200009d8 	.word	0x200009d8
 8005600:	08005571 	.word	0x08005571

08005604 <__sfp_lock_acquire>:
 8005604:	4801      	ldr	r0, [pc, #4]	@ (800560c <__sfp_lock_acquire+0x8>)
 8005606:	f000 b922 	b.w	800584e <__retarget_lock_acquire_recursive>
 800560a:	bf00      	nop
 800560c:	20000b19 	.word	0x20000b19

08005610 <__sfp_lock_release>:
 8005610:	4801      	ldr	r0, [pc, #4]	@ (8005618 <__sfp_lock_release+0x8>)
 8005612:	f000 b91d 	b.w	8005850 <__retarget_lock_release_recursive>
 8005616:	bf00      	nop
 8005618:	20000b19 	.word	0x20000b19

0800561c <__sinit>:
 800561c:	b510      	push	{r4, lr}
 800561e:	4604      	mov	r4, r0
 8005620:	f7ff fff0 	bl	8005604 <__sfp_lock_acquire>
 8005624:	6a23      	ldr	r3, [r4, #32]
 8005626:	b11b      	cbz	r3, 8005630 <__sinit+0x14>
 8005628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800562c:	f7ff bff0 	b.w	8005610 <__sfp_lock_release>
 8005630:	4b04      	ldr	r3, [pc, #16]	@ (8005644 <__sinit+0x28>)
 8005632:	6223      	str	r3, [r4, #32]
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__sinit+0x2c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f5      	bne.n	8005628 <__sinit+0xc>
 800563c:	f7ff ffc4 	bl	80055c8 <global_stdio_init.part.0>
 8005640:	e7f2      	b.n	8005628 <__sinit+0xc>
 8005642:	bf00      	nop
 8005644:	08005589 	.word	0x08005589
 8005648:	20000b10 	.word	0x20000b10

0800564c <_fwalk_sglue>:
 800564c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005650:	4607      	mov	r7, r0
 8005652:	4688      	mov	r8, r1
 8005654:	4614      	mov	r4, r2
 8005656:	2600      	movs	r6, #0
 8005658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800565c:	f1b9 0901 	subs.w	r9, r9, #1
 8005660:	d505      	bpl.n	800566e <_fwalk_sglue+0x22>
 8005662:	6824      	ldr	r4, [r4, #0]
 8005664:	2c00      	cmp	r4, #0
 8005666:	d1f7      	bne.n	8005658 <_fwalk_sglue+0xc>
 8005668:	4630      	mov	r0, r6
 800566a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800566e:	89ab      	ldrh	r3, [r5, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d907      	bls.n	8005684 <_fwalk_sglue+0x38>
 8005674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005678:	3301      	adds	r3, #1
 800567a:	d003      	beq.n	8005684 <_fwalk_sglue+0x38>
 800567c:	4629      	mov	r1, r5
 800567e:	4638      	mov	r0, r7
 8005680:	47c0      	blx	r8
 8005682:	4306      	orrs	r6, r0
 8005684:	3568      	adds	r5, #104	@ 0x68
 8005686:	e7e9      	b.n	800565c <_fwalk_sglue+0x10>

08005688 <siprintf>:
 8005688:	b40e      	push	{r1, r2, r3}
 800568a:	b510      	push	{r4, lr}
 800568c:	b09d      	sub	sp, #116	@ 0x74
 800568e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005690:	9002      	str	r0, [sp, #8]
 8005692:	9006      	str	r0, [sp, #24]
 8005694:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005698:	480a      	ldr	r0, [pc, #40]	@ (80056c4 <siprintf+0x3c>)
 800569a:	9107      	str	r1, [sp, #28]
 800569c:	9104      	str	r1, [sp, #16]
 800569e:	490a      	ldr	r1, [pc, #40]	@ (80056c8 <siprintf+0x40>)
 80056a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a4:	9105      	str	r1, [sp, #20]
 80056a6:	2400      	movs	r4, #0
 80056a8:	a902      	add	r1, sp, #8
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80056b0:	f001 fb8e 	bl	8006dd0 <_svfiprintf_r>
 80056b4:	9b02      	ldr	r3, [sp, #8]
 80056b6:	701c      	strb	r4, [r3, #0]
 80056b8:	b01d      	add	sp, #116	@ 0x74
 80056ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056be:	b003      	add	sp, #12
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	20000018 	.word	0x20000018
 80056c8:	ffff0208 	.word	0xffff0208

080056cc <__sread>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	460c      	mov	r4, r1
 80056d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d4:	f000 f86c 	bl	80057b0 <_read_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	bfab      	itete	ge
 80056dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056de:	89a3      	ldrhlt	r3, [r4, #12]
 80056e0:	181b      	addge	r3, r3, r0
 80056e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056e6:	bfac      	ite	ge
 80056e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056ea:	81a3      	strhlt	r3, [r4, #12]
 80056ec:	bd10      	pop	{r4, pc}

080056ee <__swrite>:
 80056ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f2:	461f      	mov	r7, r3
 80056f4:	898b      	ldrh	r3, [r1, #12]
 80056f6:	05db      	lsls	r3, r3, #23
 80056f8:	4605      	mov	r5, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	4616      	mov	r6, r2
 80056fe:	d505      	bpl.n	800570c <__swrite+0x1e>
 8005700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005704:	2302      	movs	r3, #2
 8005706:	2200      	movs	r2, #0
 8005708:	f000 f840 	bl	800578c <_lseek_r>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005712:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	4632      	mov	r2, r6
 800571a:	463b      	mov	r3, r7
 800571c:	4628      	mov	r0, r5
 800571e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005722:	f000 b857 	b.w	80057d4 <_write_r>

08005726 <__sseek>:
 8005726:	b510      	push	{r4, lr}
 8005728:	460c      	mov	r4, r1
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 f82d 	bl	800578c <_lseek_r>
 8005732:	1c43      	adds	r3, r0, #1
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	bf15      	itete	ne
 8005738:	6560      	strne	r0, [r4, #84]	@ 0x54
 800573a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800573e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005742:	81a3      	strheq	r3, [r4, #12]
 8005744:	bf18      	it	ne
 8005746:	81a3      	strhne	r3, [r4, #12]
 8005748:	bd10      	pop	{r4, pc}

0800574a <__sclose>:
 800574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800574e:	f000 b80d 	b.w	800576c <_close_r>

08005752 <memset>:
 8005752:	4402      	add	r2, r0
 8005754:	4603      	mov	r3, r0
 8005756:	4293      	cmp	r3, r2
 8005758:	d100      	bne.n	800575c <memset+0xa>
 800575a:	4770      	bx	lr
 800575c:	f803 1b01 	strb.w	r1, [r3], #1
 8005760:	e7f9      	b.n	8005756 <memset+0x4>
	...

08005764 <_localeconv_r>:
 8005764:	4800      	ldr	r0, [pc, #0]	@ (8005768 <_localeconv_r+0x4>)
 8005766:	4770      	bx	lr
 8005768:	20000158 	.word	0x20000158

0800576c <_close_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d06      	ldr	r5, [pc, #24]	@ (8005788 <_close_r+0x1c>)
 8005770:	2300      	movs	r3, #0
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fb fb1f 	bl	8000dba <_close>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_close_r+0x1a>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_close_r+0x1a>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	20000b14 	.word	0x20000b14

0800578c <_lseek_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	@ (80057ac <_lseek_r+0x20>)
 8005790:	4604      	mov	r4, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fb fb34 	bl	8000e08 <_lseek>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_lseek_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_lseek_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	20000b14 	.word	0x20000b14

080057b0 <_read_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d07      	ldr	r5, [pc, #28]	@ (80057d0 <_read_r+0x20>)
 80057b4:	4604      	mov	r4, r0
 80057b6:	4608      	mov	r0, r1
 80057b8:	4611      	mov	r1, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fb fac2 	bl	8000d48 <_read>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_read_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_read_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	20000b14 	.word	0x20000b14

080057d4 <_write_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	@ (80057f4 <_write_r+0x20>)
 80057d8:	4604      	mov	r4, r0
 80057da:	4608      	mov	r0, r1
 80057dc:	4611      	mov	r1, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fb facd 	bl	8000d82 <_write>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_write_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_write_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	20000b14 	.word	0x20000b14

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	@ (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000018 	.word	0x20000018

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4d0d      	ldr	r5, [pc, #52]	@ (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	@ (8005840 <__libc_init_array+0x3c>)
 800580a:	1b64      	subs	r4, r4, r5
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2600      	movs	r6, #0
 8005810:	42a6      	cmp	r6, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4d0b      	ldr	r5, [pc, #44]	@ (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	@ (8005848 <__libc_init_array+0x44>)
 8005818:	f001 fff8 	bl	800780c <_init>
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2600      	movs	r6, #0
 8005822:	42a6      	cmp	r6, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f855 3b04 	ldr.w	r3, [r5], #4
 800582c:	4798      	blx	r3
 800582e:	3601      	adds	r6, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f855 3b04 	ldr.w	r3, [r5], #4
 8005836:	4798      	blx	r3
 8005838:	3601      	adds	r6, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08007bd4 	.word	0x08007bd4
 8005840:	08007bd4 	.word	0x08007bd4
 8005844:	08007bd4 	.word	0x08007bd4
 8005848:	08007bd8 	.word	0x08007bd8

0800584c <__retarget_lock_init_recursive>:
 800584c:	4770      	bx	lr

0800584e <__retarget_lock_acquire_recursive>:
 800584e:	4770      	bx	lr

08005850 <__retarget_lock_release_recursive>:
 8005850:	4770      	bx	lr

08005852 <quorem>:
 8005852:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005856:	6903      	ldr	r3, [r0, #16]
 8005858:	690c      	ldr	r4, [r1, #16]
 800585a:	42a3      	cmp	r3, r4
 800585c:	4607      	mov	r7, r0
 800585e:	db7e      	blt.n	800595e <quorem+0x10c>
 8005860:	3c01      	subs	r4, #1
 8005862:	f101 0814 	add.w	r8, r1, #20
 8005866:	00a3      	lsls	r3, r4, #2
 8005868:	f100 0514 	add.w	r5, r0, #20
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800587c:	3301      	adds	r3, #1
 800587e:	429a      	cmp	r2, r3
 8005880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005884:	fbb2 f6f3 	udiv	r6, r2, r3
 8005888:	d32e      	bcc.n	80058e8 <quorem+0x96>
 800588a:	f04f 0a00 	mov.w	sl, #0
 800588e:	46c4      	mov	ip, r8
 8005890:	46ae      	mov	lr, r5
 8005892:	46d3      	mov	fp, sl
 8005894:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005898:	b298      	uxth	r0, r3
 800589a:	fb06 a000 	mla	r0, r6, r0, sl
 800589e:	0c02      	lsrs	r2, r0, #16
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	fb06 2303 	mla	r3, r6, r3, r2
 80058a6:	f8de 2000 	ldr.w	r2, [lr]
 80058aa:	b280      	uxth	r0, r0
 80058ac:	b292      	uxth	r2, r2
 80058ae:	1a12      	subs	r2, r2, r0
 80058b0:	445a      	add	r2, fp
 80058b2:	f8de 0000 	ldr.w	r0, [lr]
 80058b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80058c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80058c4:	b292      	uxth	r2, r2
 80058c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058ca:	45e1      	cmp	r9, ip
 80058cc:	f84e 2b04 	str.w	r2, [lr], #4
 80058d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058d4:	d2de      	bcs.n	8005894 <quorem+0x42>
 80058d6:	9b00      	ldr	r3, [sp, #0]
 80058d8:	58eb      	ldr	r3, [r5, r3]
 80058da:	b92b      	cbnz	r3, 80058e8 <quorem+0x96>
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	3b04      	subs	r3, #4
 80058e0:	429d      	cmp	r5, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	d32f      	bcc.n	8005946 <quorem+0xf4>
 80058e6:	613c      	str	r4, [r7, #16]
 80058e8:	4638      	mov	r0, r7
 80058ea:	f001 f90d 	bl	8006b08 <__mcmp>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	db25      	blt.n	800593e <quorem+0xec>
 80058f2:	4629      	mov	r1, r5
 80058f4:	2000      	movs	r0, #0
 80058f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80058fa:	f8d1 c000 	ldr.w	ip, [r1]
 80058fe:	fa1f fe82 	uxth.w	lr, r2
 8005902:	fa1f f38c 	uxth.w	r3, ip
 8005906:	eba3 030e 	sub.w	r3, r3, lr
 800590a:	4403      	add	r3, r0
 800590c:	0c12      	lsrs	r2, r2, #16
 800590e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005912:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005916:	b29b      	uxth	r3, r3
 8005918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800591c:	45c1      	cmp	r9, r8
 800591e:	f841 3b04 	str.w	r3, [r1], #4
 8005922:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005926:	d2e6      	bcs.n	80058f6 <quorem+0xa4>
 8005928:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800592c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005930:	b922      	cbnz	r2, 800593c <quorem+0xea>
 8005932:	3b04      	subs	r3, #4
 8005934:	429d      	cmp	r5, r3
 8005936:	461a      	mov	r2, r3
 8005938:	d30b      	bcc.n	8005952 <quorem+0x100>
 800593a:	613c      	str	r4, [r7, #16]
 800593c:	3601      	adds	r6, #1
 800593e:	4630      	mov	r0, r6
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005946:	6812      	ldr	r2, [r2, #0]
 8005948:	3b04      	subs	r3, #4
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1cb      	bne.n	80058e6 <quorem+0x94>
 800594e:	3c01      	subs	r4, #1
 8005950:	e7c6      	b.n	80058e0 <quorem+0x8e>
 8005952:	6812      	ldr	r2, [r2, #0]
 8005954:	3b04      	subs	r3, #4
 8005956:	2a00      	cmp	r2, #0
 8005958:	d1ef      	bne.n	800593a <quorem+0xe8>
 800595a:	3c01      	subs	r4, #1
 800595c:	e7ea      	b.n	8005934 <quorem+0xe2>
 800595e:	2000      	movs	r0, #0
 8005960:	e7ee      	b.n	8005940 <quorem+0xee>
 8005962:	0000      	movs	r0, r0
 8005964:	0000      	movs	r0, r0
	...

08005968 <_dtoa_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	ed2d 8b02 	vpush	{d8}
 8005970:	69c7      	ldr	r7, [r0, #28]
 8005972:	b091      	sub	sp, #68	@ 0x44
 8005974:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005978:	ec55 4b10 	vmov	r4, r5, d0
 800597c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800597e:	9107      	str	r1, [sp, #28]
 8005980:	4681      	mov	r9, r0
 8005982:	9209      	str	r2, [sp, #36]	@ 0x24
 8005984:	930d      	str	r3, [sp, #52]	@ 0x34
 8005986:	b97f      	cbnz	r7, 80059a8 <_dtoa_r+0x40>
 8005988:	2010      	movs	r0, #16
 800598a:	f000 fd95 	bl	80064b8 <malloc>
 800598e:	4602      	mov	r2, r0
 8005990:	f8c9 001c 	str.w	r0, [r9, #28]
 8005994:	b920      	cbnz	r0, 80059a0 <_dtoa_r+0x38>
 8005996:	4ba0      	ldr	r3, [pc, #640]	@ (8005c18 <_dtoa_r+0x2b0>)
 8005998:	21ef      	movs	r1, #239	@ 0xef
 800599a:	48a0      	ldr	r0, [pc, #640]	@ (8005c1c <_dtoa_r+0x2b4>)
 800599c:	f001 fbf8 	bl	8007190 <__assert_func>
 80059a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80059a4:	6007      	str	r7, [r0, #0]
 80059a6:	60c7      	str	r7, [r0, #12]
 80059a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059ac:	6819      	ldr	r1, [r3, #0]
 80059ae:	b159      	cbz	r1, 80059c8 <_dtoa_r+0x60>
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	604a      	str	r2, [r1, #4]
 80059b4:	2301      	movs	r3, #1
 80059b6:	4093      	lsls	r3, r2
 80059b8:	608b      	str	r3, [r1, #8]
 80059ba:	4648      	mov	r0, r9
 80059bc:	f000 fe72 	bl	80066a4 <_Bfree>
 80059c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	1e2b      	subs	r3, r5, #0
 80059ca:	bfbb      	ittet	lt
 80059cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059d0:	9303      	strlt	r3, [sp, #12]
 80059d2:	2300      	movge	r3, #0
 80059d4:	2201      	movlt	r2, #1
 80059d6:	bfac      	ite	ge
 80059d8:	6033      	strge	r3, [r6, #0]
 80059da:	6032      	strlt	r2, [r6, #0]
 80059dc:	4b90      	ldr	r3, [pc, #576]	@ (8005c20 <_dtoa_r+0x2b8>)
 80059de:	9e03      	ldr	r6, [sp, #12]
 80059e0:	43b3      	bics	r3, r6
 80059e2:	d110      	bne.n	8005a06 <_dtoa_r+0x9e>
 80059e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80059e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80059ea:	6013      	str	r3, [r2, #0]
 80059ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80059f0:	4323      	orrs	r3, r4
 80059f2:	f000 84e6 	beq.w	80063c2 <_dtoa_r+0xa5a>
 80059f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80059f8:	4f8a      	ldr	r7, [pc, #552]	@ (8005c24 <_dtoa_r+0x2bc>)
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 84e8 	beq.w	80063d0 <_dtoa_r+0xa68>
 8005a00:	1cfb      	adds	r3, r7, #3
 8005a02:	f000 bce3 	b.w	80063cc <_dtoa_r+0xa64>
 8005a06:	ed9d 8b02 	vldr	d8, [sp, #8]
 8005a0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a12:	d10a      	bne.n	8005a2a <_dtoa_r+0xc2>
 8005a14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a16:	2301      	movs	r3, #1
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005a1c:	b113      	cbz	r3, 8005a24 <_dtoa_r+0xbc>
 8005a1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8005a20:	4b81      	ldr	r3, [pc, #516]	@ (8005c28 <_dtoa_r+0x2c0>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	4f81      	ldr	r7, [pc, #516]	@ (8005c2c <_dtoa_r+0x2c4>)
 8005a26:	f000 bcd3 	b.w	80063d0 <_dtoa_r+0xa68>
 8005a2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8005a2c:	a90f      	add	r1, sp, #60	@ 0x3c
 8005a2e:	4648      	mov	r0, r9
 8005a30:	eeb0 0b48 	vmov.f64	d0, d8
 8005a34:	f001 f918 	bl	8006c68 <__d2b>
 8005a38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8005a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a3e:	9001      	str	r0, [sp, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d045      	beq.n	8005ad0 <_dtoa_r+0x168>
 8005a44:	eeb0 7b48 	vmov.f64	d7, d8
 8005a48:	ee18 1a90 	vmov	r1, s17
 8005a4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005a50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8005a54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005a58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8005a5c:	2500      	movs	r5, #0
 8005a5e:	ee07 1a90 	vmov	s15, r1
 8005a62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8005a66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005c00 <_dtoa_r+0x298>
 8005a6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8005c08 <_dtoa_r+0x2a0>
 8005a72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005a76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8005c10 <_dtoa_r+0x2a8>
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8005a82:	eeb0 7b46 	vmov.f64	d7, d6
 8005a86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005a8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005a8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	ee16 8a90 	vmov	r8, s13
 8005a9a:	d508      	bpl.n	8005aae <_dtoa_r+0x146>
 8005a9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005aa0:	eeb4 6b47 	vcmp.f64	d6, d7
 8005aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa8:	bf18      	it	ne
 8005aaa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8005aae:	f1b8 0f16 	cmp.w	r8, #22
 8005ab2:	d82b      	bhi.n	8005b0c <_dtoa_r+0x1a4>
 8005ab4:	495e      	ldr	r1, [pc, #376]	@ (8005c30 <_dtoa_r+0x2c8>)
 8005ab6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8005aba:	ed91 7b00 	vldr	d7, [r1]
 8005abe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac6:	d501      	bpl.n	8005acc <_dtoa_r+0x164>
 8005ac8:	f108 38ff 	add.w	r8, r8, #4294967295
 8005acc:	2100      	movs	r1, #0
 8005ace:	e01e      	b.n	8005b0e <_dtoa_r+0x1a6>
 8005ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8005ad8:	2920      	cmp	r1, #32
 8005ada:	bfc1      	itttt	gt
 8005adc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8005ae0:	408e      	lslgt	r6, r1
 8005ae2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8005ae6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8005aea:	bfd6      	itet	le
 8005aec:	f1c1 0120 	rsble	r1, r1, #32
 8005af0:	4331      	orrgt	r1, r6
 8005af2:	fa04 f101 	lslle.w	r1, r4, r1
 8005af6:	ee07 1a90 	vmov	s15, r1
 8005afa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005afe:	3b01      	subs	r3, #1
 8005b00:	ee17 1a90 	vmov	r1, s15
 8005b04:	2501      	movs	r5, #1
 8005b06:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8005b0a:	e7a8      	b.n	8005a5e <_dtoa_r+0xf6>
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	1e53      	subs	r3, r2, #1
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	bf45      	ittet	mi
 8005b16:	f1c2 0301 	rsbmi	r3, r2, #1
 8005b1a:	9304      	strmi	r3, [sp, #16]
 8005b1c:	2300      	movpl	r3, #0
 8005b1e:	2300      	movmi	r3, #0
 8005b20:	bf4c      	ite	mi
 8005b22:	9306      	strmi	r3, [sp, #24]
 8005b24:	9304      	strpl	r3, [sp, #16]
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	910c      	str	r1, [sp, #48]	@ 0x30
 8005b2c:	db18      	blt.n	8005b60 <_dtoa_r+0x1f8>
 8005b2e:	9b06      	ldr	r3, [sp, #24]
 8005b30:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005b34:	4443      	add	r3, r8
 8005b36:	9306      	str	r3, [sp, #24]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9a07      	ldr	r2, [sp, #28]
 8005b3c:	2a09      	cmp	r2, #9
 8005b3e:	d845      	bhi.n	8005bcc <_dtoa_r+0x264>
 8005b40:	2a05      	cmp	r2, #5
 8005b42:	bfc4      	itt	gt
 8005b44:	3a04      	subgt	r2, #4
 8005b46:	9207      	strgt	r2, [sp, #28]
 8005b48:	9a07      	ldr	r2, [sp, #28]
 8005b4a:	f1a2 0202 	sub.w	r2, r2, #2
 8005b4e:	bfcc      	ite	gt
 8005b50:	2400      	movgt	r4, #0
 8005b52:	2401      	movle	r4, #1
 8005b54:	2a03      	cmp	r2, #3
 8005b56:	d844      	bhi.n	8005be2 <_dtoa_r+0x27a>
 8005b58:	e8df f002 	tbb	[pc, r2]
 8005b5c:	0b173634 	.word	0x0b173634
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	2200      	movs	r2, #0
 8005b64:	eba3 0308 	sub.w	r3, r3, r8
 8005b68:	9304      	str	r3, [sp, #16]
 8005b6a:	920a      	str	r2, [sp, #40]	@ 0x28
 8005b6c:	f1c8 0300 	rsb	r3, r8, #0
 8005b70:	e7e3      	b.n	8005b3a <_dtoa_r+0x1d2>
 8005b72:	2201      	movs	r2, #1
 8005b74:	9208      	str	r2, [sp, #32]
 8005b76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b78:	eb08 0b02 	add.w	fp, r8, r2
 8005b7c:	f10b 0a01 	add.w	sl, fp, #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	bfb8      	it	lt
 8005b86:	2201      	movlt	r2, #1
 8005b88:	e006      	b.n	8005b98 <_dtoa_r+0x230>
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	9208      	str	r2, [sp, #32]
 8005b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	dd29      	ble.n	8005be8 <_dtoa_r+0x280>
 8005b94:	4693      	mov	fp, r2
 8005b96:	4692      	mov	sl, r2
 8005b98:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	2004      	movs	r0, #4
 8005ba0:	f100 0614 	add.w	r6, r0, #20
 8005ba4:	4296      	cmp	r6, r2
 8005ba6:	d926      	bls.n	8005bf6 <_dtoa_r+0x28e>
 8005ba8:	6079      	str	r1, [r7, #4]
 8005baa:	4648      	mov	r0, r9
 8005bac:	9305      	str	r3, [sp, #20]
 8005bae:	f000 fd39 	bl	8006624 <_Balloc>
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	4607      	mov	r7, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d13e      	bne.n	8005c38 <_dtoa_r+0x2d0>
 8005bba:	4b1e      	ldr	r3, [pc, #120]	@ (8005c34 <_dtoa_r+0x2cc>)
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005bc2:	e6ea      	b.n	800599a <_dtoa_r+0x32>
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	e7e1      	b.n	8005b8c <_dtoa_r+0x224>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	e7d3      	b.n	8005b74 <_dtoa_r+0x20c>
 8005bcc:	2401      	movs	r4, #1
 8005bce:	2200      	movs	r2, #0
 8005bd0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8005bd4:	f04f 3bff 	mov.w	fp, #4294967295
 8005bd8:	2100      	movs	r1, #0
 8005bda:	46da      	mov	sl, fp
 8005bdc:	2212      	movs	r2, #18
 8005bde:	9109      	str	r1, [sp, #36]	@ 0x24
 8005be0:	e7da      	b.n	8005b98 <_dtoa_r+0x230>
 8005be2:	2201      	movs	r2, #1
 8005be4:	9208      	str	r2, [sp, #32]
 8005be6:	e7f5      	b.n	8005bd4 <_dtoa_r+0x26c>
 8005be8:	f04f 0b01 	mov.w	fp, #1
 8005bec:	46da      	mov	sl, fp
 8005bee:	465a      	mov	r2, fp
 8005bf0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8005bf4:	e7d0      	b.n	8005b98 <_dtoa_r+0x230>
 8005bf6:	3101      	adds	r1, #1
 8005bf8:	0040      	lsls	r0, r0, #1
 8005bfa:	e7d1      	b.n	8005ba0 <_dtoa_r+0x238>
 8005bfc:	f3af 8000 	nop.w
 8005c00:	636f4361 	.word	0x636f4361
 8005c04:	3fd287a7 	.word	0x3fd287a7
 8005c08:	8b60c8b3 	.word	0x8b60c8b3
 8005c0c:	3fc68a28 	.word	0x3fc68a28
 8005c10:	509f79fb 	.word	0x509f79fb
 8005c14:	3fd34413 	.word	0x3fd34413
 8005c18:	08007899 	.word	0x08007899
 8005c1c:	080078b0 	.word	0x080078b0
 8005c20:	7ff00000 	.word	0x7ff00000
 8005c24:	08007895 	.word	0x08007895
 8005c28:	08007869 	.word	0x08007869
 8005c2c:	08007868 	.word	0x08007868
 8005c30:	08007a00 	.word	0x08007a00
 8005c34:	08007908 	.word	0x08007908
 8005c38:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8005c3c:	f1ba 0f0e 	cmp.w	sl, #14
 8005c40:	6010      	str	r0, [r2, #0]
 8005c42:	d86e      	bhi.n	8005d22 <_dtoa_r+0x3ba>
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d06c      	beq.n	8005d22 <_dtoa_r+0x3ba>
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	f340 80b4 	ble.w	8005db8 <_dtoa_r+0x450>
 8005c50:	4ac8      	ldr	r2, [pc, #800]	@ (8005f74 <_dtoa_r+0x60c>)
 8005c52:	f008 010f 	and.w	r1, r8, #15
 8005c56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8005c5a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8005c5e:	ed92 7b00 	vldr	d7, [r2]
 8005c62:	ea4f 1128 	mov.w	r1, r8, asr #4
 8005c66:	f000 809b 	beq.w	8005da0 <_dtoa_r+0x438>
 8005c6a:	4ac3      	ldr	r2, [pc, #780]	@ (8005f78 <_dtoa_r+0x610>)
 8005c6c:	ed92 6b08 	vldr	d6, [r2, #32]
 8005c70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8005c74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8005c78:	f001 010f 	and.w	r1, r1, #15
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	48be      	ldr	r0, [pc, #760]	@ (8005f78 <_dtoa_r+0x610>)
 8005c80:	2900      	cmp	r1, #0
 8005c82:	f040 808f 	bne.w	8005da4 <_dtoa_r+0x43c>
 8005c86:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005c8a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005c8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005c94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	f000 80b3 	beq.w	8005e04 <_dtoa_r+0x49c>
 8005c9e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8005ca2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005caa:	f140 80ab 	bpl.w	8005e04 <_dtoa_r+0x49c>
 8005cae:	f1ba 0f00 	cmp.w	sl, #0
 8005cb2:	f000 80a7 	beq.w	8005e04 <_dtoa_r+0x49c>
 8005cb6:	f1bb 0f00 	cmp.w	fp, #0
 8005cba:	dd30      	ble.n	8005d1e <_dtoa_r+0x3b6>
 8005cbc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8005cc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005cc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cc8:	f108 31ff 	add.w	r1, r8, #4294967295
 8005ccc:	9105      	str	r1, [sp, #20]
 8005cce:	3201      	adds	r2, #1
 8005cd0:	465c      	mov	r4, fp
 8005cd2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005cd6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8005cda:	ee07 2a90 	vmov	s15, r2
 8005cde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005ce2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8005ce6:	ee15 2a90 	vmov	r2, s11
 8005cea:	ec51 0b15 	vmov	r0, r1, d5
 8005cee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8005cf2:	2c00      	cmp	r4, #0
 8005cf4:	f040 808a 	bne.w	8005e0c <_dtoa_r+0x4a4>
 8005cf8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005cfc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005d00:	ec41 0b17 	vmov	d7, r0, r1
 8005d04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0c:	f300 826a 	bgt.w	80061e4 <_dtoa_r+0x87c>
 8005d10:	eeb1 7b47 	vneg.f64	d7, d7
 8005d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1c:	d423      	bmi.n	8005d66 <_dtoa_r+0x3fe>
 8005d1e:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005d22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	f2c0 8129 	blt.w	8005f7c <_dtoa_r+0x614>
 8005d2a:	f1b8 0f0e 	cmp.w	r8, #14
 8005d2e:	f300 8125 	bgt.w	8005f7c <_dtoa_r+0x614>
 8005d32:	4b90      	ldr	r3, [pc, #576]	@ (8005f74 <_dtoa_r+0x60c>)
 8005d34:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d38:	ed93 6b00 	vldr	d6, [r3]
 8005d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f280 80c8 	bge.w	8005ed4 <_dtoa_r+0x56c>
 8005d44:	f1ba 0f00 	cmp.w	sl, #0
 8005d48:	f300 80c4 	bgt.w	8005ed4 <_dtoa_r+0x56c>
 8005d4c:	d10b      	bne.n	8005d66 <_dtoa_r+0x3fe>
 8005d4e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8005d52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d5a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	f2c0 823c 	blt.w	80061de <_dtoa_r+0x876>
 8005d66:	2400      	movs	r4, #0
 8005d68:	4625      	mov	r5, r4
 8005d6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	9305      	str	r3, [sp, #20]
 8005d70:	463e      	mov	r6, r7
 8005d72:	f04f 0800 	mov.w	r8, #0
 8005d76:	4621      	mov	r1, r4
 8005d78:	4648      	mov	r0, r9
 8005d7a:	f000 fc93 	bl	80066a4 <_Bfree>
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	f000 80a2 	beq.w	8005ec8 <_dtoa_r+0x560>
 8005d84:	f1b8 0f00 	cmp.w	r8, #0
 8005d88:	d005      	beq.n	8005d96 <_dtoa_r+0x42e>
 8005d8a:	45a8      	cmp	r8, r5
 8005d8c:	d003      	beq.n	8005d96 <_dtoa_r+0x42e>
 8005d8e:	4641      	mov	r1, r8
 8005d90:	4648      	mov	r0, r9
 8005d92:	f000 fc87 	bl	80066a4 <_Bfree>
 8005d96:	4629      	mov	r1, r5
 8005d98:	4648      	mov	r0, r9
 8005d9a:	f000 fc83 	bl	80066a4 <_Bfree>
 8005d9e:	e093      	b.n	8005ec8 <_dtoa_r+0x560>
 8005da0:	2202      	movs	r2, #2
 8005da2:	e76c      	b.n	8005c7e <_dtoa_r+0x316>
 8005da4:	07cc      	lsls	r4, r1, #31
 8005da6:	d504      	bpl.n	8005db2 <_dtoa_r+0x44a>
 8005da8:	ed90 6b00 	vldr	d6, [r0]
 8005dac:	3201      	adds	r2, #1
 8005dae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005db2:	1049      	asrs	r1, r1, #1
 8005db4:	3008      	adds	r0, #8
 8005db6:	e763      	b.n	8005c80 <_dtoa_r+0x318>
 8005db8:	d022      	beq.n	8005e00 <_dtoa_r+0x498>
 8005dba:	f1c8 0100 	rsb	r1, r8, #0
 8005dbe:	4a6d      	ldr	r2, [pc, #436]	@ (8005f74 <_dtoa_r+0x60c>)
 8005dc0:	f001 000f 	and.w	r0, r1, #15
 8005dc4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8005dc8:	ed92 7b00 	vldr	d7, [r2]
 8005dcc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005dd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005dd4:	4868      	ldr	r0, [pc, #416]	@ (8005f78 <_dtoa_r+0x610>)
 8005dd6:	1109      	asrs	r1, r1, #4
 8005dd8:	2400      	movs	r4, #0
 8005dda:	2202      	movs	r2, #2
 8005ddc:	b929      	cbnz	r1, 8005dea <_dtoa_r+0x482>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	f43f af57 	beq.w	8005c92 <_dtoa_r+0x32a>
 8005de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005de8:	e753      	b.n	8005c92 <_dtoa_r+0x32a>
 8005dea:	07ce      	lsls	r6, r1, #31
 8005dec:	d505      	bpl.n	8005dfa <_dtoa_r+0x492>
 8005dee:	ed90 6b00 	vldr	d6, [r0]
 8005df2:	3201      	adds	r2, #1
 8005df4:	2401      	movs	r4, #1
 8005df6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005dfa:	1049      	asrs	r1, r1, #1
 8005dfc:	3008      	adds	r0, #8
 8005dfe:	e7ed      	b.n	8005ddc <_dtoa_r+0x474>
 8005e00:	2202      	movs	r2, #2
 8005e02:	e746      	b.n	8005c92 <_dtoa_r+0x32a>
 8005e04:	f8cd 8014 	str.w	r8, [sp, #20]
 8005e08:	4654      	mov	r4, sl
 8005e0a:	e762      	b.n	8005cd2 <_dtoa_r+0x36a>
 8005e0c:	4a59      	ldr	r2, [pc, #356]	@ (8005f74 <_dtoa_r+0x60c>)
 8005e0e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8005e12:	ed12 4b02 	vldr	d4, [r2, #-8]
 8005e16:	9a08      	ldr	r2, [sp, #32]
 8005e18:	ec41 0b17 	vmov	d7, r0, r1
 8005e1c:	443c      	add	r4, r7
 8005e1e:	b34a      	cbz	r2, 8005e74 <_dtoa_r+0x50c>
 8005e20:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8005e24:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8005e28:	463e      	mov	r6, r7
 8005e2a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005e2e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005e32:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e36:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e3a:	ee14 2a90 	vmov	r2, s9
 8005e3e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e42:	3230      	adds	r2, #48	@ 0x30
 8005e44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	f806 2b01 	strb.w	r2, [r6], #1
 8005e54:	d438      	bmi.n	8005ec8 <_dtoa_r+0x560>
 8005e56:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005e5a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d46e      	bmi.n	8005f42 <_dtoa_r+0x5da>
 8005e64:	42a6      	cmp	r6, r4
 8005e66:	f43f af5a 	beq.w	8005d1e <_dtoa_r+0x3b6>
 8005e6a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8005e6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005e72:	e7e0      	b.n	8005e36 <_dtoa_r+0x4ce>
 8005e74:	4621      	mov	r1, r4
 8005e76:	463e      	mov	r6, r7
 8005e78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005e7c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8005e80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005e84:	ee14 2a90 	vmov	r2, s9
 8005e88:	3230      	adds	r2, #48	@ 0x30
 8005e8a:	f806 2b01 	strb.w	r2, [r6], #1
 8005e8e:	42a6      	cmp	r6, r4
 8005e90:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005e94:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005e98:	d119      	bne.n	8005ece <_dtoa_r+0x566>
 8005e9a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8005e9e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005ea2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eaa:	dc4a      	bgt.n	8005f42 <_dtoa_r+0x5da>
 8005eac:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005eb0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb8:	f57f af31 	bpl.w	8005d1e <_dtoa_r+0x3b6>
 8005ebc:	460e      	mov	r6, r1
 8005ebe:	3901      	subs	r1, #1
 8005ec0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ec4:	2b30      	cmp	r3, #48	@ 0x30
 8005ec6:	d0f9      	beq.n	8005ebc <_dtoa_r+0x554>
 8005ec8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8005ecc:	e027      	b.n	8005f1e <_dtoa_r+0x5b6>
 8005ece:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005ed2:	e7d5      	b.n	8005e80 <_dtoa_r+0x518>
 8005ed4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ed8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8005edc:	463e      	mov	r6, r7
 8005ede:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005ee2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8005ee6:	ee15 3a10 	vmov	r3, s10
 8005eea:	3330      	adds	r3, #48	@ 0x30
 8005eec:	f806 3b01 	strb.w	r3, [r6], #1
 8005ef0:	1bf3      	subs	r3, r6, r7
 8005ef2:	459a      	cmp	sl, r3
 8005ef4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005ef8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005efc:	d132      	bne.n	8005f64 <_dtoa_r+0x5fc>
 8005efe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f0a:	dc18      	bgt.n	8005f3e <_dtoa_r+0x5d6>
 8005f0c:	eeb4 7b46 	vcmp.f64	d7, d6
 8005f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f14:	d103      	bne.n	8005f1e <_dtoa_r+0x5b6>
 8005f16:	ee15 3a10 	vmov	r3, s10
 8005f1a:	07db      	lsls	r3, r3, #31
 8005f1c:	d40f      	bmi.n	8005f3e <_dtoa_r+0x5d6>
 8005f1e:	9901      	ldr	r1, [sp, #4]
 8005f20:	4648      	mov	r0, r9
 8005f22:	f000 fbbf 	bl	80066a4 <_Bfree>
 8005f26:	2300      	movs	r3, #0
 8005f28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005f2a:	7033      	strb	r3, [r6, #0]
 8005f2c:	f108 0301 	add.w	r3, r8, #1
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 824b 	beq.w	80063d0 <_dtoa_r+0xa68>
 8005f3a:	601e      	str	r6, [r3, #0]
 8005f3c:	e248      	b.n	80063d0 <_dtoa_r+0xa68>
 8005f3e:	f8cd 8014 	str.w	r8, [sp, #20]
 8005f42:	4633      	mov	r3, r6
 8005f44:	461e      	mov	r6, r3
 8005f46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f4a:	2a39      	cmp	r2, #57	@ 0x39
 8005f4c:	d106      	bne.n	8005f5c <_dtoa_r+0x5f4>
 8005f4e:	429f      	cmp	r7, r3
 8005f50:	d1f8      	bne.n	8005f44 <_dtoa_r+0x5dc>
 8005f52:	9a05      	ldr	r2, [sp, #20]
 8005f54:	3201      	adds	r2, #1
 8005f56:	9205      	str	r2, [sp, #20]
 8005f58:	2230      	movs	r2, #48	@ 0x30
 8005f5a:	703a      	strb	r2, [r7, #0]
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	3201      	adds	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	e7b1      	b.n	8005ec8 <_dtoa_r+0x560>
 8005f64:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005f68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	d1b5      	bne.n	8005ede <_dtoa_r+0x576>
 8005f72:	e7d4      	b.n	8005f1e <_dtoa_r+0x5b6>
 8005f74:	08007a00 	.word	0x08007a00
 8005f78:	080079d8 	.word	0x080079d8
 8005f7c:	9908      	ldr	r1, [sp, #32]
 8005f7e:	2900      	cmp	r1, #0
 8005f80:	f000 80e9 	beq.w	8006156 <_dtoa_r+0x7ee>
 8005f84:	9907      	ldr	r1, [sp, #28]
 8005f86:	2901      	cmp	r1, #1
 8005f88:	f300 80cb 	bgt.w	8006122 <_dtoa_r+0x7ba>
 8005f8c:	2d00      	cmp	r5, #0
 8005f8e:	f000 80c4 	beq.w	800611a <_dtoa_r+0x7b2>
 8005f92:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005f96:	9e04      	ldr	r6, [sp, #16]
 8005f98:	461c      	mov	r4, r3
 8005f9a:	9305      	str	r3, [sp, #20]
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	9b06      	ldr	r3, [sp, #24]
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	4648      	mov	r0, r9
 8005faa:	9306      	str	r3, [sp, #24]
 8005fac:	f000 fc2e 	bl	800680c <__i2b>
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	b166      	cbz	r6, 8005fd0 <_dtoa_r+0x668>
 8005fb6:	9a06      	ldr	r2, [sp, #24]
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	dd09      	ble.n	8005fd0 <_dtoa_r+0x668>
 8005fbc:	42b2      	cmp	r2, r6
 8005fbe:	9904      	ldr	r1, [sp, #16]
 8005fc0:	bfa8      	it	ge
 8005fc2:	4632      	movge	r2, r6
 8005fc4:	1a89      	subs	r1, r1, r2
 8005fc6:	9104      	str	r1, [sp, #16]
 8005fc8:	9906      	ldr	r1, [sp, #24]
 8005fca:	1ab6      	subs	r6, r6, r2
 8005fcc:	1a8a      	subs	r2, r1, r2
 8005fce:	9206      	str	r2, [sp, #24]
 8005fd0:	b30b      	cbz	r3, 8006016 <_dtoa_r+0x6ae>
 8005fd2:	9a08      	ldr	r2, [sp, #32]
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	f000 80c5 	beq.w	8006164 <_dtoa_r+0x7fc>
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	f000 80bf 	beq.w	800615e <_dtoa_r+0x7f6>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fe8:	f000 fcc8 	bl	800697c <__pow5mult>
 8005fec:	9a01      	ldr	r2, [sp, #4]
 8005fee:	4601      	mov	r1, r0
 8005ff0:	4605      	mov	r5, r0
 8005ff2:	4648      	mov	r0, r9
 8005ff4:	f000 fc20 	bl	8006838 <__multiply>
 8005ff8:	9901      	ldr	r1, [sp, #4]
 8005ffa:	9005      	str	r0, [sp, #20]
 8005ffc:	4648      	mov	r0, r9
 8005ffe:	f000 fb51 	bl	80066a4 <_Bfree>
 8006002:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006004:	1b1b      	subs	r3, r3, r4
 8006006:	f000 80b0 	beq.w	800616a <_dtoa_r+0x802>
 800600a:	9905      	ldr	r1, [sp, #20]
 800600c:	461a      	mov	r2, r3
 800600e:	4648      	mov	r0, r9
 8006010:	f000 fcb4 	bl	800697c <__pow5mult>
 8006014:	9001      	str	r0, [sp, #4]
 8006016:	2101      	movs	r1, #1
 8006018:	4648      	mov	r0, r9
 800601a:	f000 fbf7 	bl	800680c <__i2b>
 800601e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006020:	4604      	mov	r4, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 81da 	beq.w	80063dc <_dtoa_r+0xa74>
 8006028:	461a      	mov	r2, r3
 800602a:	4601      	mov	r1, r0
 800602c:	4648      	mov	r0, r9
 800602e:	f000 fca5 	bl	800697c <__pow5mult>
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	2b01      	cmp	r3, #1
 8006036:	4604      	mov	r4, r0
 8006038:	f300 80a0 	bgt.w	800617c <_dtoa_r+0x814>
 800603c:	9b02      	ldr	r3, [sp, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f040 8096 	bne.w	8006170 <_dtoa_r+0x808>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800604a:	2a00      	cmp	r2, #0
 800604c:	f040 8092 	bne.w	8006174 <_dtoa_r+0x80c>
 8006050:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006054:	0d12      	lsrs	r2, r2, #20
 8006056:	0512      	lsls	r2, r2, #20
 8006058:	2a00      	cmp	r2, #0
 800605a:	f000 808d 	beq.w	8006178 <_dtoa_r+0x810>
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	3301      	adds	r3, #1
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	9b06      	ldr	r3, [sp, #24]
 8006066:	3301      	adds	r3, #1
 8006068:	9306      	str	r3, [sp, #24]
 800606a:	2301      	movs	r3, #1
 800606c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800606e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 81b9 	beq.w	80063e8 <_dtoa_r+0xa80>
 8006076:	6922      	ldr	r2, [r4, #16]
 8006078:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800607c:	6910      	ldr	r0, [r2, #16]
 800607e:	f000 fb79 	bl	8006774 <__hi0bits>
 8006082:	f1c0 0020 	rsb	r0, r0, #32
 8006086:	9b06      	ldr	r3, [sp, #24]
 8006088:	4418      	add	r0, r3
 800608a:	f010 001f 	ands.w	r0, r0, #31
 800608e:	f000 8081 	beq.w	8006194 <_dtoa_r+0x82c>
 8006092:	f1c0 0220 	rsb	r2, r0, #32
 8006096:	2a04      	cmp	r2, #4
 8006098:	dd73      	ble.n	8006182 <_dtoa_r+0x81a>
 800609a:	9b04      	ldr	r3, [sp, #16]
 800609c:	f1c0 001c 	rsb	r0, r0, #28
 80060a0:	4403      	add	r3, r0
 80060a2:	9304      	str	r3, [sp, #16]
 80060a4:	9b06      	ldr	r3, [sp, #24]
 80060a6:	4406      	add	r6, r0
 80060a8:	4403      	add	r3, r0
 80060aa:	9306      	str	r3, [sp, #24]
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd05      	ble.n	80060be <_dtoa_r+0x756>
 80060b2:	9901      	ldr	r1, [sp, #4]
 80060b4:	461a      	mov	r2, r3
 80060b6:	4648      	mov	r0, r9
 80060b8:	f000 fcba 	bl	8006a30 <__lshift>
 80060bc:	9001      	str	r0, [sp, #4]
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dd05      	ble.n	80060d0 <_dtoa_r+0x768>
 80060c4:	4621      	mov	r1, r4
 80060c6:	461a      	mov	r2, r3
 80060c8:	4648      	mov	r0, r9
 80060ca:	f000 fcb1 	bl	8006a30 <__lshift>
 80060ce:	4604      	mov	r4, r0
 80060d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d060      	beq.n	8006198 <_dtoa_r+0x830>
 80060d6:	9801      	ldr	r0, [sp, #4]
 80060d8:	4621      	mov	r1, r4
 80060da:	f000 fd15 	bl	8006b08 <__mcmp>
 80060de:	2800      	cmp	r0, #0
 80060e0:	da5a      	bge.n	8006198 <_dtoa_r+0x830>
 80060e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80060e6:	9305      	str	r3, [sp, #20]
 80060e8:	9901      	ldr	r1, [sp, #4]
 80060ea:	2300      	movs	r3, #0
 80060ec:	220a      	movs	r2, #10
 80060ee:	4648      	mov	r0, r9
 80060f0:	f000 fafa 	bl	80066e8 <__multadd>
 80060f4:	9b08      	ldr	r3, [sp, #32]
 80060f6:	9001      	str	r0, [sp, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8177 	beq.w	80063ec <_dtoa_r+0xa84>
 80060fe:	4629      	mov	r1, r5
 8006100:	2300      	movs	r3, #0
 8006102:	220a      	movs	r2, #10
 8006104:	4648      	mov	r0, r9
 8006106:	f000 faef 	bl	80066e8 <__multadd>
 800610a:	f1bb 0f00 	cmp.w	fp, #0
 800610e:	4605      	mov	r5, r0
 8006110:	dc6e      	bgt.n	80061f0 <_dtoa_r+0x888>
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	2b02      	cmp	r3, #2
 8006116:	dc48      	bgt.n	80061aa <_dtoa_r+0x842>
 8006118:	e06a      	b.n	80061f0 <_dtoa_r+0x888>
 800611a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800611c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006120:	e739      	b.n	8005f96 <_dtoa_r+0x62e>
 8006122:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006126:	42a3      	cmp	r3, r4
 8006128:	db07      	blt.n	800613a <_dtoa_r+0x7d2>
 800612a:	f1ba 0f00 	cmp.w	sl, #0
 800612e:	eba3 0404 	sub.w	r4, r3, r4
 8006132:	db0b      	blt.n	800614c <_dtoa_r+0x7e4>
 8006134:	9e04      	ldr	r6, [sp, #16]
 8006136:	4652      	mov	r2, sl
 8006138:	e72f      	b.n	8005f9a <_dtoa_r+0x632>
 800613a:	1ae2      	subs	r2, r4, r3
 800613c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800613e:	9e04      	ldr	r6, [sp, #16]
 8006140:	4413      	add	r3, r2
 8006142:	930a      	str	r3, [sp, #40]	@ 0x28
 8006144:	4652      	mov	r2, sl
 8006146:	4623      	mov	r3, r4
 8006148:	2400      	movs	r4, #0
 800614a:	e726      	b.n	8005f9a <_dtoa_r+0x632>
 800614c:	9a04      	ldr	r2, [sp, #16]
 800614e:	eba2 060a 	sub.w	r6, r2, sl
 8006152:	2200      	movs	r2, #0
 8006154:	e721      	b.n	8005f9a <_dtoa_r+0x632>
 8006156:	9e04      	ldr	r6, [sp, #16]
 8006158:	9d08      	ldr	r5, [sp, #32]
 800615a:	461c      	mov	r4, r3
 800615c:	e72a      	b.n	8005fb4 <_dtoa_r+0x64c>
 800615e:	9a01      	ldr	r2, [sp, #4]
 8006160:	9205      	str	r2, [sp, #20]
 8006162:	e752      	b.n	800600a <_dtoa_r+0x6a2>
 8006164:	9901      	ldr	r1, [sp, #4]
 8006166:	461a      	mov	r2, r3
 8006168:	e751      	b.n	800600e <_dtoa_r+0x6a6>
 800616a:	9b05      	ldr	r3, [sp, #20]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	e752      	b.n	8006016 <_dtoa_r+0x6ae>
 8006170:	2300      	movs	r3, #0
 8006172:	e77b      	b.n	800606c <_dtoa_r+0x704>
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	e779      	b.n	800606c <_dtoa_r+0x704>
 8006178:	920b      	str	r2, [sp, #44]	@ 0x2c
 800617a:	e778      	b.n	800606e <_dtoa_r+0x706>
 800617c:	2300      	movs	r3, #0
 800617e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006180:	e779      	b.n	8006076 <_dtoa_r+0x70e>
 8006182:	d093      	beq.n	80060ac <_dtoa_r+0x744>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	321c      	adds	r2, #28
 8006188:	4413      	add	r3, r2
 800618a:	9304      	str	r3, [sp, #16]
 800618c:	9b06      	ldr	r3, [sp, #24]
 800618e:	4416      	add	r6, r2
 8006190:	4413      	add	r3, r2
 8006192:	e78a      	b.n	80060aa <_dtoa_r+0x742>
 8006194:	4602      	mov	r2, r0
 8006196:	e7f5      	b.n	8006184 <_dtoa_r+0x81c>
 8006198:	f1ba 0f00 	cmp.w	sl, #0
 800619c:	f8cd 8014 	str.w	r8, [sp, #20]
 80061a0:	46d3      	mov	fp, sl
 80061a2:	dc21      	bgt.n	80061e8 <_dtoa_r+0x880>
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	dd1e      	ble.n	80061e8 <_dtoa_r+0x880>
 80061aa:	f1bb 0f00 	cmp.w	fp, #0
 80061ae:	f47f addc 	bne.w	8005d6a <_dtoa_r+0x402>
 80061b2:	4621      	mov	r1, r4
 80061b4:	465b      	mov	r3, fp
 80061b6:	2205      	movs	r2, #5
 80061b8:	4648      	mov	r0, r9
 80061ba:	f000 fa95 	bl	80066e8 <__multadd>
 80061be:	4601      	mov	r1, r0
 80061c0:	4604      	mov	r4, r0
 80061c2:	9801      	ldr	r0, [sp, #4]
 80061c4:	f000 fca0 	bl	8006b08 <__mcmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	f77f adce 	ble.w	8005d6a <_dtoa_r+0x402>
 80061ce:	463e      	mov	r6, r7
 80061d0:	2331      	movs	r3, #49	@ 0x31
 80061d2:	f806 3b01 	strb.w	r3, [r6], #1
 80061d6:	9b05      	ldr	r3, [sp, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	9305      	str	r3, [sp, #20]
 80061dc:	e5c9      	b.n	8005d72 <_dtoa_r+0x40a>
 80061de:	f8cd 8014 	str.w	r8, [sp, #20]
 80061e2:	4654      	mov	r4, sl
 80061e4:	4625      	mov	r5, r4
 80061e6:	e7f2      	b.n	80061ce <_dtoa_r+0x866>
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8102 	beq.w	80063f4 <_dtoa_r+0xa8c>
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	dd05      	ble.n	8006200 <_dtoa_r+0x898>
 80061f4:	4629      	mov	r1, r5
 80061f6:	4632      	mov	r2, r6
 80061f8:	4648      	mov	r0, r9
 80061fa:	f000 fc19 	bl	8006a30 <__lshift>
 80061fe:	4605      	mov	r5, r0
 8006200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d058      	beq.n	80062b8 <_dtoa_r+0x950>
 8006206:	6869      	ldr	r1, [r5, #4]
 8006208:	4648      	mov	r0, r9
 800620a:	f000 fa0b 	bl	8006624 <_Balloc>
 800620e:	4606      	mov	r6, r0
 8006210:	b928      	cbnz	r0, 800621e <_dtoa_r+0x8b6>
 8006212:	4b82      	ldr	r3, [pc, #520]	@ (800641c <_dtoa_r+0xab4>)
 8006214:	4602      	mov	r2, r0
 8006216:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800621a:	f7ff bbbe 	b.w	800599a <_dtoa_r+0x32>
 800621e:	692a      	ldr	r2, [r5, #16]
 8006220:	3202      	adds	r2, #2
 8006222:	0092      	lsls	r2, r2, #2
 8006224:	f105 010c 	add.w	r1, r5, #12
 8006228:	300c      	adds	r0, #12
 800622a:	f000 ffa3 	bl	8007174 <memcpy>
 800622e:	2201      	movs	r2, #1
 8006230:	4631      	mov	r1, r6
 8006232:	4648      	mov	r0, r9
 8006234:	f000 fbfc 	bl	8006a30 <__lshift>
 8006238:	1c7b      	adds	r3, r7, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	eb07 030b 	add.w	r3, r7, fp
 8006240:	9309      	str	r3, [sp, #36]	@ 0x24
 8006242:	9b02      	ldr	r3, [sp, #8]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	46a8      	mov	r8, r5
 800624a:	9308      	str	r3, [sp, #32]
 800624c:	4605      	mov	r5, r0
 800624e:	9b04      	ldr	r3, [sp, #16]
 8006250:	9801      	ldr	r0, [sp, #4]
 8006252:	4621      	mov	r1, r4
 8006254:	f103 3bff 	add.w	fp, r3, #4294967295
 8006258:	f7ff fafb 	bl	8005852 <quorem>
 800625c:	4641      	mov	r1, r8
 800625e:	9002      	str	r0, [sp, #8]
 8006260:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006264:	9801      	ldr	r0, [sp, #4]
 8006266:	f000 fc4f 	bl	8006b08 <__mcmp>
 800626a:	462a      	mov	r2, r5
 800626c:	9006      	str	r0, [sp, #24]
 800626e:	4621      	mov	r1, r4
 8006270:	4648      	mov	r0, r9
 8006272:	f000 fc65 	bl	8006b40 <__mdiff>
 8006276:	68c2      	ldr	r2, [r0, #12]
 8006278:	4606      	mov	r6, r0
 800627a:	b9fa      	cbnz	r2, 80062bc <_dtoa_r+0x954>
 800627c:	4601      	mov	r1, r0
 800627e:	9801      	ldr	r0, [sp, #4]
 8006280:	f000 fc42 	bl	8006b08 <__mcmp>
 8006284:	4602      	mov	r2, r0
 8006286:	4631      	mov	r1, r6
 8006288:	4648      	mov	r0, r9
 800628a:	920a      	str	r2, [sp, #40]	@ 0x28
 800628c:	f000 fa0a 	bl	80066a4 <_Bfree>
 8006290:	9b07      	ldr	r3, [sp, #28]
 8006292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006294:	9e04      	ldr	r6, [sp, #16]
 8006296:	ea42 0103 	orr.w	r1, r2, r3
 800629a:	9b08      	ldr	r3, [sp, #32]
 800629c:	4319      	orrs	r1, r3
 800629e:	d10f      	bne.n	80062c0 <_dtoa_r+0x958>
 80062a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80062a4:	d028      	beq.n	80062f8 <_dtoa_r+0x990>
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dd02      	ble.n	80062b2 <_dtoa_r+0x94a>
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80062b2:	f88b a000 	strb.w	sl, [fp]
 80062b6:	e55e      	b.n	8005d76 <_dtoa_r+0x40e>
 80062b8:	4628      	mov	r0, r5
 80062ba:	e7bd      	b.n	8006238 <_dtoa_r+0x8d0>
 80062bc:	2201      	movs	r2, #1
 80062be:	e7e2      	b.n	8006286 <_dtoa_r+0x91e>
 80062c0:	9b06      	ldr	r3, [sp, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	db04      	blt.n	80062d0 <_dtoa_r+0x968>
 80062c6:	9907      	ldr	r1, [sp, #28]
 80062c8:	430b      	orrs	r3, r1
 80062ca:	9908      	ldr	r1, [sp, #32]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	d120      	bne.n	8006312 <_dtoa_r+0x9aa>
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	ddee      	ble.n	80062b2 <_dtoa_r+0x94a>
 80062d4:	9901      	ldr	r1, [sp, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	4648      	mov	r0, r9
 80062da:	f000 fba9 	bl	8006a30 <__lshift>
 80062de:	4621      	mov	r1, r4
 80062e0:	9001      	str	r0, [sp, #4]
 80062e2:	f000 fc11 	bl	8006b08 <__mcmp>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	dc03      	bgt.n	80062f2 <_dtoa_r+0x98a>
 80062ea:	d1e2      	bne.n	80062b2 <_dtoa_r+0x94a>
 80062ec:	f01a 0f01 	tst.w	sl, #1
 80062f0:	d0df      	beq.n	80062b2 <_dtoa_r+0x94a>
 80062f2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80062f6:	d1d9      	bne.n	80062ac <_dtoa_r+0x944>
 80062f8:	2339      	movs	r3, #57	@ 0x39
 80062fa:	f88b 3000 	strb.w	r3, [fp]
 80062fe:	4633      	mov	r3, r6
 8006300:	461e      	mov	r6, r3
 8006302:	3b01      	subs	r3, #1
 8006304:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006308:	2a39      	cmp	r2, #57	@ 0x39
 800630a:	d052      	beq.n	80063b2 <_dtoa_r+0xa4a>
 800630c:	3201      	adds	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e531      	b.n	8005d76 <_dtoa_r+0x40e>
 8006312:	2a00      	cmp	r2, #0
 8006314:	dd07      	ble.n	8006326 <_dtoa_r+0x9be>
 8006316:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800631a:	d0ed      	beq.n	80062f8 <_dtoa_r+0x990>
 800631c:	f10a 0301 	add.w	r3, sl, #1
 8006320:	f88b 3000 	strb.w	r3, [fp]
 8006324:	e527      	b.n	8005d76 <_dtoa_r+0x40e>
 8006326:	9b04      	ldr	r3, [sp, #16]
 8006328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800632a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800632e:	4293      	cmp	r3, r2
 8006330:	d029      	beq.n	8006386 <_dtoa_r+0xa1e>
 8006332:	9901      	ldr	r1, [sp, #4]
 8006334:	2300      	movs	r3, #0
 8006336:	220a      	movs	r2, #10
 8006338:	4648      	mov	r0, r9
 800633a:	f000 f9d5 	bl	80066e8 <__multadd>
 800633e:	45a8      	cmp	r8, r5
 8006340:	9001      	str	r0, [sp, #4]
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	f04f 020a 	mov.w	r2, #10
 800634a:	4641      	mov	r1, r8
 800634c:	4648      	mov	r0, r9
 800634e:	d107      	bne.n	8006360 <_dtoa_r+0x9f8>
 8006350:	f000 f9ca 	bl	80066e8 <__multadd>
 8006354:	4680      	mov	r8, r0
 8006356:	4605      	mov	r5, r0
 8006358:	9b04      	ldr	r3, [sp, #16]
 800635a:	3301      	adds	r3, #1
 800635c:	9304      	str	r3, [sp, #16]
 800635e:	e776      	b.n	800624e <_dtoa_r+0x8e6>
 8006360:	f000 f9c2 	bl	80066e8 <__multadd>
 8006364:	4629      	mov	r1, r5
 8006366:	4680      	mov	r8, r0
 8006368:	2300      	movs	r3, #0
 800636a:	220a      	movs	r2, #10
 800636c:	4648      	mov	r0, r9
 800636e:	f000 f9bb 	bl	80066e8 <__multadd>
 8006372:	4605      	mov	r5, r0
 8006374:	e7f0      	b.n	8006358 <_dtoa_r+0x9f0>
 8006376:	f1bb 0f00 	cmp.w	fp, #0
 800637a:	bfcc      	ite	gt
 800637c:	465e      	movgt	r6, fp
 800637e:	2601      	movle	r6, #1
 8006380:	443e      	add	r6, r7
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	9901      	ldr	r1, [sp, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	4648      	mov	r0, r9
 800638c:	f000 fb50 	bl	8006a30 <__lshift>
 8006390:	4621      	mov	r1, r4
 8006392:	9001      	str	r0, [sp, #4]
 8006394:	f000 fbb8 	bl	8006b08 <__mcmp>
 8006398:	2800      	cmp	r0, #0
 800639a:	dcb0      	bgt.n	80062fe <_dtoa_r+0x996>
 800639c:	d102      	bne.n	80063a4 <_dtoa_r+0xa3c>
 800639e:	f01a 0f01 	tst.w	sl, #1
 80063a2:	d1ac      	bne.n	80062fe <_dtoa_r+0x996>
 80063a4:	4633      	mov	r3, r6
 80063a6:	461e      	mov	r6, r3
 80063a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063ac:	2a30      	cmp	r2, #48	@ 0x30
 80063ae:	d0fa      	beq.n	80063a6 <_dtoa_r+0xa3e>
 80063b0:	e4e1      	b.n	8005d76 <_dtoa_r+0x40e>
 80063b2:	429f      	cmp	r7, r3
 80063b4:	d1a4      	bne.n	8006300 <_dtoa_r+0x998>
 80063b6:	9b05      	ldr	r3, [sp, #20]
 80063b8:	3301      	adds	r3, #1
 80063ba:	9305      	str	r3, [sp, #20]
 80063bc:	2331      	movs	r3, #49	@ 0x31
 80063be:	703b      	strb	r3, [r7, #0]
 80063c0:	e4d9      	b.n	8005d76 <_dtoa_r+0x40e>
 80063c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80063c4:	4f16      	ldr	r7, [pc, #88]	@ (8006420 <_dtoa_r+0xab8>)
 80063c6:	b11b      	cbz	r3, 80063d0 <_dtoa_r+0xa68>
 80063c8:	f107 0308 	add.w	r3, r7, #8
 80063cc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	4638      	mov	r0, r7
 80063d2:	b011      	add	sp, #68	@ 0x44
 80063d4:	ecbd 8b02 	vpop	{d8}
 80063d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063dc:	9b07      	ldr	r3, [sp, #28]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	f77f ae2c 	ble.w	800603c <_dtoa_r+0x6d4>
 80063e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e8:	2001      	movs	r0, #1
 80063ea:	e64c      	b.n	8006086 <_dtoa_r+0x71e>
 80063ec:	f1bb 0f00 	cmp.w	fp, #0
 80063f0:	f77f aed8 	ble.w	80061a4 <_dtoa_r+0x83c>
 80063f4:	463e      	mov	r6, r7
 80063f6:	9801      	ldr	r0, [sp, #4]
 80063f8:	4621      	mov	r1, r4
 80063fa:	f7ff fa2a 	bl	8005852 <quorem>
 80063fe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006402:	f806 ab01 	strb.w	sl, [r6], #1
 8006406:	1bf2      	subs	r2, r6, r7
 8006408:	4593      	cmp	fp, r2
 800640a:	ddb4      	ble.n	8006376 <_dtoa_r+0xa0e>
 800640c:	9901      	ldr	r1, [sp, #4]
 800640e:	2300      	movs	r3, #0
 8006410:	220a      	movs	r2, #10
 8006412:	4648      	mov	r0, r9
 8006414:	f000 f968 	bl	80066e8 <__multadd>
 8006418:	9001      	str	r0, [sp, #4]
 800641a:	e7ec      	b.n	80063f6 <_dtoa_r+0xa8e>
 800641c:	08007908 	.word	0x08007908
 8006420:	0800788c 	.word	0x0800788c

08006424 <_free_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4605      	mov	r5, r0
 8006428:	2900      	cmp	r1, #0
 800642a:	d041      	beq.n	80064b0 <_free_r+0x8c>
 800642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006430:	1f0c      	subs	r4, r1, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfb8      	it	lt
 8006436:	18e4      	addlt	r4, r4, r3
 8006438:	f000 f8e8 	bl	800660c <__malloc_lock>
 800643c:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <_free_r+0x90>)
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	b933      	cbnz	r3, 8006450 <_free_r+0x2c>
 8006442:	6063      	str	r3, [r4, #4]
 8006444:	6014      	str	r4, [r2, #0]
 8006446:	4628      	mov	r0, r5
 8006448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800644c:	f000 b8e4 	b.w	8006618 <__malloc_unlock>
 8006450:	42a3      	cmp	r3, r4
 8006452:	d908      	bls.n	8006466 <_free_r+0x42>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	1821      	adds	r1, r4, r0
 8006458:	428b      	cmp	r3, r1
 800645a:	bf01      	itttt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	1809      	addeq	r1, r1, r0
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	e7ed      	b.n	8006442 <_free_r+0x1e>
 8006466:	461a      	mov	r2, r3
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b10b      	cbz	r3, 8006470 <_free_r+0x4c>
 800646c:	42a3      	cmp	r3, r4
 800646e:	d9fa      	bls.n	8006466 <_free_r+0x42>
 8006470:	6811      	ldr	r1, [r2, #0]
 8006472:	1850      	adds	r0, r2, r1
 8006474:	42a0      	cmp	r0, r4
 8006476:	d10b      	bne.n	8006490 <_free_r+0x6c>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	4401      	add	r1, r0
 800647c:	1850      	adds	r0, r2, r1
 800647e:	4283      	cmp	r3, r0
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	d1e0      	bne.n	8006446 <_free_r+0x22>
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	6053      	str	r3, [r2, #4]
 800648a:	4408      	add	r0, r1
 800648c:	6010      	str	r0, [r2, #0]
 800648e:	e7da      	b.n	8006446 <_free_r+0x22>
 8006490:	d902      	bls.n	8006498 <_free_r+0x74>
 8006492:	230c      	movs	r3, #12
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	e7d6      	b.n	8006446 <_free_r+0x22>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	1821      	adds	r1, r4, r0
 800649c:	428b      	cmp	r3, r1
 800649e:	bf04      	itt	eq
 80064a0:	6819      	ldreq	r1, [r3, #0]
 80064a2:	685b      	ldreq	r3, [r3, #4]
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	bf04      	itt	eq
 80064a8:	1809      	addeq	r1, r1, r0
 80064aa:	6021      	streq	r1, [r4, #0]
 80064ac:	6054      	str	r4, [r2, #4]
 80064ae:	e7ca      	b.n	8006446 <_free_r+0x22>
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	20000b20 	.word	0x20000b20

080064b8 <malloc>:
 80064b8:	4b02      	ldr	r3, [pc, #8]	@ (80064c4 <malloc+0xc>)
 80064ba:	4601      	mov	r1, r0
 80064bc:	6818      	ldr	r0, [r3, #0]
 80064be:	f000 b825 	b.w	800650c <_malloc_r>
 80064c2:	bf00      	nop
 80064c4:	20000018 	.word	0x20000018

080064c8 <sbrk_aligned>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006508 <sbrk_aligned+0x40>)
 80064cc:	460c      	mov	r4, r1
 80064ce:	6831      	ldr	r1, [r6, #0]
 80064d0:	4605      	mov	r5, r0
 80064d2:	b911      	cbnz	r1, 80064da <sbrk_aligned+0x12>
 80064d4:	f000 fe3e 	bl	8007154 <_sbrk_r>
 80064d8:	6030      	str	r0, [r6, #0]
 80064da:	4621      	mov	r1, r4
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 fe39 	bl	8007154 <_sbrk_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d103      	bne.n	80064ee <sbrk_aligned+0x26>
 80064e6:	f04f 34ff 	mov.w	r4, #4294967295
 80064ea:	4620      	mov	r0, r4
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	1cc4      	adds	r4, r0, #3
 80064f0:	f024 0403 	bic.w	r4, r4, #3
 80064f4:	42a0      	cmp	r0, r4
 80064f6:	d0f8      	beq.n	80064ea <sbrk_aligned+0x22>
 80064f8:	1a21      	subs	r1, r4, r0
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 fe2a 	bl	8007154 <_sbrk_r>
 8006500:	3001      	adds	r0, #1
 8006502:	d1f2      	bne.n	80064ea <sbrk_aligned+0x22>
 8006504:	e7ef      	b.n	80064e6 <sbrk_aligned+0x1e>
 8006506:	bf00      	nop
 8006508:	20000b1c 	.word	0x20000b1c

0800650c <_malloc_r>:
 800650c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006510:	1ccd      	adds	r5, r1, #3
 8006512:	f025 0503 	bic.w	r5, r5, #3
 8006516:	3508      	adds	r5, #8
 8006518:	2d0c      	cmp	r5, #12
 800651a:	bf38      	it	cc
 800651c:	250c      	movcc	r5, #12
 800651e:	2d00      	cmp	r5, #0
 8006520:	4606      	mov	r6, r0
 8006522:	db01      	blt.n	8006528 <_malloc_r+0x1c>
 8006524:	42a9      	cmp	r1, r5
 8006526:	d904      	bls.n	8006532 <_malloc_r+0x26>
 8006528:	230c      	movs	r3, #12
 800652a:	6033      	str	r3, [r6, #0]
 800652c:	2000      	movs	r0, #0
 800652e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006608 <_malloc_r+0xfc>
 8006536:	f000 f869 	bl	800660c <__malloc_lock>
 800653a:	f8d8 3000 	ldr.w	r3, [r8]
 800653e:	461c      	mov	r4, r3
 8006540:	bb44      	cbnz	r4, 8006594 <_malloc_r+0x88>
 8006542:	4629      	mov	r1, r5
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff ffbf 	bl	80064c8 <sbrk_aligned>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	4604      	mov	r4, r0
 800654e:	d158      	bne.n	8006602 <_malloc_r+0xf6>
 8006550:	f8d8 4000 	ldr.w	r4, [r8]
 8006554:	4627      	mov	r7, r4
 8006556:	2f00      	cmp	r7, #0
 8006558:	d143      	bne.n	80065e2 <_malloc_r+0xd6>
 800655a:	2c00      	cmp	r4, #0
 800655c:	d04b      	beq.n	80065f6 <_malloc_r+0xea>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	4639      	mov	r1, r7
 8006562:	4630      	mov	r0, r6
 8006564:	eb04 0903 	add.w	r9, r4, r3
 8006568:	f000 fdf4 	bl	8007154 <_sbrk_r>
 800656c:	4581      	cmp	r9, r0
 800656e:	d142      	bne.n	80065f6 <_malloc_r+0xea>
 8006570:	6821      	ldr	r1, [r4, #0]
 8006572:	1a6d      	subs	r5, r5, r1
 8006574:	4629      	mov	r1, r5
 8006576:	4630      	mov	r0, r6
 8006578:	f7ff ffa6 	bl	80064c8 <sbrk_aligned>
 800657c:	3001      	adds	r0, #1
 800657e:	d03a      	beq.n	80065f6 <_malloc_r+0xea>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	442b      	add	r3, r5
 8006584:	6023      	str	r3, [r4, #0]
 8006586:	f8d8 3000 	ldr.w	r3, [r8]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	bb62      	cbnz	r2, 80065e8 <_malloc_r+0xdc>
 800658e:	f8c8 7000 	str.w	r7, [r8]
 8006592:	e00f      	b.n	80065b4 <_malloc_r+0xa8>
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	1b52      	subs	r2, r2, r5
 8006598:	d420      	bmi.n	80065dc <_malloc_r+0xd0>
 800659a:	2a0b      	cmp	r2, #11
 800659c:	d917      	bls.n	80065ce <_malloc_r+0xc2>
 800659e:	1961      	adds	r1, r4, r5
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	6025      	str	r5, [r4, #0]
 80065a4:	bf18      	it	ne
 80065a6:	6059      	strne	r1, [r3, #4]
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	bf08      	it	eq
 80065ac:	f8c8 1000 	streq.w	r1, [r8]
 80065b0:	5162      	str	r2, [r4, r5]
 80065b2:	604b      	str	r3, [r1, #4]
 80065b4:	4630      	mov	r0, r6
 80065b6:	f000 f82f 	bl	8006618 <__malloc_unlock>
 80065ba:	f104 000b 	add.w	r0, r4, #11
 80065be:	1d23      	adds	r3, r4, #4
 80065c0:	f020 0007 	bic.w	r0, r0, #7
 80065c4:	1ac2      	subs	r2, r0, r3
 80065c6:	bf1c      	itt	ne
 80065c8:	1a1b      	subne	r3, r3, r0
 80065ca:	50a3      	strne	r3, [r4, r2]
 80065cc:	e7af      	b.n	800652e <_malloc_r+0x22>
 80065ce:	6862      	ldr	r2, [r4, #4]
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	bf0c      	ite	eq
 80065d4:	f8c8 2000 	streq.w	r2, [r8]
 80065d8:	605a      	strne	r2, [r3, #4]
 80065da:	e7eb      	b.n	80065b4 <_malloc_r+0xa8>
 80065dc:	4623      	mov	r3, r4
 80065de:	6864      	ldr	r4, [r4, #4]
 80065e0:	e7ae      	b.n	8006540 <_malloc_r+0x34>
 80065e2:	463c      	mov	r4, r7
 80065e4:	687f      	ldr	r7, [r7, #4]
 80065e6:	e7b6      	b.n	8006556 <_malloc_r+0x4a>
 80065e8:	461a      	mov	r2, r3
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d1fb      	bne.n	80065e8 <_malloc_r+0xdc>
 80065f0:	2300      	movs	r3, #0
 80065f2:	6053      	str	r3, [r2, #4]
 80065f4:	e7de      	b.n	80065b4 <_malloc_r+0xa8>
 80065f6:	230c      	movs	r3, #12
 80065f8:	6033      	str	r3, [r6, #0]
 80065fa:	4630      	mov	r0, r6
 80065fc:	f000 f80c 	bl	8006618 <__malloc_unlock>
 8006600:	e794      	b.n	800652c <_malloc_r+0x20>
 8006602:	6005      	str	r5, [r0, #0]
 8006604:	e7d6      	b.n	80065b4 <_malloc_r+0xa8>
 8006606:	bf00      	nop
 8006608:	20000b20 	.word	0x20000b20

0800660c <__malloc_lock>:
 800660c:	4801      	ldr	r0, [pc, #4]	@ (8006614 <__malloc_lock+0x8>)
 800660e:	f7ff b91e 	b.w	800584e <__retarget_lock_acquire_recursive>
 8006612:	bf00      	nop
 8006614:	20000b18 	.word	0x20000b18

08006618 <__malloc_unlock>:
 8006618:	4801      	ldr	r0, [pc, #4]	@ (8006620 <__malloc_unlock+0x8>)
 800661a:	f7ff b919 	b.w	8005850 <__retarget_lock_release_recursive>
 800661e:	bf00      	nop
 8006620:	20000b18 	.word	0x20000b18

08006624 <_Balloc>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	69c6      	ldr	r6, [r0, #28]
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	b976      	cbnz	r6, 800664c <_Balloc+0x28>
 800662e:	2010      	movs	r0, #16
 8006630:	f7ff ff42 	bl	80064b8 <malloc>
 8006634:	4602      	mov	r2, r0
 8006636:	61e0      	str	r0, [r4, #28]
 8006638:	b920      	cbnz	r0, 8006644 <_Balloc+0x20>
 800663a:	4b18      	ldr	r3, [pc, #96]	@ (800669c <_Balloc+0x78>)
 800663c:	4818      	ldr	r0, [pc, #96]	@ (80066a0 <_Balloc+0x7c>)
 800663e:	216b      	movs	r1, #107	@ 0x6b
 8006640:	f000 fda6 	bl	8007190 <__assert_func>
 8006644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006648:	6006      	str	r6, [r0, #0]
 800664a:	60c6      	str	r6, [r0, #12]
 800664c:	69e6      	ldr	r6, [r4, #28]
 800664e:	68f3      	ldr	r3, [r6, #12]
 8006650:	b183      	cbz	r3, 8006674 <_Balloc+0x50>
 8006652:	69e3      	ldr	r3, [r4, #28]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800665a:	b9b8      	cbnz	r0, 800668c <_Balloc+0x68>
 800665c:	2101      	movs	r1, #1
 800665e:	fa01 f605 	lsl.w	r6, r1, r5
 8006662:	1d72      	adds	r2, r6, #5
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	4620      	mov	r0, r4
 8006668:	f000 fdb0 	bl	80071cc <_calloc_r>
 800666c:	b160      	cbz	r0, 8006688 <_Balloc+0x64>
 800666e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006672:	e00e      	b.n	8006692 <_Balloc+0x6e>
 8006674:	2221      	movs	r2, #33	@ 0x21
 8006676:	2104      	movs	r1, #4
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fda7 	bl	80071cc <_calloc_r>
 800667e:	69e3      	ldr	r3, [r4, #28]
 8006680:	60f0      	str	r0, [r6, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <_Balloc+0x2e>
 8006688:	2000      	movs	r0, #0
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	6802      	ldr	r2, [r0, #0]
 800668e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006692:	2300      	movs	r3, #0
 8006694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006698:	e7f7      	b.n	800668a <_Balloc+0x66>
 800669a:	bf00      	nop
 800669c:	08007899 	.word	0x08007899
 80066a0:	08007919 	.word	0x08007919

080066a4 <_Bfree>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	69c6      	ldr	r6, [r0, #28]
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b976      	cbnz	r6, 80066cc <_Bfree+0x28>
 80066ae:	2010      	movs	r0, #16
 80066b0:	f7ff ff02 	bl	80064b8 <malloc>
 80066b4:	4602      	mov	r2, r0
 80066b6:	61e8      	str	r0, [r5, #28]
 80066b8:	b920      	cbnz	r0, 80066c4 <_Bfree+0x20>
 80066ba:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <_Bfree+0x3c>)
 80066bc:	4809      	ldr	r0, [pc, #36]	@ (80066e4 <_Bfree+0x40>)
 80066be:	218f      	movs	r1, #143	@ 0x8f
 80066c0:	f000 fd66 	bl	8007190 <__assert_func>
 80066c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066c8:	6006      	str	r6, [r0, #0]
 80066ca:	60c6      	str	r6, [r0, #12]
 80066cc:	b13c      	cbz	r4, 80066de <_Bfree+0x3a>
 80066ce:	69eb      	ldr	r3, [r5, #28]
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d8:	6021      	str	r1, [r4, #0]
 80066da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	08007899 	.word	0x08007899
 80066e4:	08007919 	.word	0x08007919

080066e8 <__multadd>:
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	690d      	ldr	r5, [r1, #16]
 80066ee:	4607      	mov	r7, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	461e      	mov	r6, r3
 80066f4:	f101 0c14 	add.w	ip, r1, #20
 80066f8:	2000      	movs	r0, #0
 80066fa:	f8dc 3000 	ldr.w	r3, [ip]
 80066fe:	b299      	uxth	r1, r3
 8006700:	fb02 6101 	mla	r1, r2, r1, r6
 8006704:	0c1e      	lsrs	r6, r3, #16
 8006706:	0c0b      	lsrs	r3, r1, #16
 8006708:	fb02 3306 	mla	r3, r2, r6, r3
 800670c:	b289      	uxth	r1, r1
 800670e:	3001      	adds	r0, #1
 8006710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006714:	4285      	cmp	r5, r0
 8006716:	f84c 1b04 	str.w	r1, [ip], #4
 800671a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800671e:	dcec      	bgt.n	80066fa <__multadd+0x12>
 8006720:	b30e      	cbz	r6, 8006766 <__multadd+0x7e>
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc19      	bgt.n	800675c <__multadd+0x74>
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4638      	mov	r0, r7
 800672c:	3101      	adds	r1, #1
 800672e:	f7ff ff79 	bl	8006624 <_Balloc>
 8006732:	4680      	mov	r8, r0
 8006734:	b928      	cbnz	r0, 8006742 <__multadd+0x5a>
 8006736:	4602      	mov	r2, r0
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <__multadd+0x84>)
 800673a:	480d      	ldr	r0, [pc, #52]	@ (8006770 <__multadd+0x88>)
 800673c:	21ba      	movs	r1, #186	@ 0xba
 800673e:	f000 fd27 	bl	8007190 <__assert_func>
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	3202      	adds	r2, #2
 8006746:	f104 010c 	add.w	r1, r4, #12
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	300c      	adds	r0, #12
 800674e:	f000 fd11 	bl	8007174 <memcpy>
 8006752:	4621      	mov	r1, r4
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ffa5 	bl	80066a4 <_Bfree>
 800675a:	4644      	mov	r4, r8
 800675c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006760:	3501      	adds	r5, #1
 8006762:	615e      	str	r6, [r3, #20]
 8006764:	6125      	str	r5, [r4, #16]
 8006766:	4620      	mov	r0, r4
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	08007908 	.word	0x08007908
 8006770:	08007919 	.word	0x08007919

08006774 <__hi0bits>:
 8006774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006778:	4603      	mov	r3, r0
 800677a:	bf36      	itet	cc
 800677c:	0403      	lslcc	r3, r0, #16
 800677e:	2000      	movcs	r0, #0
 8006780:	2010      	movcc	r0, #16
 8006782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006786:	bf3c      	itt	cc
 8006788:	021b      	lslcc	r3, r3, #8
 800678a:	3008      	addcc	r0, #8
 800678c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006790:	bf3c      	itt	cc
 8006792:	011b      	lslcc	r3, r3, #4
 8006794:	3004      	addcc	r0, #4
 8006796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800679a:	bf3c      	itt	cc
 800679c:	009b      	lslcc	r3, r3, #2
 800679e:	3002      	addcc	r0, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	db05      	blt.n	80067b0 <__hi0bits+0x3c>
 80067a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80067a8:	f100 0001 	add.w	r0, r0, #1
 80067ac:	bf08      	it	eq
 80067ae:	2020      	moveq	r0, #32
 80067b0:	4770      	bx	lr

080067b2 <__lo0bits>:
 80067b2:	6803      	ldr	r3, [r0, #0]
 80067b4:	4602      	mov	r2, r0
 80067b6:	f013 0007 	ands.w	r0, r3, #7
 80067ba:	d00b      	beq.n	80067d4 <__lo0bits+0x22>
 80067bc:	07d9      	lsls	r1, r3, #31
 80067be:	d421      	bmi.n	8006804 <__lo0bits+0x52>
 80067c0:	0798      	lsls	r0, r3, #30
 80067c2:	bf49      	itett	mi
 80067c4:	085b      	lsrmi	r3, r3, #1
 80067c6:	089b      	lsrpl	r3, r3, #2
 80067c8:	2001      	movmi	r0, #1
 80067ca:	6013      	strmi	r3, [r2, #0]
 80067cc:	bf5c      	itt	pl
 80067ce:	6013      	strpl	r3, [r2, #0]
 80067d0:	2002      	movpl	r0, #2
 80067d2:	4770      	bx	lr
 80067d4:	b299      	uxth	r1, r3
 80067d6:	b909      	cbnz	r1, 80067dc <__lo0bits+0x2a>
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	2010      	movs	r0, #16
 80067dc:	b2d9      	uxtb	r1, r3
 80067de:	b909      	cbnz	r1, 80067e4 <__lo0bits+0x32>
 80067e0:	3008      	adds	r0, #8
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	0719      	lsls	r1, r3, #28
 80067e6:	bf04      	itt	eq
 80067e8:	091b      	lsreq	r3, r3, #4
 80067ea:	3004      	addeq	r0, #4
 80067ec:	0799      	lsls	r1, r3, #30
 80067ee:	bf04      	itt	eq
 80067f0:	089b      	lsreq	r3, r3, #2
 80067f2:	3002      	addeq	r0, #2
 80067f4:	07d9      	lsls	r1, r3, #31
 80067f6:	d403      	bmi.n	8006800 <__lo0bits+0x4e>
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	f100 0001 	add.w	r0, r0, #1
 80067fe:	d003      	beq.n	8006808 <__lo0bits+0x56>
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	4770      	bx	lr
 8006804:	2000      	movs	r0, #0
 8006806:	4770      	bx	lr
 8006808:	2020      	movs	r0, #32
 800680a:	4770      	bx	lr

0800680c <__i2b>:
 800680c:	b510      	push	{r4, lr}
 800680e:	460c      	mov	r4, r1
 8006810:	2101      	movs	r1, #1
 8006812:	f7ff ff07 	bl	8006624 <_Balloc>
 8006816:	4602      	mov	r2, r0
 8006818:	b928      	cbnz	r0, 8006826 <__i2b+0x1a>
 800681a:	4b05      	ldr	r3, [pc, #20]	@ (8006830 <__i2b+0x24>)
 800681c:	4805      	ldr	r0, [pc, #20]	@ (8006834 <__i2b+0x28>)
 800681e:	f240 1145 	movw	r1, #325	@ 0x145
 8006822:	f000 fcb5 	bl	8007190 <__assert_func>
 8006826:	2301      	movs	r3, #1
 8006828:	6144      	str	r4, [r0, #20]
 800682a:	6103      	str	r3, [r0, #16]
 800682c:	bd10      	pop	{r4, pc}
 800682e:	bf00      	nop
 8006830:	08007908 	.word	0x08007908
 8006834:	08007919 	.word	0x08007919

08006838 <__multiply>:
 8006838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683c:	4617      	mov	r7, r2
 800683e:	690a      	ldr	r2, [r1, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	429a      	cmp	r2, r3
 8006844:	bfa8      	it	ge
 8006846:	463b      	movge	r3, r7
 8006848:	4689      	mov	r9, r1
 800684a:	bfa4      	itt	ge
 800684c:	460f      	movge	r7, r1
 800684e:	4699      	movge	r9, r3
 8006850:	693d      	ldr	r5, [r7, #16]
 8006852:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	eb05 060a 	add.w	r6, r5, sl
 800685e:	42b3      	cmp	r3, r6
 8006860:	b085      	sub	sp, #20
 8006862:	bfb8      	it	lt
 8006864:	3101      	addlt	r1, #1
 8006866:	f7ff fedd 	bl	8006624 <_Balloc>
 800686a:	b930      	cbnz	r0, 800687a <__multiply+0x42>
 800686c:	4602      	mov	r2, r0
 800686e:	4b41      	ldr	r3, [pc, #260]	@ (8006974 <__multiply+0x13c>)
 8006870:	4841      	ldr	r0, [pc, #260]	@ (8006978 <__multiply+0x140>)
 8006872:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006876:	f000 fc8b 	bl	8007190 <__assert_func>
 800687a:	f100 0414 	add.w	r4, r0, #20
 800687e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006882:	4623      	mov	r3, r4
 8006884:	2200      	movs	r2, #0
 8006886:	4573      	cmp	r3, lr
 8006888:	d320      	bcc.n	80068cc <__multiply+0x94>
 800688a:	f107 0814 	add.w	r8, r7, #20
 800688e:	f109 0114 	add.w	r1, r9, #20
 8006892:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006896:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	1beb      	subs	r3, r5, r7
 800689e:	3b15      	subs	r3, #21
 80068a0:	f023 0303 	bic.w	r3, r3, #3
 80068a4:	3304      	adds	r3, #4
 80068a6:	3715      	adds	r7, #21
 80068a8:	42bd      	cmp	r5, r7
 80068aa:	bf38      	it	cc
 80068ac:	2304      	movcc	r3, #4
 80068ae:	9301      	str	r3, [sp, #4]
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	9103      	str	r1, [sp, #12]
 80068b4:	428b      	cmp	r3, r1
 80068b6:	d80c      	bhi.n	80068d2 <__multiply+0x9a>
 80068b8:	2e00      	cmp	r6, #0
 80068ba:	dd03      	ble.n	80068c4 <__multiply+0x8c>
 80068bc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d055      	beq.n	8006970 <__multiply+0x138>
 80068c4:	6106      	str	r6, [r0, #16]
 80068c6:	b005      	add	sp, #20
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	f843 2b04 	str.w	r2, [r3], #4
 80068d0:	e7d9      	b.n	8006886 <__multiply+0x4e>
 80068d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80068d6:	f1ba 0f00 	cmp.w	sl, #0
 80068da:	d01f      	beq.n	800691c <__multiply+0xe4>
 80068dc:	46c4      	mov	ip, r8
 80068de:	46a1      	mov	r9, r4
 80068e0:	2700      	movs	r7, #0
 80068e2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80068e6:	f8d9 3000 	ldr.w	r3, [r9]
 80068ea:	fa1f fb82 	uxth.w	fp, r2
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	fb0a 330b 	mla	r3, sl, fp, r3
 80068f4:	443b      	add	r3, r7
 80068f6:	f8d9 7000 	ldr.w	r7, [r9]
 80068fa:	0c12      	lsrs	r2, r2, #16
 80068fc:	0c3f      	lsrs	r7, r7, #16
 80068fe:	fb0a 7202 	mla	r2, sl, r2, r7
 8006902:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800690c:	4565      	cmp	r5, ip
 800690e:	f849 3b04 	str.w	r3, [r9], #4
 8006912:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006916:	d8e4      	bhi.n	80068e2 <__multiply+0xaa>
 8006918:	9b01      	ldr	r3, [sp, #4]
 800691a:	50e7      	str	r7, [r4, r3]
 800691c:	9b03      	ldr	r3, [sp, #12]
 800691e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006922:	3104      	adds	r1, #4
 8006924:	f1b9 0f00 	cmp.w	r9, #0
 8006928:	d020      	beq.n	800696c <__multiply+0x134>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	4647      	mov	r7, r8
 800692e:	46a4      	mov	ip, r4
 8006930:	f04f 0a00 	mov.w	sl, #0
 8006934:	f8b7 b000 	ldrh.w	fp, [r7]
 8006938:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800693c:	fb09 220b 	mla	r2, r9, fp, r2
 8006940:	4452      	add	r2, sl
 8006942:	b29b      	uxth	r3, r3
 8006944:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006948:	f84c 3b04 	str.w	r3, [ip], #4
 800694c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006950:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006954:	f8bc 3000 	ldrh.w	r3, [ip]
 8006958:	fb09 330a 	mla	r3, r9, sl, r3
 800695c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006960:	42bd      	cmp	r5, r7
 8006962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006966:	d8e5      	bhi.n	8006934 <__multiply+0xfc>
 8006968:	9a01      	ldr	r2, [sp, #4]
 800696a:	50a3      	str	r3, [r4, r2]
 800696c:	3404      	adds	r4, #4
 800696e:	e79f      	b.n	80068b0 <__multiply+0x78>
 8006970:	3e01      	subs	r6, #1
 8006972:	e7a1      	b.n	80068b8 <__multiply+0x80>
 8006974:	08007908 	.word	0x08007908
 8006978:	08007919 	.word	0x08007919

0800697c <__pow5mult>:
 800697c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006980:	4615      	mov	r5, r2
 8006982:	f012 0203 	ands.w	r2, r2, #3
 8006986:	4607      	mov	r7, r0
 8006988:	460e      	mov	r6, r1
 800698a:	d007      	beq.n	800699c <__pow5mult+0x20>
 800698c:	4c25      	ldr	r4, [pc, #148]	@ (8006a24 <__pow5mult+0xa8>)
 800698e:	3a01      	subs	r2, #1
 8006990:	2300      	movs	r3, #0
 8006992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006996:	f7ff fea7 	bl	80066e8 <__multadd>
 800699a:	4606      	mov	r6, r0
 800699c:	10ad      	asrs	r5, r5, #2
 800699e:	d03d      	beq.n	8006a1c <__pow5mult+0xa0>
 80069a0:	69fc      	ldr	r4, [r7, #28]
 80069a2:	b97c      	cbnz	r4, 80069c4 <__pow5mult+0x48>
 80069a4:	2010      	movs	r0, #16
 80069a6:	f7ff fd87 	bl	80064b8 <malloc>
 80069aa:	4602      	mov	r2, r0
 80069ac:	61f8      	str	r0, [r7, #28]
 80069ae:	b928      	cbnz	r0, 80069bc <__pow5mult+0x40>
 80069b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006a28 <__pow5mult+0xac>)
 80069b2:	481e      	ldr	r0, [pc, #120]	@ (8006a2c <__pow5mult+0xb0>)
 80069b4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80069b8:	f000 fbea 	bl	8007190 <__assert_func>
 80069bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069c0:	6004      	str	r4, [r0, #0]
 80069c2:	60c4      	str	r4, [r0, #12]
 80069c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80069c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069cc:	b94c      	cbnz	r4, 80069e2 <__pow5mult+0x66>
 80069ce:	f240 2171 	movw	r1, #625	@ 0x271
 80069d2:	4638      	mov	r0, r7
 80069d4:	f7ff ff1a 	bl	800680c <__i2b>
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c8 0008 	str.w	r0, [r8, #8]
 80069de:	4604      	mov	r4, r0
 80069e0:	6003      	str	r3, [r0, #0]
 80069e2:	f04f 0900 	mov.w	r9, #0
 80069e6:	07eb      	lsls	r3, r5, #31
 80069e8:	d50a      	bpl.n	8006a00 <__pow5mult+0x84>
 80069ea:	4631      	mov	r1, r6
 80069ec:	4622      	mov	r2, r4
 80069ee:	4638      	mov	r0, r7
 80069f0:	f7ff ff22 	bl	8006838 <__multiply>
 80069f4:	4631      	mov	r1, r6
 80069f6:	4680      	mov	r8, r0
 80069f8:	4638      	mov	r0, r7
 80069fa:	f7ff fe53 	bl	80066a4 <_Bfree>
 80069fe:	4646      	mov	r6, r8
 8006a00:	106d      	asrs	r5, r5, #1
 8006a02:	d00b      	beq.n	8006a1c <__pow5mult+0xa0>
 8006a04:	6820      	ldr	r0, [r4, #0]
 8006a06:	b938      	cbnz	r0, 8006a18 <__pow5mult+0x9c>
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff ff13 	bl	8006838 <__multiply>
 8006a12:	6020      	str	r0, [r4, #0]
 8006a14:	f8c0 9000 	str.w	r9, [r0]
 8006a18:	4604      	mov	r4, r0
 8006a1a:	e7e4      	b.n	80069e6 <__pow5mult+0x6a>
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a22:	bf00      	nop
 8006a24:	080079cc 	.word	0x080079cc
 8006a28:	08007899 	.word	0x08007899
 8006a2c:	08007919 	.word	0x08007919

08006a30 <__lshift>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	460c      	mov	r4, r1
 8006a36:	6849      	ldr	r1, [r1, #4]
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	4607      	mov	r7, r0
 8006a42:	4691      	mov	r9, r2
 8006a44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a48:	f108 0601 	add.w	r6, r8, #1
 8006a4c:	42b3      	cmp	r3, r6
 8006a4e:	db0b      	blt.n	8006a68 <__lshift+0x38>
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff fde7 	bl	8006624 <_Balloc>
 8006a56:	4605      	mov	r5, r0
 8006a58:	b948      	cbnz	r0, 8006a6e <__lshift+0x3e>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	4b28      	ldr	r3, [pc, #160]	@ (8006b00 <__lshift+0xd0>)
 8006a5e:	4829      	ldr	r0, [pc, #164]	@ (8006b04 <__lshift+0xd4>)
 8006a60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006a64:	f000 fb94 	bl	8007190 <__assert_func>
 8006a68:	3101      	adds	r1, #1
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	e7ee      	b.n	8006a4c <__lshift+0x1c>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f100 0114 	add.w	r1, r0, #20
 8006a74:	f100 0210 	add.w	r2, r0, #16
 8006a78:	4618      	mov	r0, r3
 8006a7a:	4553      	cmp	r3, sl
 8006a7c:	db33      	blt.n	8006ae6 <__lshift+0xb6>
 8006a7e:	6920      	ldr	r0, [r4, #16]
 8006a80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a84:	f104 0314 	add.w	r3, r4, #20
 8006a88:	f019 091f 	ands.w	r9, r9, #31
 8006a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a94:	d02b      	beq.n	8006aee <__lshift+0xbe>
 8006a96:	f1c9 0e20 	rsb	lr, r9, #32
 8006a9a:	468a      	mov	sl, r1
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	fa00 f009 	lsl.w	r0, r0, r9
 8006aa4:	4310      	orrs	r0, r2
 8006aa6:	f84a 0b04 	str.w	r0, [sl], #4
 8006aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aae:	459c      	cmp	ip, r3
 8006ab0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ab4:	d8f3      	bhi.n	8006a9e <__lshift+0x6e>
 8006ab6:	ebac 0304 	sub.w	r3, ip, r4
 8006aba:	3b15      	subs	r3, #21
 8006abc:	f023 0303 	bic.w	r3, r3, #3
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	f104 0015 	add.w	r0, r4, #21
 8006ac6:	4560      	cmp	r0, ip
 8006ac8:	bf88      	it	hi
 8006aca:	2304      	movhi	r3, #4
 8006acc:	50ca      	str	r2, [r1, r3]
 8006ace:	b10a      	cbz	r2, 8006ad4 <__lshift+0xa4>
 8006ad0:	f108 0602 	add.w	r6, r8, #2
 8006ad4:	3e01      	subs	r6, #1
 8006ad6:	4638      	mov	r0, r7
 8006ad8:	612e      	str	r6, [r5, #16]
 8006ada:	4621      	mov	r1, r4
 8006adc:	f7ff fde2 	bl	80066a4 <_Bfree>
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006aea:	3301      	adds	r3, #1
 8006aec:	e7c5      	b.n	8006a7a <__lshift+0x4a>
 8006aee:	3904      	subs	r1, #4
 8006af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006af4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006af8:	459c      	cmp	ip, r3
 8006afa:	d8f9      	bhi.n	8006af0 <__lshift+0xc0>
 8006afc:	e7ea      	b.n	8006ad4 <__lshift+0xa4>
 8006afe:	bf00      	nop
 8006b00:	08007908 	.word	0x08007908
 8006b04:	08007919 	.word	0x08007919

08006b08 <__mcmp>:
 8006b08:	690a      	ldr	r2, [r1, #16]
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	6900      	ldr	r0, [r0, #16]
 8006b0e:	1a80      	subs	r0, r0, r2
 8006b10:	b530      	push	{r4, r5, lr}
 8006b12:	d10e      	bne.n	8006b32 <__mcmp+0x2a>
 8006b14:	3314      	adds	r3, #20
 8006b16:	3114      	adds	r1, #20
 8006b18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b28:	4295      	cmp	r5, r2
 8006b2a:	d003      	beq.n	8006b34 <__mcmp+0x2c>
 8006b2c:	d205      	bcs.n	8006b3a <__mcmp+0x32>
 8006b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b32:	bd30      	pop	{r4, r5, pc}
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d3f3      	bcc.n	8006b20 <__mcmp+0x18>
 8006b38:	e7fb      	b.n	8006b32 <__mcmp+0x2a>
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	e7f9      	b.n	8006b32 <__mcmp+0x2a>
	...

08006b40 <__mdiff>:
 8006b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4689      	mov	r9, r1
 8006b46:	4606      	mov	r6, r0
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4648      	mov	r0, r9
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	f7ff ffdb 	bl	8006b08 <__mcmp>
 8006b52:	1e05      	subs	r5, r0, #0
 8006b54:	d112      	bne.n	8006b7c <__mdiff+0x3c>
 8006b56:	4629      	mov	r1, r5
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f7ff fd63 	bl	8006624 <_Balloc>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	b928      	cbnz	r0, 8006b6e <__mdiff+0x2e>
 8006b62:	4b3f      	ldr	r3, [pc, #252]	@ (8006c60 <__mdiff+0x120>)
 8006b64:	f240 2137 	movw	r1, #567	@ 0x237
 8006b68:	483e      	ldr	r0, [pc, #248]	@ (8006c64 <__mdiff+0x124>)
 8006b6a:	f000 fb11 	bl	8007190 <__assert_func>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006b74:	4610      	mov	r0, r2
 8006b76:	b003      	add	sp, #12
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	bfbc      	itt	lt
 8006b7e:	464b      	movlt	r3, r9
 8006b80:	46a1      	movlt	r9, r4
 8006b82:	4630      	mov	r0, r6
 8006b84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006b88:	bfba      	itte	lt
 8006b8a:	461c      	movlt	r4, r3
 8006b8c:	2501      	movlt	r5, #1
 8006b8e:	2500      	movge	r5, #0
 8006b90:	f7ff fd48 	bl	8006624 <_Balloc>
 8006b94:	4602      	mov	r2, r0
 8006b96:	b918      	cbnz	r0, 8006ba0 <__mdiff+0x60>
 8006b98:	4b31      	ldr	r3, [pc, #196]	@ (8006c60 <__mdiff+0x120>)
 8006b9a:	f240 2145 	movw	r1, #581	@ 0x245
 8006b9e:	e7e3      	b.n	8006b68 <__mdiff+0x28>
 8006ba0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006ba4:	6926      	ldr	r6, [r4, #16]
 8006ba6:	60c5      	str	r5, [r0, #12]
 8006ba8:	f109 0310 	add.w	r3, r9, #16
 8006bac:	f109 0514 	add.w	r5, r9, #20
 8006bb0:	f104 0e14 	add.w	lr, r4, #20
 8006bb4:	f100 0b14 	add.w	fp, r0, #20
 8006bb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006bbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006bc0:	9301      	str	r3, [sp, #4]
 8006bc2:	46d9      	mov	r9, fp
 8006bc4:	f04f 0c00 	mov.w	ip, #0
 8006bc8:	9b01      	ldr	r3, [sp, #4]
 8006bca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006bce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006bd2:	9301      	str	r3, [sp, #4]
 8006bd4:	fa1f f38a 	uxth.w	r3, sl
 8006bd8:	4619      	mov	r1, r3
 8006bda:	b283      	uxth	r3, r0
 8006bdc:	1acb      	subs	r3, r1, r3
 8006bde:	0c00      	lsrs	r0, r0, #16
 8006be0:	4463      	add	r3, ip
 8006be2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006be6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006bf0:	4576      	cmp	r6, lr
 8006bf2:	f849 3b04 	str.w	r3, [r9], #4
 8006bf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bfa:	d8e5      	bhi.n	8006bc8 <__mdiff+0x88>
 8006bfc:	1b33      	subs	r3, r6, r4
 8006bfe:	3b15      	subs	r3, #21
 8006c00:	f023 0303 	bic.w	r3, r3, #3
 8006c04:	3415      	adds	r4, #21
 8006c06:	3304      	adds	r3, #4
 8006c08:	42a6      	cmp	r6, r4
 8006c0a:	bf38      	it	cc
 8006c0c:	2304      	movcc	r3, #4
 8006c0e:	441d      	add	r5, r3
 8006c10:	445b      	add	r3, fp
 8006c12:	461e      	mov	r6, r3
 8006c14:	462c      	mov	r4, r5
 8006c16:	4544      	cmp	r4, r8
 8006c18:	d30e      	bcc.n	8006c38 <__mdiff+0xf8>
 8006c1a:	f108 0103 	add.w	r1, r8, #3
 8006c1e:	1b49      	subs	r1, r1, r5
 8006c20:	f021 0103 	bic.w	r1, r1, #3
 8006c24:	3d03      	subs	r5, #3
 8006c26:	45a8      	cmp	r8, r5
 8006c28:	bf38      	it	cc
 8006c2a:	2100      	movcc	r1, #0
 8006c2c:	440b      	add	r3, r1
 8006c2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c32:	b191      	cbz	r1, 8006c5a <__mdiff+0x11a>
 8006c34:	6117      	str	r7, [r2, #16]
 8006c36:	e79d      	b.n	8006b74 <__mdiff+0x34>
 8006c38:	f854 1b04 	ldr.w	r1, [r4], #4
 8006c3c:	46e6      	mov	lr, ip
 8006c3e:	0c08      	lsrs	r0, r1, #16
 8006c40:	fa1c fc81 	uxtah	ip, ip, r1
 8006c44:	4471      	add	r1, lr
 8006c46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006c4a:	b289      	uxth	r1, r1
 8006c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006c50:	f846 1b04 	str.w	r1, [r6], #4
 8006c54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c58:	e7dd      	b.n	8006c16 <__mdiff+0xd6>
 8006c5a:	3f01      	subs	r7, #1
 8006c5c:	e7e7      	b.n	8006c2e <__mdiff+0xee>
 8006c5e:	bf00      	nop
 8006c60:	08007908 	.word	0x08007908
 8006c64:	08007919 	.word	0x08007919

08006c68 <__d2b>:
 8006c68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	460f      	mov	r7, r1
 8006c6e:	2101      	movs	r1, #1
 8006c70:	ec59 8b10 	vmov	r8, r9, d0
 8006c74:	4616      	mov	r6, r2
 8006c76:	f7ff fcd5 	bl	8006624 <_Balloc>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	b930      	cbnz	r0, 8006c8c <__d2b+0x24>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	4b23      	ldr	r3, [pc, #140]	@ (8006d10 <__d2b+0xa8>)
 8006c82:	4824      	ldr	r0, [pc, #144]	@ (8006d14 <__d2b+0xac>)
 8006c84:	f240 310f 	movw	r1, #783	@ 0x30f
 8006c88:	f000 fa82 	bl	8007190 <__assert_func>
 8006c8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006c90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c94:	b10d      	cbz	r5, 8006c9a <__d2b+0x32>
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f1b8 0300 	subs.w	r3, r8, #0
 8006ca0:	d023      	beq.n	8006cea <__d2b+0x82>
 8006ca2:	4668      	mov	r0, sp
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	f7ff fd84 	bl	80067b2 <__lo0bits>
 8006caa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006cae:	b1d0      	cbz	r0, 8006ce6 <__d2b+0x7e>
 8006cb0:	f1c0 0320 	rsb	r3, r0, #32
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	40c2      	lsrs	r2, r0
 8006cbc:	6163      	str	r3, [r4, #20]
 8006cbe:	9201      	str	r2, [sp, #4]
 8006cc0:	9b01      	ldr	r3, [sp, #4]
 8006cc2:	61a3      	str	r3, [r4, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bf0c      	ite	eq
 8006cc8:	2201      	moveq	r2, #1
 8006cca:	2202      	movne	r2, #2
 8006ccc:	6122      	str	r2, [r4, #16]
 8006cce:	b1a5      	cbz	r5, 8006cfa <__d2b+0x92>
 8006cd0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006cd4:	4405      	add	r5, r0
 8006cd6:	603d      	str	r5, [r7, #0]
 8006cd8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006cdc:	6030      	str	r0, [r6, #0]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	b003      	add	sp, #12
 8006ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce6:	6161      	str	r1, [r4, #20]
 8006ce8:	e7ea      	b.n	8006cc0 <__d2b+0x58>
 8006cea:	a801      	add	r0, sp, #4
 8006cec:	f7ff fd61 	bl	80067b2 <__lo0bits>
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	6163      	str	r3, [r4, #20]
 8006cf4:	3020      	adds	r0, #32
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	e7e8      	b.n	8006ccc <__d2b+0x64>
 8006cfa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006cfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006d02:	6038      	str	r0, [r7, #0]
 8006d04:	6918      	ldr	r0, [r3, #16]
 8006d06:	f7ff fd35 	bl	8006774 <__hi0bits>
 8006d0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d0e:	e7e5      	b.n	8006cdc <__d2b+0x74>
 8006d10:	08007908 	.word	0x08007908
 8006d14:	08007919 	.word	0x08007919

08006d18 <__ssputs_r>:
 8006d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	688e      	ldr	r6, [r1, #8]
 8006d1e:	461f      	mov	r7, r3
 8006d20:	42be      	cmp	r6, r7
 8006d22:	680b      	ldr	r3, [r1, #0]
 8006d24:	4682      	mov	sl, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	4690      	mov	r8, r2
 8006d2a:	d82d      	bhi.n	8006d88 <__ssputs_r+0x70>
 8006d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006d34:	d026      	beq.n	8006d84 <__ssputs_r+0x6c>
 8006d36:	6965      	ldr	r5, [r4, #20]
 8006d38:	6909      	ldr	r1, [r1, #16]
 8006d3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d3e:	eba3 0901 	sub.w	r9, r3, r1
 8006d42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d46:	1c7b      	adds	r3, r7, #1
 8006d48:	444b      	add	r3, r9
 8006d4a:	106d      	asrs	r5, r5, #1
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	bf38      	it	cc
 8006d50:	461d      	movcc	r5, r3
 8006d52:	0553      	lsls	r3, r2, #21
 8006d54:	d527      	bpl.n	8006da6 <__ssputs_r+0x8e>
 8006d56:	4629      	mov	r1, r5
 8006d58:	f7ff fbd8 	bl	800650c <_malloc_r>
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	b360      	cbz	r0, 8006dba <__ssputs_r+0xa2>
 8006d60:	6921      	ldr	r1, [r4, #16]
 8006d62:	464a      	mov	r2, r9
 8006d64:	f000 fa06 	bl	8007174 <memcpy>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	6126      	str	r6, [r4, #16]
 8006d76:	6165      	str	r5, [r4, #20]
 8006d78:	444e      	add	r6, r9
 8006d7a:	eba5 0509 	sub.w	r5, r5, r9
 8006d7e:	6026      	str	r6, [r4, #0]
 8006d80:	60a5      	str	r5, [r4, #8]
 8006d82:	463e      	mov	r6, r7
 8006d84:	42be      	cmp	r6, r7
 8006d86:	d900      	bls.n	8006d8a <__ssputs_r+0x72>
 8006d88:	463e      	mov	r6, r7
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	4641      	mov	r1, r8
 8006d90:	f000 f9c6 	bl	8007120 <memmove>
 8006d94:	68a3      	ldr	r3, [r4, #8]
 8006d96:	1b9b      	subs	r3, r3, r6
 8006d98:	60a3      	str	r3, [r4, #8]
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	4433      	add	r3, r6
 8006d9e:	6023      	str	r3, [r4, #0]
 8006da0:	2000      	movs	r0, #0
 8006da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da6:	462a      	mov	r2, r5
 8006da8:	f000 fa36 	bl	8007218 <_realloc_r>
 8006dac:	4606      	mov	r6, r0
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d1e0      	bne.n	8006d74 <__ssputs_r+0x5c>
 8006db2:	6921      	ldr	r1, [r4, #16]
 8006db4:	4650      	mov	r0, sl
 8006db6:	f7ff fb35 	bl	8006424 <_free_r>
 8006dba:	230c      	movs	r3, #12
 8006dbc:	f8ca 3000 	str.w	r3, [sl]
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc6:	81a3      	strh	r3, [r4, #12]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e7e9      	b.n	8006da2 <__ssputs_r+0x8a>
	...

08006dd0 <_svfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	4698      	mov	r8, r3
 8006dd6:	898b      	ldrh	r3, [r1, #12]
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	b09d      	sub	sp, #116	@ 0x74
 8006ddc:	4607      	mov	r7, r0
 8006dde:	460d      	mov	r5, r1
 8006de0:	4614      	mov	r4, r2
 8006de2:	d510      	bpl.n	8006e06 <_svfiprintf_r+0x36>
 8006de4:	690b      	ldr	r3, [r1, #16]
 8006de6:	b973      	cbnz	r3, 8006e06 <_svfiprintf_r+0x36>
 8006de8:	2140      	movs	r1, #64	@ 0x40
 8006dea:	f7ff fb8f 	bl	800650c <_malloc_r>
 8006dee:	6028      	str	r0, [r5, #0]
 8006df0:	6128      	str	r0, [r5, #16]
 8006df2:	b930      	cbnz	r0, 8006e02 <_svfiprintf_r+0x32>
 8006df4:	230c      	movs	r3, #12
 8006df6:	603b      	str	r3, [r7, #0]
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	b01d      	add	sp, #116	@ 0x74
 8006dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e02:	2340      	movs	r3, #64	@ 0x40
 8006e04:	616b      	str	r3, [r5, #20]
 8006e06:	2300      	movs	r3, #0
 8006e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e14:	2330      	movs	r3, #48	@ 0x30
 8006e16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006fb4 <_svfiprintf_r+0x1e4>
 8006e1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e1e:	f04f 0901 	mov.w	r9, #1
 8006e22:	4623      	mov	r3, r4
 8006e24:	469a      	mov	sl, r3
 8006e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2a:	b10a      	cbz	r2, 8006e30 <_svfiprintf_r+0x60>
 8006e2c:	2a25      	cmp	r2, #37	@ 0x25
 8006e2e:	d1f9      	bne.n	8006e24 <_svfiprintf_r+0x54>
 8006e30:	ebba 0b04 	subs.w	fp, sl, r4
 8006e34:	d00b      	beq.n	8006e4e <_svfiprintf_r+0x7e>
 8006e36:	465b      	mov	r3, fp
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff ff6b 	bl	8006d18 <__ssputs_r>
 8006e42:	3001      	adds	r0, #1
 8006e44:	f000 80a7 	beq.w	8006f96 <_svfiprintf_r+0x1c6>
 8006e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e4a:	445a      	add	r2, fp
 8006e4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 809f 	beq.w	8006f96 <_svfiprintf_r+0x1c6>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e62:	f10a 0a01 	add.w	sl, sl, #1
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e6e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e70:	4654      	mov	r4, sl
 8006e72:	2205      	movs	r2, #5
 8006e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e78:	484e      	ldr	r0, [pc, #312]	@ (8006fb4 <_svfiprintf_r+0x1e4>)
 8006e7a:	f7f9 f9e1 	bl	8000240 <memchr>
 8006e7e:	9a04      	ldr	r2, [sp, #16]
 8006e80:	b9d8      	cbnz	r0, 8006eba <_svfiprintf_r+0xea>
 8006e82:	06d0      	lsls	r0, r2, #27
 8006e84:	bf44      	itt	mi
 8006e86:	2320      	movmi	r3, #32
 8006e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e8c:	0711      	lsls	r1, r2, #28
 8006e8e:	bf44      	itt	mi
 8006e90:	232b      	movmi	r3, #43	@ 0x2b
 8006e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006e96:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e9c:	d015      	beq.n	8006eca <_svfiprintf_r+0xfa>
 8006e9e:	9a07      	ldr	r2, [sp, #28]
 8006ea0:	4654      	mov	r4, sl
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f04f 0c0a 	mov.w	ip, #10
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eae:	3b30      	subs	r3, #48	@ 0x30
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	d94b      	bls.n	8006f4c <_svfiprintf_r+0x17c>
 8006eb4:	b1b0      	cbz	r0, 8006ee4 <_svfiprintf_r+0x114>
 8006eb6:	9207      	str	r2, [sp, #28]
 8006eb8:	e014      	b.n	8006ee4 <_svfiprintf_r+0x114>
 8006eba:	eba0 0308 	sub.w	r3, r0, r8
 8006ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	46a2      	mov	sl, r4
 8006ec8:	e7d2      	b.n	8006e70 <_svfiprintf_r+0xa0>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	1d19      	adds	r1, r3, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	9103      	str	r1, [sp, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfbb      	ittet	lt
 8006ed6:	425b      	neglt	r3, r3
 8006ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8006edc:	9307      	strge	r3, [sp, #28]
 8006ede:	9307      	strlt	r3, [sp, #28]
 8006ee0:	bfb8      	it	lt
 8006ee2:	9204      	strlt	r2, [sp, #16]
 8006ee4:	7823      	ldrb	r3, [r4, #0]
 8006ee6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ee8:	d10a      	bne.n	8006f00 <_svfiprintf_r+0x130>
 8006eea:	7863      	ldrb	r3, [r4, #1]
 8006eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8006eee:	d132      	bne.n	8006f56 <_svfiprintf_r+0x186>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	1d1a      	adds	r2, r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	9203      	str	r2, [sp, #12]
 8006ef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006efc:	3402      	adds	r4, #2
 8006efe:	9305      	str	r3, [sp, #20]
 8006f00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006fc4 <_svfiprintf_r+0x1f4>
 8006f04:	7821      	ldrb	r1, [r4, #0]
 8006f06:	2203      	movs	r2, #3
 8006f08:	4650      	mov	r0, sl
 8006f0a:	f7f9 f999 	bl	8000240 <memchr>
 8006f0e:	b138      	cbz	r0, 8006f20 <_svfiprintf_r+0x150>
 8006f10:	9b04      	ldr	r3, [sp, #16]
 8006f12:	eba0 000a 	sub.w	r0, r0, sl
 8006f16:	2240      	movs	r2, #64	@ 0x40
 8006f18:	4082      	lsls	r2, r0
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	3401      	adds	r4, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f24:	4824      	ldr	r0, [pc, #144]	@ (8006fb8 <_svfiprintf_r+0x1e8>)
 8006f26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f2a:	2206      	movs	r2, #6
 8006f2c:	f7f9 f988 	bl	8000240 <memchr>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d036      	beq.n	8006fa2 <_svfiprintf_r+0x1d2>
 8006f34:	4b21      	ldr	r3, [pc, #132]	@ (8006fbc <_svfiprintf_r+0x1ec>)
 8006f36:	bb1b      	cbnz	r3, 8006f80 <_svfiprintf_r+0x1b0>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	3307      	adds	r3, #7
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	3308      	adds	r3, #8
 8006f42:	9303      	str	r3, [sp, #12]
 8006f44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f46:	4433      	add	r3, r6
 8006f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f4a:	e76a      	b.n	8006e22 <_svfiprintf_r+0x52>
 8006f4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f50:	460c      	mov	r4, r1
 8006f52:	2001      	movs	r0, #1
 8006f54:	e7a8      	b.n	8006ea8 <_svfiprintf_r+0xd8>
 8006f56:	2300      	movs	r3, #0
 8006f58:	3401      	adds	r4, #1
 8006f5a:	9305      	str	r3, [sp, #20]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f04f 0c0a 	mov.w	ip, #10
 8006f62:	4620      	mov	r0, r4
 8006f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f68:	3a30      	subs	r2, #48	@ 0x30
 8006f6a:	2a09      	cmp	r2, #9
 8006f6c:	d903      	bls.n	8006f76 <_svfiprintf_r+0x1a6>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0c6      	beq.n	8006f00 <_svfiprintf_r+0x130>
 8006f72:	9105      	str	r1, [sp, #20]
 8006f74:	e7c4      	b.n	8006f00 <_svfiprintf_r+0x130>
 8006f76:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e7f0      	b.n	8006f62 <_svfiprintf_r+0x192>
 8006f80:	ab03      	add	r3, sp, #12
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	462a      	mov	r2, r5
 8006f86:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc0 <_svfiprintf_r+0x1f0>)
 8006f88:	a904      	add	r1, sp, #16
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7fd ff14 	bl	8004db8 <_printf_float>
 8006f90:	1c42      	adds	r2, r0, #1
 8006f92:	4606      	mov	r6, r0
 8006f94:	d1d6      	bne.n	8006f44 <_svfiprintf_r+0x174>
 8006f96:	89ab      	ldrh	r3, [r5, #12]
 8006f98:	065b      	lsls	r3, r3, #25
 8006f9a:	f53f af2d 	bmi.w	8006df8 <_svfiprintf_r+0x28>
 8006f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fa0:	e72c      	b.n	8006dfc <_svfiprintf_r+0x2c>
 8006fa2:	ab03      	add	r3, sp, #12
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	462a      	mov	r2, r5
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <_svfiprintf_r+0x1f0>)
 8006faa:	a904      	add	r1, sp, #16
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7fe f98b 	bl	80052c8 <_printf_i>
 8006fb2:	e7ed      	b.n	8006f90 <_svfiprintf_r+0x1c0>
 8006fb4:	08007972 	.word	0x08007972
 8006fb8:	0800797c 	.word	0x0800797c
 8006fbc:	08004db9 	.word	0x08004db9
 8006fc0:	08006d19 	.word	0x08006d19
 8006fc4:	08007978 	.word	0x08007978

08006fc8 <__sflush_r>:
 8006fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd0:	0716      	lsls	r6, r2, #28
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	d454      	bmi.n	8007082 <__sflush_r+0xba>
 8006fd8:	684b      	ldr	r3, [r1, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	dc02      	bgt.n	8006fe4 <__sflush_r+0x1c>
 8006fde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dd48      	ble.n	8007076 <__sflush_r+0xae>
 8006fe4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fe6:	2e00      	cmp	r6, #0
 8006fe8:	d045      	beq.n	8007076 <__sflush_r+0xae>
 8006fea:	2300      	movs	r3, #0
 8006fec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ff0:	682f      	ldr	r7, [r5, #0]
 8006ff2:	6a21      	ldr	r1, [r4, #32]
 8006ff4:	602b      	str	r3, [r5, #0]
 8006ff6:	d030      	beq.n	800705a <__sflush_r+0x92>
 8006ff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ffa:	89a3      	ldrh	r3, [r4, #12]
 8006ffc:	0759      	lsls	r1, r3, #29
 8006ffe:	d505      	bpl.n	800700c <__sflush_r+0x44>
 8007000:	6863      	ldr	r3, [r4, #4]
 8007002:	1ad2      	subs	r2, r2, r3
 8007004:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007006:	b10b      	cbz	r3, 800700c <__sflush_r+0x44>
 8007008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	2300      	movs	r3, #0
 800700e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007010:	6a21      	ldr	r1, [r4, #32]
 8007012:	4628      	mov	r0, r5
 8007014:	47b0      	blx	r6
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	d106      	bne.n	800702a <__sflush_r+0x62>
 800701c:	6829      	ldr	r1, [r5, #0]
 800701e:	291d      	cmp	r1, #29
 8007020:	d82b      	bhi.n	800707a <__sflush_r+0xb2>
 8007022:	4a2a      	ldr	r2, [pc, #168]	@ (80070cc <__sflush_r+0x104>)
 8007024:	40ca      	lsrs	r2, r1
 8007026:	07d6      	lsls	r6, r2, #31
 8007028:	d527      	bpl.n	800707a <__sflush_r+0xb2>
 800702a:	2200      	movs	r2, #0
 800702c:	6062      	str	r2, [r4, #4]
 800702e:	04d9      	lsls	r1, r3, #19
 8007030:	6922      	ldr	r2, [r4, #16]
 8007032:	6022      	str	r2, [r4, #0]
 8007034:	d504      	bpl.n	8007040 <__sflush_r+0x78>
 8007036:	1c42      	adds	r2, r0, #1
 8007038:	d101      	bne.n	800703e <__sflush_r+0x76>
 800703a:	682b      	ldr	r3, [r5, #0]
 800703c:	b903      	cbnz	r3, 8007040 <__sflush_r+0x78>
 800703e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007042:	602f      	str	r7, [r5, #0]
 8007044:	b1b9      	cbz	r1, 8007076 <__sflush_r+0xae>
 8007046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800704a:	4299      	cmp	r1, r3
 800704c:	d002      	beq.n	8007054 <__sflush_r+0x8c>
 800704e:	4628      	mov	r0, r5
 8007050:	f7ff f9e8 	bl	8006424 <_free_r>
 8007054:	2300      	movs	r3, #0
 8007056:	6363      	str	r3, [r4, #52]	@ 0x34
 8007058:	e00d      	b.n	8007076 <__sflush_r+0xae>
 800705a:	2301      	movs	r3, #1
 800705c:	4628      	mov	r0, r5
 800705e:	47b0      	blx	r6
 8007060:	4602      	mov	r2, r0
 8007062:	1c50      	adds	r0, r2, #1
 8007064:	d1c9      	bne.n	8006ffa <__sflush_r+0x32>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0c6      	beq.n	8006ffa <__sflush_r+0x32>
 800706c:	2b1d      	cmp	r3, #29
 800706e:	d001      	beq.n	8007074 <__sflush_r+0xac>
 8007070:	2b16      	cmp	r3, #22
 8007072:	d11e      	bne.n	80070b2 <__sflush_r+0xea>
 8007074:	602f      	str	r7, [r5, #0]
 8007076:	2000      	movs	r0, #0
 8007078:	e022      	b.n	80070c0 <__sflush_r+0xf8>
 800707a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800707e:	b21b      	sxth	r3, r3
 8007080:	e01b      	b.n	80070ba <__sflush_r+0xf2>
 8007082:	690f      	ldr	r7, [r1, #16]
 8007084:	2f00      	cmp	r7, #0
 8007086:	d0f6      	beq.n	8007076 <__sflush_r+0xae>
 8007088:	0793      	lsls	r3, r2, #30
 800708a:	680e      	ldr	r6, [r1, #0]
 800708c:	bf08      	it	eq
 800708e:	694b      	ldreq	r3, [r1, #20]
 8007090:	600f      	str	r7, [r1, #0]
 8007092:	bf18      	it	ne
 8007094:	2300      	movne	r3, #0
 8007096:	eba6 0807 	sub.w	r8, r6, r7
 800709a:	608b      	str	r3, [r1, #8]
 800709c:	f1b8 0f00 	cmp.w	r8, #0
 80070a0:	dde9      	ble.n	8007076 <__sflush_r+0xae>
 80070a2:	6a21      	ldr	r1, [r4, #32]
 80070a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80070a6:	4643      	mov	r3, r8
 80070a8:	463a      	mov	r2, r7
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b0      	blx	r6
 80070ae:	2800      	cmp	r0, #0
 80070b0:	dc08      	bgt.n	80070c4 <__sflush_r+0xfc>
 80070b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ba:	81a3      	strh	r3, [r4, #12]
 80070bc:	f04f 30ff 	mov.w	r0, #4294967295
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	4407      	add	r7, r0
 80070c6:	eba8 0800 	sub.w	r8, r8, r0
 80070ca:	e7e7      	b.n	800709c <__sflush_r+0xd4>
 80070cc:	20400001 	.word	0x20400001

080070d0 <_fflush_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	690b      	ldr	r3, [r1, #16]
 80070d4:	4605      	mov	r5, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	b913      	cbnz	r3, 80070e0 <_fflush_r+0x10>
 80070da:	2500      	movs	r5, #0
 80070dc:	4628      	mov	r0, r5
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	b118      	cbz	r0, 80070ea <_fflush_r+0x1a>
 80070e2:	6a03      	ldr	r3, [r0, #32]
 80070e4:	b90b      	cbnz	r3, 80070ea <_fflush_r+0x1a>
 80070e6:	f7fe fa99 	bl	800561c <__sinit>
 80070ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d0f3      	beq.n	80070da <_fflush_r+0xa>
 80070f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80070f4:	07d0      	lsls	r0, r2, #31
 80070f6:	d404      	bmi.n	8007102 <_fflush_r+0x32>
 80070f8:	0599      	lsls	r1, r3, #22
 80070fa:	d402      	bmi.n	8007102 <_fflush_r+0x32>
 80070fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070fe:	f7fe fba6 	bl	800584e <__retarget_lock_acquire_recursive>
 8007102:	4628      	mov	r0, r5
 8007104:	4621      	mov	r1, r4
 8007106:	f7ff ff5f 	bl	8006fc8 <__sflush_r>
 800710a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800710c:	07da      	lsls	r2, r3, #31
 800710e:	4605      	mov	r5, r0
 8007110:	d4e4      	bmi.n	80070dc <_fflush_r+0xc>
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	059b      	lsls	r3, r3, #22
 8007116:	d4e1      	bmi.n	80070dc <_fflush_r+0xc>
 8007118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800711a:	f7fe fb99 	bl	8005850 <__retarget_lock_release_recursive>
 800711e:	e7dd      	b.n	80070dc <_fflush_r+0xc>

08007120 <memmove>:
 8007120:	4288      	cmp	r0, r1
 8007122:	b510      	push	{r4, lr}
 8007124:	eb01 0402 	add.w	r4, r1, r2
 8007128:	d902      	bls.n	8007130 <memmove+0x10>
 800712a:	4284      	cmp	r4, r0
 800712c:	4623      	mov	r3, r4
 800712e:	d807      	bhi.n	8007140 <memmove+0x20>
 8007130:	1e43      	subs	r3, r0, #1
 8007132:	42a1      	cmp	r1, r4
 8007134:	d008      	beq.n	8007148 <memmove+0x28>
 8007136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800713a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800713e:	e7f8      	b.n	8007132 <memmove+0x12>
 8007140:	4402      	add	r2, r0
 8007142:	4601      	mov	r1, r0
 8007144:	428a      	cmp	r2, r1
 8007146:	d100      	bne.n	800714a <memmove+0x2a>
 8007148:	bd10      	pop	{r4, pc}
 800714a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800714e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007152:	e7f7      	b.n	8007144 <memmove+0x24>

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	@ (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7f9 fe60 	bl	8000e24 <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000b14 	.word	0x20000b14

08007174 <memcpy>:
 8007174:	440a      	add	r2, r1
 8007176:	4291      	cmp	r1, r2
 8007178:	f100 33ff 	add.w	r3, r0, #4294967295
 800717c:	d100      	bne.n	8007180 <memcpy+0xc>
 800717e:	4770      	bx	lr
 8007180:	b510      	push	{r4, lr}
 8007182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007186:	f803 4f01 	strb.w	r4, [r3, #1]!
 800718a:	4291      	cmp	r1, r2
 800718c:	d1f9      	bne.n	8007182 <memcpy+0xe>
 800718e:	bd10      	pop	{r4, pc}

08007190 <__assert_func>:
 8007190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007192:	4614      	mov	r4, r2
 8007194:	461a      	mov	r2, r3
 8007196:	4b09      	ldr	r3, [pc, #36]	@ (80071bc <__assert_func+0x2c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4605      	mov	r5, r0
 800719c:	68d8      	ldr	r0, [r3, #12]
 800719e:	b14c      	cbz	r4, 80071b4 <__assert_func+0x24>
 80071a0:	4b07      	ldr	r3, [pc, #28]	@ (80071c0 <__assert_func+0x30>)
 80071a2:	9100      	str	r1, [sp, #0]
 80071a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071a8:	4906      	ldr	r1, [pc, #24]	@ (80071c4 <__assert_func+0x34>)
 80071aa:	462b      	mov	r3, r5
 80071ac:	f000 f870 	bl	8007290 <fiprintf>
 80071b0:	f000 f880 	bl	80072b4 <abort>
 80071b4:	4b04      	ldr	r3, [pc, #16]	@ (80071c8 <__assert_func+0x38>)
 80071b6:	461c      	mov	r4, r3
 80071b8:	e7f3      	b.n	80071a2 <__assert_func+0x12>
 80071ba:	bf00      	nop
 80071bc:	20000018 	.word	0x20000018
 80071c0:	0800798d 	.word	0x0800798d
 80071c4:	0800799a 	.word	0x0800799a
 80071c8:	080079c8 	.word	0x080079c8

080071cc <_calloc_r>:
 80071cc:	b570      	push	{r4, r5, r6, lr}
 80071ce:	fba1 5402 	umull	r5, r4, r1, r2
 80071d2:	b934      	cbnz	r4, 80071e2 <_calloc_r+0x16>
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7ff f999 	bl	800650c <_malloc_r>
 80071da:	4606      	mov	r6, r0
 80071dc:	b928      	cbnz	r0, 80071ea <_calloc_r+0x1e>
 80071de:	4630      	mov	r0, r6
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	220c      	movs	r2, #12
 80071e4:	6002      	str	r2, [r0, #0]
 80071e6:	2600      	movs	r6, #0
 80071e8:	e7f9      	b.n	80071de <_calloc_r+0x12>
 80071ea:	462a      	mov	r2, r5
 80071ec:	4621      	mov	r1, r4
 80071ee:	f7fe fab0 	bl	8005752 <memset>
 80071f2:	e7f4      	b.n	80071de <_calloc_r+0x12>

080071f4 <__ascii_mbtowc>:
 80071f4:	b082      	sub	sp, #8
 80071f6:	b901      	cbnz	r1, 80071fa <__ascii_mbtowc+0x6>
 80071f8:	a901      	add	r1, sp, #4
 80071fa:	b142      	cbz	r2, 800720e <__ascii_mbtowc+0x1a>
 80071fc:	b14b      	cbz	r3, 8007212 <__ascii_mbtowc+0x1e>
 80071fe:	7813      	ldrb	r3, [r2, #0]
 8007200:	600b      	str	r3, [r1, #0]
 8007202:	7812      	ldrb	r2, [r2, #0]
 8007204:	1e10      	subs	r0, r2, #0
 8007206:	bf18      	it	ne
 8007208:	2001      	movne	r0, #1
 800720a:	b002      	add	sp, #8
 800720c:	4770      	bx	lr
 800720e:	4610      	mov	r0, r2
 8007210:	e7fb      	b.n	800720a <__ascii_mbtowc+0x16>
 8007212:	f06f 0001 	mvn.w	r0, #1
 8007216:	e7f8      	b.n	800720a <__ascii_mbtowc+0x16>

08007218 <_realloc_r>:
 8007218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800721c:	4607      	mov	r7, r0
 800721e:	4614      	mov	r4, r2
 8007220:	460d      	mov	r5, r1
 8007222:	b921      	cbnz	r1, 800722e <_realloc_r+0x16>
 8007224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007228:	4611      	mov	r1, r2
 800722a:	f7ff b96f 	b.w	800650c <_malloc_r>
 800722e:	b92a      	cbnz	r2, 800723c <_realloc_r+0x24>
 8007230:	f7ff f8f8 	bl	8006424 <_free_r>
 8007234:	4625      	mov	r5, r4
 8007236:	4628      	mov	r0, r5
 8007238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723c:	f000 f841 	bl	80072c2 <_malloc_usable_size_r>
 8007240:	4284      	cmp	r4, r0
 8007242:	4606      	mov	r6, r0
 8007244:	d802      	bhi.n	800724c <_realloc_r+0x34>
 8007246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800724a:	d8f4      	bhi.n	8007236 <_realloc_r+0x1e>
 800724c:	4621      	mov	r1, r4
 800724e:	4638      	mov	r0, r7
 8007250:	f7ff f95c 	bl	800650c <_malloc_r>
 8007254:	4680      	mov	r8, r0
 8007256:	b908      	cbnz	r0, 800725c <_realloc_r+0x44>
 8007258:	4645      	mov	r5, r8
 800725a:	e7ec      	b.n	8007236 <_realloc_r+0x1e>
 800725c:	42b4      	cmp	r4, r6
 800725e:	4622      	mov	r2, r4
 8007260:	4629      	mov	r1, r5
 8007262:	bf28      	it	cs
 8007264:	4632      	movcs	r2, r6
 8007266:	f7ff ff85 	bl	8007174 <memcpy>
 800726a:	4629      	mov	r1, r5
 800726c:	4638      	mov	r0, r7
 800726e:	f7ff f8d9 	bl	8006424 <_free_r>
 8007272:	e7f1      	b.n	8007258 <_realloc_r+0x40>

08007274 <__ascii_wctomb>:
 8007274:	4603      	mov	r3, r0
 8007276:	4608      	mov	r0, r1
 8007278:	b141      	cbz	r1, 800728c <__ascii_wctomb+0x18>
 800727a:	2aff      	cmp	r2, #255	@ 0xff
 800727c:	d904      	bls.n	8007288 <__ascii_wctomb+0x14>
 800727e:	228a      	movs	r2, #138	@ 0x8a
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	4770      	bx	lr
 8007288:	700a      	strb	r2, [r1, #0]
 800728a:	2001      	movs	r0, #1
 800728c:	4770      	bx	lr
	...

08007290 <fiprintf>:
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b503      	push	{r0, r1, lr}
 8007294:	4601      	mov	r1, r0
 8007296:	ab03      	add	r3, sp, #12
 8007298:	4805      	ldr	r0, [pc, #20]	@ (80072b0 <fiprintf+0x20>)
 800729a:	f853 2b04 	ldr.w	r2, [r3], #4
 800729e:	6800      	ldr	r0, [r0, #0]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	f000 f83f 	bl	8007324 <_vfiprintf_r>
 80072a6:	b002      	add	sp, #8
 80072a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ac:	b003      	add	sp, #12
 80072ae:	4770      	bx	lr
 80072b0:	20000018 	.word	0x20000018

080072b4 <abort>:
 80072b4:	b508      	push	{r3, lr}
 80072b6:	2006      	movs	r0, #6
 80072b8:	f000 fa08 	bl	80076cc <raise>
 80072bc:	2001      	movs	r0, #1
 80072be:	f7f9 fd38 	bl	8000d32 <_exit>

080072c2 <_malloc_usable_size_r>:
 80072c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c6:	1f18      	subs	r0, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bfbc      	itt	lt
 80072cc:	580b      	ldrlt	r3, [r1, r0]
 80072ce:	18c0      	addlt	r0, r0, r3
 80072d0:	4770      	bx	lr

080072d2 <__sfputc_r>:
 80072d2:	6893      	ldr	r3, [r2, #8]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	b410      	push	{r4}
 80072da:	6093      	str	r3, [r2, #8]
 80072dc:	da08      	bge.n	80072f0 <__sfputc_r+0x1e>
 80072de:	6994      	ldr	r4, [r2, #24]
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	db01      	blt.n	80072e8 <__sfputc_r+0x16>
 80072e4:	290a      	cmp	r1, #10
 80072e6:	d103      	bne.n	80072f0 <__sfputc_r+0x1e>
 80072e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072ec:	f000 b932 	b.w	8007554 <__swbuf_r>
 80072f0:	6813      	ldr	r3, [r2, #0]
 80072f2:	1c58      	adds	r0, r3, #1
 80072f4:	6010      	str	r0, [r2, #0]
 80072f6:	7019      	strb	r1, [r3, #0]
 80072f8:	4608      	mov	r0, r1
 80072fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <__sfputs_r>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	4614      	mov	r4, r2
 8007308:	18d5      	adds	r5, r2, r3
 800730a:	42ac      	cmp	r4, r5
 800730c:	d101      	bne.n	8007312 <__sfputs_r+0x12>
 800730e:	2000      	movs	r0, #0
 8007310:	e007      	b.n	8007322 <__sfputs_r+0x22>
 8007312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007316:	463a      	mov	r2, r7
 8007318:	4630      	mov	r0, r6
 800731a:	f7ff ffda 	bl	80072d2 <__sfputc_r>
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	d1f3      	bne.n	800730a <__sfputs_r+0xa>
 8007322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007324 <_vfiprintf_r>:
 8007324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007328:	460d      	mov	r5, r1
 800732a:	b09d      	sub	sp, #116	@ 0x74
 800732c:	4614      	mov	r4, r2
 800732e:	4698      	mov	r8, r3
 8007330:	4606      	mov	r6, r0
 8007332:	b118      	cbz	r0, 800733c <_vfiprintf_r+0x18>
 8007334:	6a03      	ldr	r3, [r0, #32]
 8007336:	b90b      	cbnz	r3, 800733c <_vfiprintf_r+0x18>
 8007338:	f7fe f970 	bl	800561c <__sinit>
 800733c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800733e:	07d9      	lsls	r1, r3, #31
 8007340:	d405      	bmi.n	800734e <_vfiprintf_r+0x2a>
 8007342:	89ab      	ldrh	r3, [r5, #12]
 8007344:	059a      	lsls	r2, r3, #22
 8007346:	d402      	bmi.n	800734e <_vfiprintf_r+0x2a>
 8007348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800734a:	f7fe fa80 	bl	800584e <__retarget_lock_acquire_recursive>
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	071b      	lsls	r3, r3, #28
 8007352:	d501      	bpl.n	8007358 <_vfiprintf_r+0x34>
 8007354:	692b      	ldr	r3, [r5, #16]
 8007356:	b99b      	cbnz	r3, 8007380 <_vfiprintf_r+0x5c>
 8007358:	4629      	mov	r1, r5
 800735a:	4630      	mov	r0, r6
 800735c:	f000 f938 	bl	80075d0 <__swsetup_r>
 8007360:	b170      	cbz	r0, 8007380 <_vfiprintf_r+0x5c>
 8007362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007364:	07dc      	lsls	r4, r3, #31
 8007366:	d504      	bpl.n	8007372 <_vfiprintf_r+0x4e>
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	b01d      	add	sp, #116	@ 0x74
 800736e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	0598      	lsls	r0, r3, #22
 8007376:	d4f7      	bmi.n	8007368 <_vfiprintf_r+0x44>
 8007378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800737a:	f7fe fa69 	bl	8005850 <__retarget_lock_release_recursive>
 800737e:	e7f3      	b.n	8007368 <_vfiprintf_r+0x44>
 8007380:	2300      	movs	r3, #0
 8007382:	9309      	str	r3, [sp, #36]	@ 0x24
 8007384:	2320      	movs	r3, #32
 8007386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800738a:	f8cd 800c 	str.w	r8, [sp, #12]
 800738e:	2330      	movs	r3, #48	@ 0x30
 8007390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007540 <_vfiprintf_r+0x21c>
 8007394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007398:	f04f 0901 	mov.w	r9, #1
 800739c:	4623      	mov	r3, r4
 800739e:	469a      	mov	sl, r3
 80073a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a4:	b10a      	cbz	r2, 80073aa <_vfiprintf_r+0x86>
 80073a6:	2a25      	cmp	r2, #37	@ 0x25
 80073a8:	d1f9      	bne.n	800739e <_vfiprintf_r+0x7a>
 80073aa:	ebba 0b04 	subs.w	fp, sl, r4
 80073ae:	d00b      	beq.n	80073c8 <_vfiprintf_r+0xa4>
 80073b0:	465b      	mov	r3, fp
 80073b2:	4622      	mov	r2, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	4630      	mov	r0, r6
 80073b8:	f7ff ffa2 	bl	8007300 <__sfputs_r>
 80073bc:	3001      	adds	r0, #1
 80073be:	f000 80a7 	beq.w	8007510 <_vfiprintf_r+0x1ec>
 80073c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c4:	445a      	add	r2, fp
 80073c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c8:	f89a 3000 	ldrb.w	r3, [sl]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 809f 	beq.w	8007510 <_vfiprintf_r+0x1ec>
 80073d2:	2300      	movs	r3, #0
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295
 80073d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073dc:	f10a 0a01 	add.w	sl, sl, #1
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	9307      	str	r3, [sp, #28]
 80073e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80073ea:	4654      	mov	r4, sl
 80073ec:	2205      	movs	r2, #5
 80073ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f2:	4853      	ldr	r0, [pc, #332]	@ (8007540 <_vfiprintf_r+0x21c>)
 80073f4:	f7f8 ff24 	bl	8000240 <memchr>
 80073f8:	9a04      	ldr	r2, [sp, #16]
 80073fa:	b9d8      	cbnz	r0, 8007434 <_vfiprintf_r+0x110>
 80073fc:	06d1      	lsls	r1, r2, #27
 80073fe:	bf44      	itt	mi
 8007400:	2320      	movmi	r3, #32
 8007402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007406:	0713      	lsls	r3, r2, #28
 8007408:	bf44      	itt	mi
 800740a:	232b      	movmi	r3, #43	@ 0x2b
 800740c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007410:	f89a 3000 	ldrb.w	r3, [sl]
 8007414:	2b2a      	cmp	r3, #42	@ 0x2a
 8007416:	d015      	beq.n	8007444 <_vfiprintf_r+0x120>
 8007418:	9a07      	ldr	r2, [sp, #28]
 800741a:	4654      	mov	r4, sl
 800741c:	2000      	movs	r0, #0
 800741e:	f04f 0c0a 	mov.w	ip, #10
 8007422:	4621      	mov	r1, r4
 8007424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007428:	3b30      	subs	r3, #48	@ 0x30
 800742a:	2b09      	cmp	r3, #9
 800742c:	d94b      	bls.n	80074c6 <_vfiprintf_r+0x1a2>
 800742e:	b1b0      	cbz	r0, 800745e <_vfiprintf_r+0x13a>
 8007430:	9207      	str	r2, [sp, #28]
 8007432:	e014      	b.n	800745e <_vfiprintf_r+0x13a>
 8007434:	eba0 0308 	sub.w	r3, r0, r8
 8007438:	fa09 f303 	lsl.w	r3, r9, r3
 800743c:	4313      	orrs	r3, r2
 800743e:	9304      	str	r3, [sp, #16]
 8007440:	46a2      	mov	sl, r4
 8007442:	e7d2      	b.n	80073ea <_vfiprintf_r+0xc6>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	1d19      	adds	r1, r3, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	9103      	str	r1, [sp, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	bfbb      	ittet	lt
 8007450:	425b      	neglt	r3, r3
 8007452:	f042 0202 	orrlt.w	r2, r2, #2
 8007456:	9307      	strge	r3, [sp, #28]
 8007458:	9307      	strlt	r3, [sp, #28]
 800745a:	bfb8      	it	lt
 800745c:	9204      	strlt	r2, [sp, #16]
 800745e:	7823      	ldrb	r3, [r4, #0]
 8007460:	2b2e      	cmp	r3, #46	@ 0x2e
 8007462:	d10a      	bne.n	800747a <_vfiprintf_r+0x156>
 8007464:	7863      	ldrb	r3, [r4, #1]
 8007466:	2b2a      	cmp	r3, #42	@ 0x2a
 8007468:	d132      	bne.n	80074d0 <_vfiprintf_r+0x1ac>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	1d1a      	adds	r2, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9203      	str	r2, [sp, #12]
 8007472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007476:	3402      	adds	r4, #2
 8007478:	9305      	str	r3, [sp, #20]
 800747a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007550 <_vfiprintf_r+0x22c>
 800747e:	7821      	ldrb	r1, [r4, #0]
 8007480:	2203      	movs	r2, #3
 8007482:	4650      	mov	r0, sl
 8007484:	f7f8 fedc 	bl	8000240 <memchr>
 8007488:	b138      	cbz	r0, 800749a <_vfiprintf_r+0x176>
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	eba0 000a 	sub.w	r0, r0, sl
 8007490:	2240      	movs	r2, #64	@ 0x40
 8007492:	4082      	lsls	r2, r0
 8007494:	4313      	orrs	r3, r2
 8007496:	3401      	adds	r4, #1
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749e:	4829      	ldr	r0, [pc, #164]	@ (8007544 <_vfiprintf_r+0x220>)
 80074a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074a4:	2206      	movs	r2, #6
 80074a6:	f7f8 fecb 	bl	8000240 <memchr>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d03f      	beq.n	800752e <_vfiprintf_r+0x20a>
 80074ae:	4b26      	ldr	r3, [pc, #152]	@ (8007548 <_vfiprintf_r+0x224>)
 80074b0:	bb1b      	cbnz	r3, 80074fa <_vfiprintf_r+0x1d6>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	3307      	adds	r3, #7
 80074b6:	f023 0307 	bic.w	r3, r3, #7
 80074ba:	3308      	adds	r3, #8
 80074bc:	9303      	str	r3, [sp, #12]
 80074be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c0:	443b      	add	r3, r7
 80074c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c4:	e76a      	b.n	800739c <_vfiprintf_r+0x78>
 80074c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ca:	460c      	mov	r4, r1
 80074cc:	2001      	movs	r0, #1
 80074ce:	e7a8      	b.n	8007422 <_vfiprintf_r+0xfe>
 80074d0:	2300      	movs	r3, #0
 80074d2:	3401      	adds	r4, #1
 80074d4:	9305      	str	r3, [sp, #20]
 80074d6:	4619      	mov	r1, r3
 80074d8:	f04f 0c0a 	mov.w	ip, #10
 80074dc:	4620      	mov	r0, r4
 80074de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e2:	3a30      	subs	r2, #48	@ 0x30
 80074e4:	2a09      	cmp	r2, #9
 80074e6:	d903      	bls.n	80074f0 <_vfiprintf_r+0x1cc>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0c6      	beq.n	800747a <_vfiprintf_r+0x156>
 80074ec:	9105      	str	r1, [sp, #20]
 80074ee:	e7c4      	b.n	800747a <_vfiprintf_r+0x156>
 80074f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f4:	4604      	mov	r4, r0
 80074f6:	2301      	movs	r3, #1
 80074f8:	e7f0      	b.n	80074dc <_vfiprintf_r+0x1b8>
 80074fa:	ab03      	add	r3, sp, #12
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	462a      	mov	r2, r5
 8007500:	4b12      	ldr	r3, [pc, #72]	@ (800754c <_vfiprintf_r+0x228>)
 8007502:	a904      	add	r1, sp, #16
 8007504:	4630      	mov	r0, r6
 8007506:	f7fd fc57 	bl	8004db8 <_printf_float>
 800750a:	4607      	mov	r7, r0
 800750c:	1c78      	adds	r0, r7, #1
 800750e:	d1d6      	bne.n	80074be <_vfiprintf_r+0x19a>
 8007510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007512:	07d9      	lsls	r1, r3, #31
 8007514:	d405      	bmi.n	8007522 <_vfiprintf_r+0x1fe>
 8007516:	89ab      	ldrh	r3, [r5, #12]
 8007518:	059a      	lsls	r2, r3, #22
 800751a:	d402      	bmi.n	8007522 <_vfiprintf_r+0x1fe>
 800751c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800751e:	f7fe f997 	bl	8005850 <__retarget_lock_release_recursive>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	065b      	lsls	r3, r3, #25
 8007526:	f53f af1f 	bmi.w	8007368 <_vfiprintf_r+0x44>
 800752a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800752c:	e71e      	b.n	800736c <_vfiprintf_r+0x48>
 800752e:	ab03      	add	r3, sp, #12
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	462a      	mov	r2, r5
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <_vfiprintf_r+0x228>)
 8007536:	a904      	add	r1, sp, #16
 8007538:	4630      	mov	r0, r6
 800753a:	f7fd fec5 	bl	80052c8 <_printf_i>
 800753e:	e7e4      	b.n	800750a <_vfiprintf_r+0x1e6>
 8007540:	08007972 	.word	0x08007972
 8007544:	0800797c 	.word	0x0800797c
 8007548:	08004db9 	.word	0x08004db9
 800754c:	08007301 	.word	0x08007301
 8007550:	08007978 	.word	0x08007978

08007554 <__swbuf_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	460e      	mov	r6, r1
 8007558:	4614      	mov	r4, r2
 800755a:	4605      	mov	r5, r0
 800755c:	b118      	cbz	r0, 8007566 <__swbuf_r+0x12>
 800755e:	6a03      	ldr	r3, [r0, #32]
 8007560:	b90b      	cbnz	r3, 8007566 <__swbuf_r+0x12>
 8007562:	f7fe f85b 	bl	800561c <__sinit>
 8007566:	69a3      	ldr	r3, [r4, #24]
 8007568:	60a3      	str	r3, [r4, #8]
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	071a      	lsls	r2, r3, #28
 800756e:	d501      	bpl.n	8007574 <__swbuf_r+0x20>
 8007570:	6923      	ldr	r3, [r4, #16]
 8007572:	b943      	cbnz	r3, 8007586 <__swbuf_r+0x32>
 8007574:	4621      	mov	r1, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f82a 	bl	80075d0 <__swsetup_r>
 800757c:	b118      	cbz	r0, 8007586 <__swbuf_r+0x32>
 800757e:	f04f 37ff 	mov.w	r7, #4294967295
 8007582:	4638      	mov	r0, r7
 8007584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	1a98      	subs	r0, r3, r2
 800758c:	6963      	ldr	r3, [r4, #20]
 800758e:	b2f6      	uxtb	r6, r6
 8007590:	4283      	cmp	r3, r0
 8007592:	4637      	mov	r7, r6
 8007594:	dc05      	bgt.n	80075a2 <__swbuf_r+0x4e>
 8007596:	4621      	mov	r1, r4
 8007598:	4628      	mov	r0, r5
 800759a:	f7ff fd99 	bl	80070d0 <_fflush_r>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d1ed      	bne.n	800757e <__swbuf_r+0x2a>
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	60a3      	str	r3, [r4, #8]
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	701e      	strb	r6, [r3, #0]
 80075b0:	6962      	ldr	r2, [r4, #20]
 80075b2:	1c43      	adds	r3, r0, #1
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d004      	beq.n	80075c2 <__swbuf_r+0x6e>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	07db      	lsls	r3, r3, #31
 80075bc:	d5e1      	bpl.n	8007582 <__swbuf_r+0x2e>
 80075be:	2e0a      	cmp	r6, #10
 80075c0:	d1df      	bne.n	8007582 <__swbuf_r+0x2e>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	f7ff fd83 	bl	80070d0 <_fflush_r>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0d9      	beq.n	8007582 <__swbuf_r+0x2e>
 80075ce:	e7d6      	b.n	800757e <__swbuf_r+0x2a>

080075d0 <__swsetup_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4b29      	ldr	r3, [pc, #164]	@ (8007678 <__swsetup_r+0xa8>)
 80075d4:	4605      	mov	r5, r0
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	460c      	mov	r4, r1
 80075da:	b118      	cbz	r0, 80075e4 <__swsetup_r+0x14>
 80075dc:	6a03      	ldr	r3, [r0, #32]
 80075de:	b90b      	cbnz	r3, 80075e4 <__swsetup_r+0x14>
 80075e0:	f7fe f81c 	bl	800561c <__sinit>
 80075e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e8:	0719      	lsls	r1, r3, #28
 80075ea:	d422      	bmi.n	8007632 <__swsetup_r+0x62>
 80075ec:	06da      	lsls	r2, r3, #27
 80075ee:	d407      	bmi.n	8007600 <__swsetup_r+0x30>
 80075f0:	2209      	movs	r2, #9
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	e033      	b.n	8007668 <__swsetup_r+0x98>
 8007600:	0758      	lsls	r0, r3, #29
 8007602:	d512      	bpl.n	800762a <__swsetup_r+0x5a>
 8007604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007606:	b141      	cbz	r1, 800761a <__swsetup_r+0x4a>
 8007608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__swsetup_r+0x46>
 8007610:	4628      	mov	r0, r5
 8007612:	f7fe ff07 	bl	8006424 <_free_r>
 8007616:	2300      	movs	r3, #0
 8007618:	6363      	str	r3, [r4, #52]	@ 0x34
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	2300      	movs	r3, #0
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f043 0308 	orr.w	r3, r3, #8
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	b94b      	cbnz	r3, 800764a <__swsetup_r+0x7a>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800763c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007640:	d003      	beq.n	800764a <__swsetup_r+0x7a>
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f883 	bl	8007750 <__smakebuf_r>
 800764a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764e:	f013 0201 	ands.w	r2, r3, #1
 8007652:	d00a      	beq.n	800766a <__swsetup_r+0x9a>
 8007654:	2200      	movs	r2, #0
 8007656:	60a2      	str	r2, [r4, #8]
 8007658:	6962      	ldr	r2, [r4, #20]
 800765a:	4252      	negs	r2, r2
 800765c:	61a2      	str	r2, [r4, #24]
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	b942      	cbnz	r2, 8007674 <__swsetup_r+0xa4>
 8007662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007666:	d1c5      	bne.n	80075f4 <__swsetup_r+0x24>
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	0799      	lsls	r1, r3, #30
 800766c:	bf58      	it	pl
 800766e:	6962      	ldrpl	r2, [r4, #20]
 8007670:	60a2      	str	r2, [r4, #8]
 8007672:	e7f4      	b.n	800765e <__swsetup_r+0x8e>
 8007674:	2000      	movs	r0, #0
 8007676:	e7f7      	b.n	8007668 <__swsetup_r+0x98>
 8007678:	20000018 	.word	0x20000018

0800767c <_raise_r>:
 800767c:	291f      	cmp	r1, #31
 800767e:	b538      	push	{r3, r4, r5, lr}
 8007680:	4605      	mov	r5, r0
 8007682:	460c      	mov	r4, r1
 8007684:	d904      	bls.n	8007690 <_raise_r+0x14>
 8007686:	2316      	movs	r3, #22
 8007688:	6003      	str	r3, [r0, #0]
 800768a:	f04f 30ff 	mov.w	r0, #4294967295
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007692:	b112      	cbz	r2, 800769a <_raise_r+0x1e>
 8007694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007698:	b94b      	cbnz	r3, 80076ae <_raise_r+0x32>
 800769a:	4628      	mov	r0, r5
 800769c:	f000 f830 	bl	8007700 <_getpid_r>
 80076a0:	4622      	mov	r2, r4
 80076a2:	4601      	mov	r1, r0
 80076a4:	4628      	mov	r0, r5
 80076a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076aa:	f000 b817 	b.w	80076dc <_kill_r>
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d00a      	beq.n	80076c8 <_raise_r+0x4c>
 80076b2:	1c59      	adds	r1, r3, #1
 80076b4:	d103      	bne.n	80076be <_raise_r+0x42>
 80076b6:	2316      	movs	r3, #22
 80076b8:	6003      	str	r3, [r0, #0]
 80076ba:	2001      	movs	r0, #1
 80076bc:	e7e7      	b.n	800768e <_raise_r+0x12>
 80076be:	2100      	movs	r1, #0
 80076c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076c4:	4620      	mov	r0, r4
 80076c6:	4798      	blx	r3
 80076c8:	2000      	movs	r0, #0
 80076ca:	e7e0      	b.n	800768e <_raise_r+0x12>

080076cc <raise>:
 80076cc:	4b02      	ldr	r3, [pc, #8]	@ (80076d8 <raise+0xc>)
 80076ce:	4601      	mov	r1, r0
 80076d0:	6818      	ldr	r0, [r3, #0]
 80076d2:	f7ff bfd3 	b.w	800767c <_raise_r>
 80076d6:	bf00      	nop
 80076d8:	20000018 	.word	0x20000018

080076dc <_kill_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4d07      	ldr	r5, [pc, #28]	@ (80076fc <_kill_r+0x20>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4604      	mov	r4, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	4611      	mov	r1, r2
 80076e8:	602b      	str	r3, [r5, #0]
 80076ea:	f7f9 fb12 	bl	8000d12 <_kill>
 80076ee:	1c43      	adds	r3, r0, #1
 80076f0:	d102      	bne.n	80076f8 <_kill_r+0x1c>
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	b103      	cbz	r3, 80076f8 <_kill_r+0x1c>
 80076f6:	6023      	str	r3, [r4, #0]
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	20000b14 	.word	0x20000b14

08007700 <_getpid_r>:
 8007700:	f7f9 baff 	b.w	8000d02 <_getpid>

08007704 <__swhatbuf_r>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	460c      	mov	r4, r1
 8007708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800770c:	2900      	cmp	r1, #0
 800770e:	b096      	sub	sp, #88	@ 0x58
 8007710:	4615      	mov	r5, r2
 8007712:	461e      	mov	r6, r3
 8007714:	da0d      	bge.n	8007732 <__swhatbuf_r+0x2e>
 8007716:	89a3      	ldrh	r3, [r4, #12]
 8007718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800771c:	f04f 0100 	mov.w	r1, #0
 8007720:	bf14      	ite	ne
 8007722:	2340      	movne	r3, #64	@ 0x40
 8007724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007728:	2000      	movs	r0, #0
 800772a:	6031      	str	r1, [r6, #0]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	b016      	add	sp, #88	@ 0x58
 8007730:	bd70      	pop	{r4, r5, r6, pc}
 8007732:	466a      	mov	r2, sp
 8007734:	f000 f848 	bl	80077c8 <_fstat_r>
 8007738:	2800      	cmp	r0, #0
 800773a:	dbec      	blt.n	8007716 <__swhatbuf_r+0x12>
 800773c:	9901      	ldr	r1, [sp, #4]
 800773e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007746:	4259      	negs	r1, r3
 8007748:	4159      	adcs	r1, r3
 800774a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800774e:	e7eb      	b.n	8007728 <__swhatbuf_r+0x24>

08007750 <__smakebuf_r>:
 8007750:	898b      	ldrh	r3, [r1, #12]
 8007752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007754:	079d      	lsls	r5, r3, #30
 8007756:	4606      	mov	r6, r0
 8007758:	460c      	mov	r4, r1
 800775a:	d507      	bpl.n	800776c <__smakebuf_r+0x1c>
 800775c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	2301      	movs	r3, #1
 8007766:	6163      	str	r3, [r4, #20]
 8007768:	b003      	add	sp, #12
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	ab01      	add	r3, sp, #4
 800776e:	466a      	mov	r2, sp
 8007770:	f7ff ffc8 	bl	8007704 <__swhatbuf_r>
 8007774:	9f00      	ldr	r7, [sp, #0]
 8007776:	4605      	mov	r5, r0
 8007778:	4639      	mov	r1, r7
 800777a:	4630      	mov	r0, r6
 800777c:	f7fe fec6 	bl	800650c <_malloc_r>
 8007780:	b948      	cbnz	r0, 8007796 <__smakebuf_r+0x46>
 8007782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007786:	059a      	lsls	r2, r3, #22
 8007788:	d4ee      	bmi.n	8007768 <__smakebuf_r+0x18>
 800778a:	f023 0303 	bic.w	r3, r3, #3
 800778e:	f043 0302 	orr.w	r3, r3, #2
 8007792:	81a3      	strh	r3, [r4, #12]
 8007794:	e7e2      	b.n	800775c <__smakebuf_r+0xc>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	6020      	str	r0, [r4, #0]
 800779a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80077a6:	b15b      	cbz	r3, 80077c0 <__smakebuf_r+0x70>
 80077a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 f81d 	bl	80077ec <_isatty_r>
 80077b2:	b128      	cbz	r0, 80077c0 <__smakebuf_r+0x70>
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f023 0303 	bic.w	r3, r3, #3
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	431d      	orrs	r5, r3
 80077c4:	81a5      	strh	r5, [r4, #12]
 80077c6:	e7cf      	b.n	8007768 <__smakebuf_r+0x18>

080077c8 <_fstat_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4d07      	ldr	r5, [pc, #28]	@ (80077e8 <_fstat_r+0x20>)
 80077cc:	2300      	movs	r3, #0
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	4611      	mov	r1, r2
 80077d4:	602b      	str	r3, [r5, #0]
 80077d6:	f7f9 fafc 	bl	8000dd2 <_fstat>
 80077da:	1c43      	adds	r3, r0, #1
 80077dc:	d102      	bne.n	80077e4 <_fstat_r+0x1c>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	b103      	cbz	r3, 80077e4 <_fstat_r+0x1c>
 80077e2:	6023      	str	r3, [r4, #0]
 80077e4:	bd38      	pop	{r3, r4, r5, pc}
 80077e6:	bf00      	nop
 80077e8:	20000b14 	.word	0x20000b14

080077ec <_isatty_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	4d06      	ldr	r5, [pc, #24]	@ (8007808 <_isatty_r+0x1c>)
 80077f0:	2300      	movs	r3, #0
 80077f2:	4604      	mov	r4, r0
 80077f4:	4608      	mov	r0, r1
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	f7f9 fafb 	bl	8000df2 <_isatty>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_isatty_r+0x1a>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_isatty_r+0x1a>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	20000b14 	.word	0x20000b14

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
