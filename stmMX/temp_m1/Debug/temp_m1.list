
temp_m1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005810  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005a10  08005a10  00006a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a74  08005a74  000071a8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a74  08005a74  00006a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a7c  08005a7c  000071a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a7c  08005a7c  00006a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a80  08005a80  00006a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a84  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000068  08005aec  00007068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000108  08005b8c  00007108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000898  200001a8  08005c2c  000071a8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a40  08005c2c  00007a40  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000071a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   000132f6  00000000  00000000  000071d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000291f  00000000  00000000  0001a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef0  00000000  00000000  0001cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b71  00000000  00000000  0001dce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a05a  00000000  00000000  0001e851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000136ed  00000000  00000000  000488ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100b35  00000000  00000000  0005bf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0015cacd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004594  00000000  00000000  0015cb10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  001610a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	080059f8 	.word	0x080059f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	080059f8 	.word	0x080059f8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	0000      	movs	r0, r0
	...

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fdee 	bl	80011f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f859 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f9f9 	bl	8000a14 <MX_GPIO_Init>
  MX_ETH_Init();
 8000622:	f000 f91b 	bl	800085c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f997 	bl	8000958 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800062a:	f000 f9c5 	bl	80009b8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800062e:	f000 f8c1 	bl	80007b4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000632:	f000 f961 	bl	80008f8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1); // Start ADC
 8000636:	4824      	ldr	r0, [pc, #144]	@ (80006c8 <main+0xb8>)
 8000638:	f000 fea2 	bl	8001380 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); // Wait for conversion
 800063c:	f04f 31ff 	mov.w	r1, #4294967295
 8000640:	4821      	ldr	r0, [pc, #132]	@ (80006c8 <main+0xb8>)
 8000642:	f000 ff6b 	bl	800151c <HAL_ADC_PollForConversion>
      adc_val = HAL_ADC_GetValue(&hadc1); // Get the value
 8000646:	4820      	ldr	r0, [pc, #128]	@ (80006c8 <main+0xb8>)
 8000648:	f000 fff3 	bl	8001632 <HAL_ADC_GetValue>
 800064c:	6078      	str	r0, [r7, #4]

	      // Convert ADC value to temperature (approximation for STM32F7)
	  temperature = ((adc_val * 3.3 / 4095.0) - 0.76) / 0.0025 + 25;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	ee07 3a90 	vmov	s15, r3
 8000654:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000658:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80006a8 <main+0x98>
 800065c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000660:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 80006b0 <main+0xa0>
 8000664:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000668:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80006b8 <main+0xa8>
 800066c:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000670:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 80006c0 <main+0xb0>
 8000674:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000678:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 800067c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000680:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000684:	edc7 7a00 	vstr	s15, [r7]

	  HAL_Delay(1000);
 8000688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068c:	f000 fe10 	bl	80012b0 <HAL_Delay>
	  printf("Temperature: %.2f C\r\n", temperature);
 8000690:	edd7 7a00 	vldr	s15, [r7]
 8000694:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000698:	ec53 2b17 	vmov	r2, r3, d7
 800069c:	480b      	ldr	r0, [pc, #44]	@ (80006cc <main+0xbc>)
 800069e:	f004 fb3f 	bl	8004d20 <iprintf>
  {
 80006a2:	bf00      	nop
 80006a4:	e7c7      	b.n	8000636 <main+0x26>
 80006a6:	bf00      	nop
 80006a8:	66666666 	.word	0x66666666
 80006ac:	400a6666 	.word	0x400a6666
 80006b0:	00000000 	.word	0x00000000
 80006b4:	40affe00 	.word	0x40affe00
 80006b8:	851eb852 	.word	0x851eb852
 80006bc:	3fe851eb 	.word	0x3fe851eb
 80006c0:	47ae147b 	.word	0x47ae147b
 80006c4:	3f647ae1 	.word	0x3f647ae1
 80006c8:	200001fc 	.word	0x200001fc
 80006cc:	08005a10 	.word	0x08005a10

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	@ 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f004 fb73 	bl	8004dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f4:	f002 f932 	bl	800295c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	4b2c      	ldr	r3, [pc, #176]	@ (80007ac <SystemClock_Config+0xdc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a2b      	ldr	r2, [pc, #172]	@ (80007ac <SystemClock_Config+0xdc>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000710:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000718:	4a25      	ldr	r2, [pc, #148]	@ (80007b0 <SystemClock_Config+0xe0>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072c:	2301      	movs	r3, #1
 800072e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000730:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000734:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	2302      	movs	r3, #2
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000740:	2304      	movs	r3, #4
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000744:	2360      	movs	r3, #96	@ 0x60
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000750:	2302      	movs	r3, #2
 8000752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	4618      	mov	r0, r3
 800075a:	f002 f95f 	bl	8002a1c <HAL_RCC_OscConfig>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000764:	f000 f9f8 	bl	8000b58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000768:	f002 f908 	bl	800297c <HAL_PWREx_EnableOverDrive>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000772:	f000 f9f1 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	2103      	movs	r1, #3
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fbf0 	bl	8002f78 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800079e:	f000 f9db 	bl	8000b58 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	@ 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_ADC1_Init+0x98>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	@ (8000850 <MX_ADC1_Init+0x9c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_ADC1_Init+0x98>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_ADC1_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <MX_ADC1_Init+0x98>)
 80007f6:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <MX_ADC1_Init+0xa0>)
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_ADC1_Init+0x98>)
 8000802:	2201      	movs	r2, #1
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_ADC1_Init+0x98>)
 8000808:	2200      	movs	r2, #0
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_ADC1_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_ADC1_Init+0x98>)
 8000816:	f000 fd6f 	bl	80012f8 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 f99a 	bl	8000b58 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_ADC1_Init+0xa4>)
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800082c:	2307      	movs	r3, #7
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_ADC1_Init+0x98>)
 8000836:	f000 ff09 	bl	800164c <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 f98a 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200001fc 	.word	0x200001fc
 8000850:	40012000 	.word	0x40012000
 8000854:	0f000001 	.word	0x0f000001
 8000858:	10000012 	.word	0x10000012

0800085c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000860:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_ETH_Init+0x84>)
 8000862:	4a20      	ldr	r2, [pc, #128]	@ (80008e4 <MX_ETH_Init+0x88>)
 8000864:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000874:	22e1      	movs	r2, #225	@ 0xe1
 8000876:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800087a:	2200      	movs	r2, #0
 800087c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ETH_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_ETH_Init+0x84>)
 800088c:	4a16      	ldr	r2, [pc, #88]	@ (80008e8 <MX_ETH_Init+0x8c>)
 800088e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000890:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <MX_ETH_Init+0x84>)
 8000892:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000896:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_ETH_Init+0x84>)
 800089a:	4a14      	ldr	r2, [pc, #80]	@ (80008ec <MX_ETH_Init+0x90>)
 800089c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008a0:	4a13      	ldr	r2, [pc, #76]	@ (80008f0 <MX_ETH_Init+0x94>)
 80008a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008a6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_ETH_Init+0x84>)
 80008ae:	f001 fa07 	bl	8001cc0 <HAL_ETH_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 f94e 	bl	8000b58 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008bc:	2238      	movs	r2, #56	@ 0x38
 80008be:	2100      	movs	r1, #0
 80008c0:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008c2:	f004 fa82 	bl	8004dca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008c8:	2221      	movs	r2, #33	@ 0x21
 80008ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008ce:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80008d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <MX_ETH_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000244 	.word	0x20000244
 80008e4:	40028000 	.word	0x40028000
 80008e8:	200008e4 	.word	0x200008e4
 80008ec:	20000108 	.word	0x20000108
 80008f0:	20000068 	.word	0x20000068
 80008f4:	200001c4 	.word	0x200001c4

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <MX_USART2_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_USART2_UART_Init+0x58>)
 800093c:	f003 f96a 	bl	8003c14 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f907 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002f4 	.word	0x200002f4
 8000954:	40004400 	.word	0x40004400

08000958 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800095e:	4a15      	ldr	r2, [pc, #84]	@ (80009b4 <MX_USART3_UART_Init+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_USART3_UART_Init+0x58>)
 800099c:	f003 f93a 	bl	8003c14 <HAL_UART_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f8d7 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	2000037c 	.word	0x2000037c
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009bc:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2206      	movs	r2, #6
 80009c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	2202      	movs	r2, #2
 80009da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	2201      	movs	r2, #1
 80009e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009e8:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fc:	f001 fe73 	bl	80026e6 <HAL_PCD_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a06:	f000 f8a7 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000404 	.word	0x20000404

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	@ 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b47      	ldr	r3, [pc, #284]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a46      	ldr	r2, [pc, #280]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a30:	f043 0304 	orr.w	r3, r3, #4
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b44      	ldr	r3, [pc, #272]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	4b41      	ldr	r3, [pc, #260]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b38      	ldr	r3, [pc, #224]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a34      	ldr	r2, [pc, #208]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b32      	ldr	r3, [pc, #200]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a28      	ldr	r2, [pc, #160]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <MX_GPIO_Init+0x134>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ac0:	4822      	ldr	r0, [pc, #136]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000ac2:	f001 fdf7 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2140      	movs	r1, #64	@ 0x40
 8000aca:	4821      	ldr	r0, [pc, #132]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000acc:	f001 fdf2 	bl	80026b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481b      	ldr	r0, [pc, #108]	@ (8000b54 <MX_GPIO_Init+0x140>)
 8000ae8:	f001 fc38 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <MX_GPIO_Init+0x138>)
 8000b06:	f001 fc29 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480b      	ldr	r0, [pc, #44]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000b22:	f001 fc1b 	bl	800235c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <MX_GPIO_Init+0x13c>)
 8000b3a:	f001 fc0f 	bl	800235c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	@ 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40021800 	.word	0x40021800
 8000b54:	40020800 	.word	0x40020800

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x44>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <HAL_ADC_MspInit+0x38>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d10b      	bne.n	8000bd6 <HAL_ADC_MspInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_ADC_MspInit+0x3c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a09      	ldr	r2, [pc, #36]	@ (8000be8 <HAL_ADC_MspInit+0x3c>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <HAL_ADC_MspInit+0x3c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40012000 	.word	0x40012000
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	@ 0x38
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a4e      	ldr	r2, [pc, #312]	@ (8000d44 <HAL_ETH_MspInit+0x158>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f040 8096 	bne.w	8000d3c <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000c10:	4b4d      	ldr	r3, [pc, #308]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	4a4c      	ldr	r2, [pc, #304]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	4b47      	ldr	r3, [pc, #284]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2c:	4a46      	ldr	r2, [pc, #280]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c34:	4b44      	ldr	r3, [pc, #272]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	4b41      	ldr	r3, [pc, #260]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c44:	4a40      	ldr	r2, [pc, #256]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c58:	4b3b      	ldr	r3, [pc, #236]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c64:	4b38      	ldr	r3, [pc, #224]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b35      	ldr	r3, [pc, #212]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c74:	4a34      	ldr	r2, [pc, #208]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c76:	f043 0301 	orr.w	r3, r3, #1
 8000c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7c:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c88:	4b2f      	ldr	r3, [pc, #188]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c94:	4b2c      	ldr	r3, [pc, #176]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca0:	4b29      	ldr	r3, [pc, #164]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca4:	4a28      	ldr	r2, [pc, #160]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cac:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <HAL_ETH_MspInit+0x15c>)
 8000cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb8:	2332      	movs	r3, #50	@ 0x32
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	481e      	ldr	r0, [pc, #120]	@ (8000d4c <HAL_ETH_MspInit+0x160>)
 8000cd4:	f001 fb42 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd8:	2386      	movs	r3, #134	@ 0x86
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce8:	230b      	movs	r3, #11
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4817      	ldr	r0, [pc, #92]	@ (8000d50 <HAL_ETH_MspInit+0x164>)
 8000cf4:	f001 fb32 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0a:	230b      	movs	r3, #11
 8000d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <HAL_ETH_MspInit+0x168>)
 8000d16:	f001 fb21 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d1a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	4808      	ldr	r0, [pc, #32]	@ (8000d58 <HAL_ETH_MspInit+0x16c>)
 8000d38:	f001 fb10 	bl	800235c <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3738      	adds	r7, #56	@ 0x38
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40028000 	.word	0x40028000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020800 	.word	0x40020800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40021800 	.word	0x40021800

08000d5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0b0      	sub	sp, #192	@ 0xc0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2290      	movs	r2, #144	@ 0x90
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f824 	bl	8004dca <memset>
  if(huart->Instance==USART2)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a53      	ldr	r2, [pc, #332]	@ (8000ed4 <HAL_UART_MspInit+0x178>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d15c      	bne.n	8000e46 <HAL_UART_MspInit+0xea>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fb13 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da4:	f7ff fed8 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dbc:	61bb      	str	r3, [r7, #24]
 8000dbe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a44      	ldr	r2, [pc, #272]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ddc:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df0:	2308      	movs	r3, #8
 8000df2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e12:	4619      	mov	r1, r3
 8000e14:	4831      	ldr	r0, [pc, #196]	@ (8000edc <HAL_UART_MspInit+0x180>)
 8000e16:	f001 faa1 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4828      	ldr	r0, [pc, #160]	@ (8000ee0 <HAL_UART_MspInit+0x184>)
 8000e40:	f001 fa8c 	bl	800235c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e44:	e041      	b.n	8000eca <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ee4 <HAL_UART_MspInit+0x188>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d13c      	bne.n	8000eca <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f002 fab0 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x112>
      Error_Handler();
 8000e6a:	f7ff fe75 	bl	8000b58 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a13      	ldr	r2, [pc, #76]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_UART_MspInit+0x17c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <HAL_UART_MspInit+0x184>)
 8000ec6:	f001 fa49 	bl	800235c <HAL_GPIO_Init>
}
 8000eca:	bf00      	nop
 8000ecc:	37c0      	adds	r7, #192	@ 0xc0
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40004800 	.word	0x40004800

08000ee8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ae      	sub	sp, #184	@ 0xb8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2290      	movs	r2, #144	@ 0x90
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 ff5e 	bl	8004dca <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f16:	d159      	bne.n	8000fcc <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f1c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fa4b 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f34:	f7ff fe10 	bl	8000b58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b26      	ldr	r3, [pc, #152]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3c:	4a25      	ldr	r2, [pc, #148]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f44:	4b23      	ldr	r3, [pc, #140]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f50:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f74:	4619      	mov	r1, r3
 8000f76:	4818      	ldr	r0, [pc, #96]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f78:	f001 f9f0 	bl	800235c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f94:	4619      	mov	r1, r3
 8000f96:	4810      	ldr	r0, [pc, #64]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f98:	f001 f9e0 	bl	800235c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fa6:	6353      	str	r3, [r2, #52]	@ 0x34
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb8:	4a06      	ldr	r2, [pc, #24]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fcc:	bf00      	nop
 8000fce:	37b8      	adds	r7, #184	@ 0xb8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001032:	f000 f91d 	bl	8001270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}

0800103a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	60f8      	str	r0, [r7, #12]
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	e00a      	b.n	8001062 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104c:	f3af 8000 	nop.w
 8001050:	4601      	mov	r1, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1c5a      	adds	r2, r3, #1
 8001056:	60ba      	str	r2, [r7, #8]
 8001058:	b2ca      	uxtb	r2, r1
 800105a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbf0      	blt.n	800104c <_read+0x12>
  }

  return len;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e009      	b.n	800109a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbf1      	blt.n	8001086 <_write+0x12>
  }
  return len;
 80010a2:	687b      	ldr	r3, [r7, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_close>:

int _close(int file)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d4:	605a      	str	r2, [r3, #4]
  return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_isatty>:

int _isatty(int file)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ec:	2301      	movs	r3, #1
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	@ (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f003 fe90 	bl	8004e68 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	@ (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20080000 	.word	0x20080000
 8001174:	00000400 	.word	0x00000400
 8001178:	200008ec 	.word	0x200008ec
 800117c:	20000a40 	.word	0x20000a40

08001180 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a8:	f7ff ffea 	bl	8001180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ae:	490d      	ldr	r1, [pc, #52]	@ (80011e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b0:	4a0d      	ldr	r2, [pc, #52]	@ (80011e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c4:	4c0a      	ldr	r4, [pc, #40]	@ (80011f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f003 fe4f 	bl	8004e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fa1b 	bl	8000610 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011e8:	08005a84 	.word	0x08005a84
  ldr r2, =_sbss
 80011ec:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 80011f0:	20000a40 	.word	0x20000a40

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>

080011f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 fd2c 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001200:	2000      	movs	r0, #0
 8001202:	f000 f805 	bl	8001210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001206:	f7ff fcad 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_InitTick+0x54>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0x58>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001226:	fbb3 f3f1 	udiv	r3, r3, r1
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fd39 	bl	8001ca6 <HAL_SYSTICK_Config>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e00e      	b.n	800125c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b0f      	cmp	r3, #15
 8001242:	d80a      	bhi.n	800125a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001244:	2200      	movs	r2, #0
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	f000 fd0f 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001250:	4a06      	ldr	r2, [pc, #24]	@ (800126c <HAL_InitTick+0x5c>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e000      	b.n	800125c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000000 	.word	0x20000000
 8001268:	20000008 	.word	0x20000008
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	200008f0 	.word	0x200008f0

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	200008f0 	.word	0x200008f0

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff ffee 	bl	8001298 <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffde 	bl	8001298 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008

080012f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e031      	b.n	8001372 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fc48 	bl	8000bac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d116      	bne.n	8001364 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <HAL_ADC_Init+0x84>)
 800133c:	4013      	ands	r3, r2
 800133e:	f043 0202 	orr.w	r2, r3, #2
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fada 	bl	8001900 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	f023 0303 	bic.w	r3, r3, #3
 800135a:	f043 0201 	orr.w	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
 8001362:	e001      	b.n	8001368 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	ffffeefd 	.word	0xffffeefd

08001380 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_ADC_Start+0x1a>
 8001396:	2302      	movs	r3, #2
 8001398:	e0ad      	b.n	80014f6 <HAL_ADC_Start+0x176>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d018      	beq.n	80013e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80013c0:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <HAL_ADC_Start+0x184>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a50      	ldr	r2, [pc, #320]	@ (8001508 <HAL_ADC_Start+0x188>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9a      	lsrs	r2, r3, #18
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d175      	bne.n	80014dc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f4:	4b45      	ldr	r3, [pc, #276]	@ (800150c <HAL_ADC_Start+0x18c>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001416:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800142a:	d106      	bne.n	800143a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001430:	f023 0206 	bic.w	r2, r3, #6
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	645a      	str	r2, [r3, #68]	@ 0x44
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001450:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_ADC_Start+0x190>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d143      	bne.n	80014f4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	e03a      	b.n	80014f4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <HAL_ADC_Start+0x194>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d10e      	bne.n	80014a6 <HAL_ADC_Start+0x126>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014a4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_ADC_Start+0x190>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d120      	bne.n	80014f4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <HAL_ADC_Start+0x198>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d11b      	bne.n	80014f4 <HAL_ADC_Start+0x174>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d114      	bne.n	80014f4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	e00b      	b.n	80014f4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f043 0210 	orr.w	r2, r3, #16
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000000 	.word	0x20000000
 8001508:	431bde83 	.word	0x431bde83
 800150c:	fffff8fe 	.word	0xfffff8fe
 8001510:	40012300 	.word	0x40012300
 8001514:	40012000 	.word	0x40012000
 8001518:	40012200 	.word	0x40012200

0800151c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001538:	d113      	bne.n	8001562 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001544:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001548:	d10b      	bne.n	8001562 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f043 0220 	orr.w	r2, r3, #32
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e063      	b.n	800162a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001562:	f7ff fe99 	bl	8001298 <HAL_GetTick>
 8001566:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001568:	e021      	b.n	80015ae <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d01d      	beq.n	80015ae <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_ADC_PollForConversion+0x6c>
 8001578:	f7ff fe8e 	bl	8001298 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d212      	bcs.n	80015ae <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b02      	cmp	r3, #2
 8001594:	d00b      	beq.n	80015ae <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f043 0204 	orr.w	r2, r3, #4
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e03d      	b.n	800162a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d1d6      	bne.n	800156a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0212 	mvn.w	r2, #18
 80015c4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d123      	bne.n	8001628 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11f      	bne.n	8001628 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001608:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1c>
 8001664:	2302      	movs	r3, #2
 8001666:	e13a      	b.n	80018de <HAL_ADC_ConfigChannel+0x292>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b09      	cmp	r3, #9
 8001676:	d93a      	bls.n	80016ee <HAL_ADC_ConfigChannel+0xa2>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001680:	d035      	beq.n	80016ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68d9      	ldr	r1, [r3, #12]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	3b1e      	subs	r3, #30
 8001698:	2207      	movs	r2, #7
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	400a      	ands	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a8f      	ldr	r2, [pc, #572]	@ (80018ec <HAL_ADC_ConfigChannel+0x2a0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10a      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	68d9      	ldr	r1, [r3, #12]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	061a      	lsls	r2, r3, #24
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c6:	e039      	b.n	800173c <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68d9      	ldr	r1, [r3, #12]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	4603      	mov	r3, r0
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4403      	add	r3, r0
 80016e0:	3b1e      	subs	r3, #30
 80016e2:	409a      	lsls	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ec:	e026      	b.n	800173c <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6919      	ldr	r1, [r3, #16]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	f003 031f 	and.w	r3, r3, #31
 8001706:	2207      	movs	r2, #7
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43da      	mvns	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	400a      	ands	r2, r1
 8001714:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6919      	ldr	r1, [r3, #16]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	4618      	mov	r0, r3
 8001728:	4603      	mov	r3, r0
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4403      	add	r3, r0
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	409a      	lsls	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b06      	cmp	r3, #6
 8001742:	d824      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3b05      	subs	r3, #5
 8001756:	221f      	movs	r2, #31
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	4618      	mov	r0, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b05      	subs	r3, #5
 8001780:	fa00 f203 	lsl.w	r2, r0, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	430a      	orrs	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	@ 0x34
 800178c:	e04c      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d824      	bhi.n	80017e0 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b23      	subs	r3, #35	@ 0x23
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b23      	subs	r3, #35	@ 0x23
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80017de:	e023      	b.n	8001828 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	3b41      	subs	r3, #65	@ 0x41
 80017f2:	221f      	movs	r2, #31
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43da      	mvns	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	400a      	ands	r2, r1
 8001800:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29b      	uxth	r3, r3
 800180e:	4618      	mov	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b41      	subs	r3, #65	@ 0x41
 800181c:	fa00 f203 	lsl.w	r2, r0, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	430a      	orrs	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a30      	ldr	r2, [pc, #192]	@ (80018f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10a      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1fc>
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800183c:	4b2d      	ldr	r3, [pc, #180]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a2c      	ldr	r2, [pc, #176]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001842:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001846:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_ADC_ConfigChannel+0x2a4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d10f      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x226>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b12      	cmp	r3, #18
 8001858:	d10b      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800185a:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a25      	ldr	r2, [pc, #148]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001860:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001864:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	4a22      	ldr	r2, [pc, #136]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800186c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001870:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a1e      	ldr	r2, [pc, #120]	@ (80018f0 <HAL_ADC_ConfigChannel+0x2a4>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d12b      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x288>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1a      	ldr	r2, [pc, #104]	@ (80018ec <HAL_ADC_ConfigChannel+0x2a0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_ADC_ConfigChannel+0x242>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b11      	cmp	r3, #17
 800188c:	d122      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800188e:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001894:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001898:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800189a:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4a15      	ldr	r2, [pc, #84]	@ (80018f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80018a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a10      	ldr	r2, [pc, #64]	@ (80018ec <HAL_ADC_ConfigChannel+0x2a0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d111      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80018b0:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_ADC_ConfigChannel+0x2ac>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_ADC_ConfigChannel+0x2b0>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0c9a      	lsrs	r2, r3, #18
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018c6:	e002      	b.n	80018ce <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f9      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	10000012 	.word	0x10000012
 80018f0:	40012000 	.word	0x40012000
 80018f4:	40012300 	.word	0x40012300
 80018f8:	20000000 	.word	0x20000000
 80018fc:	431bde83 	.word	0x431bde83

08001900 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001908:	4b78      	ldr	r3, [pc, #480]	@ (8001aec <ADC_Init+0x1ec>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a77      	ldr	r2, [pc, #476]	@ (8001aec <ADC_Init+0x1ec>)
 800190e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001912:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001914:	4b75      	ldr	r3, [pc, #468]	@ (8001aec <ADC_Init+0x1ec>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4973      	ldr	r1, [pc, #460]	@ (8001aec <ADC_Init+0x1ec>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	021a      	lsls	r2, r3, #8
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68da      	ldr	r2, [r3, #12]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	4a58      	ldr	r2, [pc, #352]	@ (8001af0 <ADC_Init+0x1f0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d022      	beq.n	80019da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6899      	ldr	r1, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6899      	ldr	r1, [r3, #8]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	e00f      	b.n	80019fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80019e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80019f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0202 	bic.w	r2, r2, #2
 8001a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	005a      	lsls	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001a46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6859      	ldr	r1, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a52:	3b01      	subs	r3, #1
 8001a54:	035a      	lsls	r2, r3, #13
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	e007      	b.n	8001a70 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	051a      	lsls	r2, r3, #20
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6899      	ldr	r1, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ab2:	025a      	lsls	r2, r3, #9
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	029a      	lsls	r2, r3, #10
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40012300 	.word	0x40012300
 8001af0:	0f000001 	.word	0x0f000001

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x40>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x40>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00
 8001b38:	05fa0000 	.word	0x05fa0000

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	@ (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	@ 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	@ 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	@ (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff47 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff5c 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffb0 	bl	8001c14 <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e086      	b.n	8001de0 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe ff81 	bl	8000bec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_ETH_Init+0x128>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a3e      	ldr	r2, [pc, #248]	@ (8001de8 <HAL_ETH_Init+0x128>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <HAL_ETH_Init+0x128>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d02:	4b3a      	ldr	r3, [pc, #232]	@ (8001dec <HAL_ETH_Init+0x12c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4a39      	ldr	r2, [pc, #228]	@ (8001dec <HAL_ETH_Init+0x12c>)
 8001d08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d0e:	4b37      	ldr	r3, [pc, #220]	@ (8001dec <HAL_ETH_Init+0x12c>)
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	4935      	ldr	r1, [pc, #212]	@ (8001dec <HAL_ETH_Init+0x12c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	@ (8001dec <HAL_ETH_Init+0x12c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff faae 	bl	8001298 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d3e:	e011      	b.n	8001d64 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d40:	f7ff faaa 	bl	8001298 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001d4e:	d909      	bls.n	8001d64 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2204      	movs	r2, #4
 8001d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	22e0      	movs	r2, #224	@ 0xe0
 8001d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e03d      	b.n	8001de0 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1e4      	bne.n	8001d40 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f97a 	bl	8002070 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fa25 	bl	80021cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa7b 	bl	800227e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2100      	movs	r1, #0
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f9e3 	bl	800215c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001da4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <HAL_ETH_Init+0x130>)
 8001db4:	430b      	orrs	r3, r1
 8001db6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001dca:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2210      	movs	r2, #16
 8001dda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	00020060 	.word	0x00020060

08001df4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <ETH_SetMACConfig+0x164>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7b9b      	ldrb	r3, [r3, #14]
 8001e12:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	7c12      	ldrb	r2, [r2, #16]
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d102      	bne.n	8001e22 <ETH_SetMACConfig+0x2e>
 8001e1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e20:	e000      	b.n	8001e24 <ETH_SetMACConfig+0x30>
 8001e22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e24:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	7c52      	ldrb	r2, [r2, #17]
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d102      	bne.n	8001e34 <ETH_SetMACConfig+0x40>
 8001e2e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e32:	e000      	b.n	8001e36 <ETH_SetMACConfig+0x42>
 8001e34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e36:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	7fdb      	ldrb	r3, [r3, #31]
 8001e42:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e44:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	7f92      	ldrb	r2, [r2, #30]
 8001e50:	2a00      	cmp	r2, #0
 8001e52:	d102      	bne.n	8001e5a <ETH_SetMACConfig+0x66>
 8001e54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e58:	e000      	b.n	8001e5c <ETH_SetMACConfig+0x68>
 8001e5a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	7f1b      	ldrb	r3, [r3, #28]
 8001e62:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e64:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	791b      	ldrb	r3, [r3, #4]
 8001e70:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e7a:	2a00      	cmp	r2, #0
 8001e7c:	d102      	bne.n	8001e84 <ETH_SetMACConfig+0x90>
 8001e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e82:	e000      	b.n	8001e86 <ETH_SetMACConfig+0x92>
 8001e84:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e86:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	7bdb      	ldrb	r3, [r3, #15]
 8001e8c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e8e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e9c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f7ff f9fa 	bl	80012b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eda:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	d101      	bne.n	8001eea <ETH_SetMACConfig+0xf6>
 8001ee6:	2280      	movs	r2, #128	@ 0x80
 8001ee8:	e000      	b.n	8001eec <ETH_SetMACConfig+0xf8>
 8001eea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001eec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ef2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001efa:	2a01      	cmp	r2, #1
 8001efc:	d101      	bne.n	8001f02 <ETH_SetMACConfig+0x10e>
 8001efe:	2208      	movs	r2, #8
 8001f00:	e000      	b.n	8001f04 <ETH_SetMACConfig+0x110>
 8001f02:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f04:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f0c:	2a01      	cmp	r2, #1
 8001f0e:	d101      	bne.n	8001f14 <ETH_SetMACConfig+0x120>
 8001f10:	2204      	movs	r2, #4
 8001f12:	e000      	b.n	8001f16 <ETH_SetMACConfig+0x122>
 8001f14:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f1e:	2a01      	cmp	r2, #1
 8001f20:	d101      	bne.n	8001f26 <ETH_SetMACConfig+0x132>
 8001f22:	2202      	movs	r2, #2
 8001f24:	e000      	b.n	8001f28 <ETH_SetMACConfig+0x134>
 8001f26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f7ff f9b5 	bl	80012b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	fd20810f 	.word	0xfd20810f

08001f5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4b3d      	ldr	r3, [pc, #244]	@ (800206c <ETH_SetDMAConfig+0x110>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	7b1b      	ldrb	r3, [r3, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <ETH_SetDMAConfig+0x2c>
 8001f82:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f86:	e000      	b.n	8001f8a <ETH_SetDMAConfig+0x2e>
 8001f88:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	7b5b      	ldrb	r3, [r3, #13]
 8001f8e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f90:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	7f52      	ldrb	r2, [r2, #29]
 8001f96:	2a00      	cmp	r2, #0
 8001f98:	d102      	bne.n	8001fa0 <ETH_SetDMAConfig+0x44>
 8001f9a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001f9e:	e000      	b.n	8001fa2 <ETH_SetDMAConfig+0x46>
 8001fa0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fa2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7b9b      	ldrb	r3, [r3, #14]
 8001fa8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001faa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fb0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fb8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7f9b      	ldrb	r3, [r3, #30]
 8001fbe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fc0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fc6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f7ff f95c 	bl	80012b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002000:	461a      	mov	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002010:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002016:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800201c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002024:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002026:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800202e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002034:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800203e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002042:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff f92d 	bl	80012b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	f8de3f23 	.word	0xf8de3f23

08002070 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b0a6      	sub	sp, #152	@ 0x98
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002084:	2300      	movs	r3, #0
 8002086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800209a:	2301      	movs	r3, #1
 800209c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020b2:	2300      	movs	r3, #0
 80020b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020ee:	4619      	mov	r1, r3
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f7ff fe7f 	bl	8001df4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020f6:	2301      	movs	r3, #1
 80020f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020fa:	2301      	movs	r3, #1
 80020fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002104:	2301      	movs	r3, #1
 8002106:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002126:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800212a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800212c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002130:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002132:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002136:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800213e:	2300      	movs	r3, #0
 8002140:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff05 	bl	8001f5c <ETH_SetDMAConfig>
}
 8002152:	bf00      	nop
 8002154:	3798      	adds	r7, #152	@ 0x98
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3305      	adds	r3, #5
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	3204      	adds	r2, #4
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <ETH_MACAddressConfig+0x68>)
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3303      	adds	r3, #3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	061a      	lsls	r2, r3, #24
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3302      	adds	r3, #2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4313      	orrs	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <ETH_MACAddressConfig+0x6c>)
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6013      	str	r3, [r2, #0]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40028040 	.word	0x40028040
 80021c8:	40028044 	.word	0x40028044

080021cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e03e      	b.n	8002258 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68d9      	ldr	r1, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	3206      	adds	r2, #6
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d80c      	bhi.n	800223c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	e004      	b.n	8002246 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	461a      	mov	r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3301      	adds	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d9bd      	bls.n	80021da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002270:	611a      	str	r2, [r3, #16]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e048      	b.n	800231e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6919      	ldr	r1, [r3, #16]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80022e2:	68b9      	ldr	r1, [r7, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	3212      	adds	r2, #18
 80022ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d80c      	bhi.n	800230e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	e004      	b.n	8002318 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	461a      	mov	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3301      	adds	r3, #1
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d9b3      	bls.n	800228c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691a      	ldr	r2, [r3, #16]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234e:	60da      	str	r2, [r3, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	e175      	b.n	8002668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800237c:	2201      	movs	r2, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	429a      	cmp	r2, r3
 8002396:	f040 8164 	bne.w	8002662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d005      	beq.n	80023b2 <HAL_GPIO_Init+0x56>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d130      	bne.n	8002414 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 0201 	and.w	r2, r3, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b03      	cmp	r3, #3
 800241e:	d017      	beq.n	8002450 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0303 	and.w	r3, r3, #3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d123      	bne.n	80024a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	08da      	lsrs	r2, r3, #3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3208      	adds	r2, #8
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	08da      	lsrs	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3208      	adds	r2, #8
 800249e:	69b9      	ldr	r1, [r7, #24]
 80024a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0203 	and.w	r2, r3, #3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80be 	beq.w	8002662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e6:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a65      	ldr	r2, [pc, #404]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b63      	ldr	r3, [pc, #396]	@ (8002680 <HAL_GPIO_Init+0x324>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024fe:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <HAL_GPIO_Init+0x328>)
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a58      	ldr	r2, [pc, #352]	@ (8002688 <HAL_GPIO_Init+0x32c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d037      	beq.n	800259a <HAL_GPIO_Init+0x23e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a57      	ldr	r2, [pc, #348]	@ (800268c <HAL_GPIO_Init+0x330>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d031      	beq.n	8002596 <HAL_GPIO_Init+0x23a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a56      	ldr	r2, [pc, #344]	@ (8002690 <HAL_GPIO_Init+0x334>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d02b      	beq.n	8002592 <HAL_GPIO_Init+0x236>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a55      	ldr	r2, [pc, #340]	@ (8002694 <HAL_GPIO_Init+0x338>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d025      	beq.n	800258e <HAL_GPIO_Init+0x232>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a54      	ldr	r2, [pc, #336]	@ (8002698 <HAL_GPIO_Init+0x33c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d01f      	beq.n	800258a <HAL_GPIO_Init+0x22e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a53      	ldr	r2, [pc, #332]	@ (800269c <HAL_GPIO_Init+0x340>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d019      	beq.n	8002586 <HAL_GPIO_Init+0x22a>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_GPIO_Init+0x344>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d013      	beq.n	8002582 <HAL_GPIO_Init+0x226>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a51      	ldr	r2, [pc, #324]	@ (80026a4 <HAL_GPIO_Init+0x348>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d00d      	beq.n	800257e <HAL_GPIO_Init+0x222>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a50      	ldr	r2, [pc, #320]	@ (80026a8 <HAL_GPIO_Init+0x34c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d007      	beq.n	800257a <HAL_GPIO_Init+0x21e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4f      	ldr	r2, [pc, #316]	@ (80026ac <HAL_GPIO_Init+0x350>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d101      	bne.n	8002576 <HAL_GPIO_Init+0x21a>
 8002572:	2309      	movs	r3, #9
 8002574:	e012      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002576:	230a      	movs	r3, #10
 8002578:	e010      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257a:	2308      	movs	r3, #8
 800257c:	e00e      	b.n	800259c <HAL_GPIO_Init+0x240>
 800257e:	2307      	movs	r3, #7
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002582:	2306      	movs	r3, #6
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x240>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x240>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x240>
 800259a:	2300      	movs	r3, #0
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025ac:	4935      	ldr	r1, [pc, #212]	@ (8002684 <HAL_GPIO_Init+0x328>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025de:	4a34      	ldr	r2, [pc, #208]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e4:	4b32      	ldr	r3, [pc, #200]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002608:	4a29      	ldr	r2, [pc, #164]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002632:	4a1f      	ldr	r2, [pc, #124]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002638:	4b1d      	ldr	r3, [pc, #116]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265c:	4a14      	ldr	r2, [pc, #80]	@ (80026b0 <HAL_GPIO_Init+0x354>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3301      	adds	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	f67f ae86 	bls.w	800237c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3724      	adds	r7, #36	@ 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	40013800 	.word	0x40013800
 8002688:	40020000 	.word	0x40020000
 800268c:	40020400 	.word	0x40020400
 8002690:	40020800 	.word	0x40020800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40021000 	.word	0x40021000
 800269c:	40021400 	.word	0x40021400
 80026a0:	40021800 	.word	0x40021800
 80026a4:	40021c00 	.word	0x40021c00
 80026a8:	40022000 	.word	0x40022000
 80026ac:	40022400 	.word	0x40022400
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026d0:	e003      	b.n	80026da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	041a      	lsls	r2, r3, #16
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af02      	add	r7, sp, #8
 80026ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e108      	b.n	800290a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7fe fbe8 	bl	8000ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2203      	movs	r2, #3
 800271c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002726:	d102      	bne.n	800272e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f001 ff96 	bl	8004664 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7c1a      	ldrb	r2, [r3, #16]
 8002740:	f88d 2000 	strb.w	r2, [sp]
 8002744:	3304      	adds	r3, #4
 8002746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002748:	f001 ff32 	bl	80045b0 <USB_CoreInit>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0d5      	b.n	800290a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f001 ff8e 	bl	8004686 <USB_SetCurrentMode>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0c6      	b.n	800290a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e04a      	b.n	8002818 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3315      	adds	r3, #21
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3314      	adds	r3, #20
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	b298      	uxth	r0, r3
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	332e      	adds	r3, #46	@ 0x2e
 80027be:	4602      	mov	r2, r0
 80027c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3318      	adds	r3, #24
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	331c      	adds	r3, #28
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	3320      	adds	r3, #32
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3324      	adds	r3, #36	@ 0x24
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3af      	bcc.n	8002782 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	73fb      	strb	r3, [r7, #15]
 8002826:	e044      	b.n	80028b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800283e:	7bfa      	ldrb	r2, [r7, #15]
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002854:	7bfa      	ldrb	r2, [r7, #15]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
 80028ae:	3301      	adds	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	791b      	ldrb	r3, [r3, #4]
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3b5      	bcc.n	8002828 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7c1a      	ldrb	r2, [r3, #16]
 80028c4:	f88d 2000 	strb.w	r2, [sp]
 80028c8:	3304      	adds	r3, #4
 80028ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028cc:	f001 ff28 	bl	8004720 <USB_DevInit>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d005      	beq.n	80028e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e013      	b.n	800290a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7b1b      	ldrb	r3, [r3, #12]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d102      	bne.n	80028fe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f80b 	bl	8002914 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f002 f8e3 	bl	8004ace <USB_DevDisconnect>

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_PCDEx_ActivateLPM+0x44>)
 8002944:	4313      	orrs	r3, r2
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	10000003 	.word	0x10000003

0800295c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40007000 	.word	0x40007000

0800297c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x98>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	@ 0x40
 8002992:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_PWREx_EnableOverDrive+0x98>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800299e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029aa:	f7fe fc75 	bl	8001298 <HAL_GetTick>
 80029ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029b0:	e009      	b.n	80029c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029b2:	f7fe fc71 	bl	8001298 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029c0:	d901      	bls.n	80029c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e022      	b.n	8002a0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029c6:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d2:	d1ee      	bne.n	80029b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029d4:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7fe fc5a 	bl	8001298 <HAL_GetTick>
 80029e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029e6:	e009      	b.n	80029fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029e8:	f7fe fc56 	bl	8001298 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f6:	d901      	bls.n	80029fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e007      	b.n	8002a0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a08:	d1ee      	bne.n	80029e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40007000 	.word	0x40007000

08002a1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e29b      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8087 	beq.w	8002b4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a40:	4b96      	ldr	r3, [pc, #600]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a4c:	4b93      	ldr	r3, [pc, #588]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d112      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
 8002a58:	4b90      	ldr	r3, [pc, #576]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a64:	d10b      	bne.n	8002a7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a66:	4b8d      	ldr	r3, [pc, #564]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d06c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x130>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d168      	bne.n	8002b4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e275      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x7a>
 8002a88:	4b84      	ldr	r3, [pc, #528]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a83      	ldr	r2, [pc, #524]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x9c>
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7b      	ldr	r2, [pc, #492]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e01d      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0xc0>
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b73      	ldr	r3, [pc, #460]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a72      	ldr	r2, [pc, #456]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0xd8>
 8002adc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a6e      	ldr	r2, [pc, #440]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6b      	ldr	r2, [pc, #428]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d013      	beq.n	8002b24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fbcc 	bl	8001298 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fbc8 	bl	8001298 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	@ 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e229      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0xe8>
 8002b22:	e014      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fbb8 	bl	8001298 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fbb4 	bl	8001298 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e215      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	4b57      	ldr	r3, [pc, #348]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x110>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d069      	beq.n	8002c2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	4b50      	ldr	r3, [pc, #320]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00b      	beq.n	8002b7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b66:	4b4d      	ldr	r3, [pc, #308]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d11c      	bne.n	8002bac <HAL_RCC_OscConfig+0x190>
 8002b72:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d116      	bne.n	8002bac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b7e:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e1e9      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b96:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	493d      	ldr	r1, [pc, #244]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002baa:	e040      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb4:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a38      	ldr	r2, [pc, #224]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fb6a 	bl	8001298 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fb66 	bl	8001298 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e1c7      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b30      	ldr	r3, [pc, #192]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4929      	ldr	r1, [pc, #164]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
 8002bfa:	e018      	b.n	8002c2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfc:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a26      	ldr	r2, [pc, #152]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fb46 	bl	8001298 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fb42 	bl	8001298 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e1a3      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d038      	beq.n	8002cac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c46:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fb23 	bl	8001298 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe fb1f 	bl	8001298 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e180      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c68:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x23a>
 8002c74:	e01a      	b.n	8002cac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b09      	ldr	r3, [pc, #36]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c7a:	4a08      	ldr	r2, [pc, #32]	@ (8002c9c <HAL_RCC_OscConfig+0x280>)
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fb09 	bl	8001298 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fb05 	bl	8001298 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d903      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e166      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
 8002c9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca0:	4b92      	ldr	r3, [pc, #584]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a4 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8c      	ldr	r3, [pc, #560]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b89      	ldr	r3, [pc, #548]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	4a88      	ldr	r2, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd2:	4b86      	ldr	r3, [pc, #536]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ce2:	4b83      	ldr	r3, [pc, #524]	@ (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cee:	4b80      	ldr	r3, [pc, #512]	@ (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7f      	ldr	r2, [pc, #508]	@ (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe facd 	bl	8001298 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fac9 	bl	8001298 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	@ 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e12a      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_OscConfig+0x4d4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x31a>
 8002d28:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2c:	4a6f      	ldr	r2, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x33c>
 8002d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4a:	4b68      	ldr	r3, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	4a67      	ldr	r2, [pc, #412]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x35e>
 8002d60:	4b62      	ldr	r3, [pc, #392]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	4a61      	ldr	r2, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d70:	4a5e      	ldr	r2, [pc, #376]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x376>
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d86:	4b59      	ldr	r3, [pc, #356]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d8a:	4a58      	ldr	r2, [pc, #352]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fa7d 	bl	8001298 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fa79 	bl	8001298 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0d8      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4c      	ldr	r3, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x386>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa67 	bl	8001298 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fa63 	bl	8001298 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0c2      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3d      	ldr	r3, [pc, #244]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80ae 	beq.w	8002f68 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d06d      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d14b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a31      	ldr	r2, [pc, #196]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe fa34 	bl	8001298 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e34:	f7fe fa30 	bl	8001298 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e091      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	019b      	lsls	r3, r3, #6
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	061b      	lsls	r3, r3, #24
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	071b      	lsls	r3, r3, #28
 8002e7e:	491b      	ldr	r1, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e84:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fa02 	bl	8001298 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f9fe 	bl	8001298 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e05f      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x47c>
 8002eb6:	e057      	b.n	8002f68 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f9e8 	bl	8001298 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe f9e4 	bl	8001298 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e045      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b03      	ldr	r3, [pc, #12]	@ (8002eec <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x4b0>
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x54c>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <HAL_RCC_OscConfig+0x558>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d030      	beq.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d129      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d122      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d119      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d10f      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800

08002f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0d0      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f90:	4b6a      	ldr	r3, [pc, #424]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d910      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9e:	4b67      	ldr	r3, [pc, #412]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 020f 	bic.w	r2, r3, #15
 8002fa6:	4965      	ldr	r1, [pc, #404]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d040      	beq.n	800309c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d115      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d107      	bne.n	800304a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b41      	ldr	r3, [pc, #260]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e073      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304a:	4b3d      	ldr	r3, [pc, #244]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e06b      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4936      	ldr	r1, [pc, #216]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800306c:	f7fe f914 	bl	8001298 <HAL_GetTick>
 8003070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe f910 	bl	8001298 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e053      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b2d      	ldr	r3, [pc, #180]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b27      	ldr	r3, [pc, #156]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d210      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4922      	ldr	r1, [pc, #136]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	@ (800313c <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f6:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f821 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_ClockConfig+0x1c8>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	@ (8003144 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	@ (8003148 <HAL_RCC_ClockConfig+0x1d0>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	@ (800314c <HAL_RCC_ClockConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f870 	bl	8001210 <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	08005a28 	.word	0x08005a28
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003154:	b094      	sub	sp, #80	@ 0x50
 8003156:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	647b      	str	r3, [r7, #68]	@ 0x44
 800315c:	2300      	movs	r3, #0
 800315e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003160:	2300      	movs	r3, #0
 8003162:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003168:	4b79      	ldr	r3, [pc, #484]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 030c 	and.w	r3, r3, #12
 8003170:	2b08      	cmp	r3, #8
 8003172:	d00d      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x40>
 8003174:	2b08      	cmp	r3, #8
 8003176:	f200 80e1 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x1ec>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x34>
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x3a>
 8003182:	e0db      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003184:	4b73      	ldr	r3, [pc, #460]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x204>)
 8003186:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003188:	e0db      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318a:	4b73      	ldr	r3, [pc, #460]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x208>)
 800318c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800318e:	e0d8      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003198:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800319a:	4b6d      	ldr	r3, [pc, #436]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ba:	2300      	movs	r3, #0
 80031bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80031be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031c2:	4622      	mov	r2, r4
 80031c4:	462b      	mov	r3, r5
 80031c6:	f04f 0000 	mov.w	r0, #0
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	0159      	lsls	r1, r3, #5
 80031d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d4:	0150      	lsls	r0, r2, #5
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4621      	mov	r1, r4
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	6139      	str	r1, [r7, #16]
 80031e0:	4629      	mov	r1, r5
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031f4:	4659      	mov	r1, fp
 80031f6:	018b      	lsls	r3, r1, #6
 80031f8:	4651      	mov	r1, sl
 80031fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031fe:	4651      	mov	r1, sl
 8003200:	018a      	lsls	r2, r1, #6
 8003202:	4651      	mov	r1, sl
 8003204:	ebb2 0801 	subs.w	r8, r2, r1
 8003208:	4659      	mov	r1, fp
 800320a:	eb63 0901 	sbc.w	r9, r3, r1
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800321a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800321e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003222:	4690      	mov	r8, r2
 8003224:	4699      	mov	r9, r3
 8003226:	4623      	mov	r3, r4
 8003228:	eb18 0303 	adds.w	r3, r8, r3
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	462b      	mov	r3, r5
 8003230:	eb49 0303 	adc.w	r3, r9, r3
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003242:	4629      	mov	r1, r5
 8003244:	024b      	lsls	r3, r1, #9
 8003246:	4621      	mov	r1, r4
 8003248:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800324c:	4621      	mov	r1, r4
 800324e:	024a      	lsls	r2, r1, #9
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003256:	2200      	movs	r2, #0
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28
 800325a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800325c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003260:	f7fd f83e 	bl	80002e0 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800326c:	e058      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	2200      	movs	r2, #0
 8003276:	4618      	mov	r0, r3
 8003278:	4611      	mov	r1, r2
 800327a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
 8003284:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003288:	4642      	mov	r2, r8
 800328a:	464b      	mov	r3, r9
 800328c:	f04f 0000 	mov.w	r0, #0
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	0159      	lsls	r1, r3, #5
 8003296:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329a:	0150      	lsls	r0, r2, #5
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4641      	mov	r1, r8
 80032a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80032a6:	4649      	mov	r1, r9
 80032a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032c0:	ebb2 040a 	subs.w	r4, r2, sl
 80032c4:	eb63 050b 	sbc.w	r5, r3, fp
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	00eb      	lsls	r3, r5, #3
 80032d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d6:	00e2      	lsls	r2, r4, #3
 80032d8:	4614      	mov	r4, r2
 80032da:	461d      	mov	r5, r3
 80032dc:	4643      	mov	r3, r8
 80032de:	18e3      	adds	r3, r4, r3
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	464b      	mov	r3, r9
 80032e4:	eb45 0303 	adc.w	r3, r5, r3
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f6:	4629      	mov	r1, r5
 80032f8:	028b      	lsls	r3, r1, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003300:	4621      	mov	r1, r4
 8003302:	028a      	lsls	r2, r1, #10
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330a:	2200      	movs	r2, #0
 800330c:	61bb      	str	r3, [r7, #24]
 800330e:	61fa      	str	r2, [r7, #28]
 8003310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003314:	f7fc ffe4 	bl	80002e0 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x200>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003330:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x204>)
 800333e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003344:	4618      	mov	r0, r3
 8003346:	3750      	adds	r7, #80	@ 0x50
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400
 8003358:	007a1200 	.word	0x007a1200

0800335c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b03      	ldr	r3, [pc, #12]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000000 	.word	0x20000000

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003378:	f7ff fff0 	bl	800335c <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	08005a38 	.word	0x08005a38

0800339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a0:	f7ff ffdc 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0b5b      	lsrs	r3, r3, #13
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	@ (80033c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	08005a38 	.word	0x08005a38

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ec:	4b69      	ldr	r3, [pc, #420]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a68      	ldr	r2, [pc, #416]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	4b66      	ldr	r3, [pc, #408]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003400:	4964      	ldr	r1, [pc, #400]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341e:	4b5d      	ldr	r3, [pc, #372]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003424:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	4959      	ldr	r1, [pc, #356]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800344a:	2301      	movs	r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345a:	4b4e      	ldr	r3, [pc, #312]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003460:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003468:	494a      	ldr	r1, [pc, #296]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 808b 	beq.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	4a39      	ldr	r2, [pc, #228]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80034b4:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c0:	4b35      	ldr	r3, [pc, #212]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a34      	ldr	r2, [pc, #208]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fd fee4 	bl	8001298 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fd fee0 	bl	8001298 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e38f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f2:	4b28      	ldr	r3, [pc, #160]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d035      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d02e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003510:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003518:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003524:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003526:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	4a1a      	ldr	r2, [pc, #104]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003530:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003538:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d114      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fd fea8 	bl	8001298 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fd fea4 	bl	8001298 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e351      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	4b0c      	ldr	r3, [pc, #48]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ee      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003576:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800357a:	d111      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800357c:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003588:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358a:	400b      	ands	r3, r1
 800358c:	4901      	ldr	r1, [pc, #4]	@ (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000
 800359c:	0ffffcff 	.word	0x0ffffcff
 80035a0:	4bac      	ldr	r3, [pc, #688]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4aab      	ldr	r2, [pc, #684]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	4ba9      	ldr	r3, [pc, #676]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	49a6      	ldr	r1, [pc, #664]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ca:	4ba2      	ldr	r3, [pc, #648]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035d0:	4aa0      	ldr	r2, [pc, #640]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80035da:	4b9e      	ldr	r3, [pc, #632]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	499b      	ldr	r1, [pc, #620]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f8:	4b96      	ldr	r3, [pc, #600]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003606:	4993      	ldr	r1, [pc, #588]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361a:	4b8e      	ldr	r3, [pc, #568]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003628:	498a      	ldr	r1, [pc, #552]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800363c:	4b85      	ldr	r3, [pc, #532]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364a:	4982      	ldr	r1, [pc, #520]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800365e:	4b7d      	ldr	r3, [pc, #500]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003664:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4979      	ldr	r1, [pc, #484]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003680:	4b74      	ldr	r3, [pc, #464]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	4971      	ldr	r1, [pc, #452]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a8:	f023 020c 	bic.w	r2, r3, #12
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b0:	4968      	ldr	r1, [pc, #416]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c4:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d2:	4960      	ldr	r1, [pc, #384]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	4957      	ldr	r1, [pc, #348]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003708:	4b52      	ldr	r3, [pc, #328]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	494f      	ldr	r1, [pc, #316]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800372a:	4b4a      	ldr	r3, [pc, #296]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003730:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	4946      	ldr	r1, [pc, #280]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800374c:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375a:	493e      	ldr	r1, [pc, #248]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800376e:	4b39      	ldr	r3, [pc, #228]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003774:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	4935      	ldr	r1, [pc, #212]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003790:	4b30      	ldr	r3, [pc, #192]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379e:	492d      	ldr	r1, [pc, #180]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037b2:	4b28      	ldr	r3, [pc, #160]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037c0:	4924      	ldr	r1, [pc, #144]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d0:	d101      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f2:	4b18      	ldr	r3, [pc, #96]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003800:	4914      	ldr	r1, [pc, #80]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003814:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003824:	490b      	ldr	r1, [pc, #44]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003838:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003848:	4902      	ldr	r1, [pc, #8]	@ (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003864:	4b8a      	ldr	r3, [pc, #552]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800386a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	4986      	ldr	r1, [pc, #536]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003888:	4b81      	ldr	r3, [pc, #516]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800388e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003898:	497d      	ldr	r1, [pc, #500]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d006      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80d6 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b4:	4b76      	ldr	r3, [pc, #472]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a75      	ldr	r2, [pc, #468]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fd fcea 	bl	8001298 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c8:	f7fd fce6 	bl	8001298 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e195      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038da:	4b6d      	ldr	r3, [pc, #436]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d021      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038fa:	4b65      	ldr	r3, [pc, #404]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003908:	4b61      	ldr	r3, [pc, #388]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390e:	0e1b      	lsrs	r3, r3, #24
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	071b      	lsls	r3, r3, #28
 800392e:	4958      	ldr	r1, [pc, #352]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02e      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003960:	d129      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003962:	4b4b      	ldr	r3, [pc, #300]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003970:	4b47      	ldr	r3, [pc, #284]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	493e      	ldr	r1, [pc, #248]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800399e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a4:	f023 021f 	bic.w	r2, r3, #31
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4938      	ldr	r1, [pc, #224]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01d      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039c8:	0e1b      	lsrs	r3, r3, #24
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039d6:	0f1b      	lsrs	r3, r3, #28
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	019a      	lsls	r2, r3, #6
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	431a      	orrs	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	071b      	lsls	r3, r3, #28
 80039f6:	4926      	ldr	r1, [pc, #152]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d011      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	491a      	ldr	r1, [pc, #104]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a17      	ldr	r2, [pc, #92]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fd fc2d 	bl	8001298 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a42:	f7fd fc29 	bl	8001298 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	@ 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0d8      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a54:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	f040 80ce 	bne.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd fc10 	bl	8001298 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a7c:	f7fd fc0c 	bl	8001298 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d904      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0bb      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a94:	4b5e      	ldr	r3, [pc, #376]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa0:	d0ec      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4944      	ldr	r1, [pc, #272]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b06:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	493d      	ldr	r1, [pc, #244]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b34:	d11d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b44:	4b32      	ldr	r3, [pc, #200]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	0f1b      	lsrs	r3, r3, #28
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	019a      	lsls	r2, r3, #6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4929      	ldr	r1, [pc, #164]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	0e1b      	lsrs	r3, r3, #24
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b8c:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4917      	ldr	r1, [pc, #92]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	4911      	ldr	r1, [pc, #68]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fd fb5c 	bl	8001298 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be4:	f7fd fb58 	bl	8001298 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e007      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e040      	b.n	8003ca8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd f890 	bl	8000d5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	@ 0x24
 8003c40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa8c 	bl	8004178 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f825 	bl	8003cb0 <UART_SetConfig>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e01b      	b.n	8003ca8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fb0b 	bl	80042bc <UART_CheckIdleState>
 8003ca6:	4603      	mov	r3, r0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4ba6      	ldr	r3, [pc, #664]	@ (8003f74 <UART_SetConfig+0x2c4>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	6979      	ldr	r1, [r7, #20]
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a94      	ldr	r2, [pc, #592]	@ (8003f78 <UART_SetConfig+0x2c8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d120      	bne.n	8003d6e <UART_SetConfig+0xbe>
 8003d2c:	4b93      	ldr	r3, [pc, #588]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d816      	bhi.n	8003d68 <UART_SetConfig+0xb8>
 8003d3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d40 <UART_SetConfig+0x90>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d57 	.word	0x08003d57
 8003d4c:	08003d63 	.word	0x08003d63
 8003d50:	2301      	movs	r3, #1
 8003d52:	77fb      	strb	r3, [r7, #31]
 8003d54:	e150      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
 8003d5a:	e14d      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	77fb      	strb	r3, [r7, #31]
 8003d60:	e14a      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003d62:	2308      	movs	r3, #8
 8003d64:	77fb      	strb	r3, [r7, #31]
 8003d66:	e147      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	77fb      	strb	r3, [r7, #31]
 8003d6c:	e144      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a83      	ldr	r2, [pc, #524]	@ (8003f80 <UART_SetConfig+0x2d0>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d132      	bne.n	8003dde <UART_SetConfig+0x12e>
 8003d78:	4b80      	ldr	r3, [pc, #512]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f003 030c 	and.w	r3, r3, #12
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d828      	bhi.n	8003dd8 <UART_SetConfig+0x128>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <UART_SetConfig+0xdc>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003dc1 	.word	0x08003dc1
 8003d90:	08003dd9 	.word	0x08003dd9
 8003d94:	08003dd9 	.word	0x08003dd9
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003dd9 	.word	0x08003dd9
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003dd9 	.word	0x08003dd9
 8003dac:	08003dc7 	.word	0x08003dc7
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003dd9 	.word	0x08003dd9
 8003dbc:	08003dd3 	.word	0x08003dd3
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
 8003dc4:	e118      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	77fb      	strb	r3, [r7, #31]
 8003dca:	e115      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	77fb      	strb	r3, [r7, #31]
 8003dd0:	e112      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	77fb      	strb	r3, [r7, #31]
 8003dd6:	e10f      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003dd8:	2310      	movs	r3, #16
 8003dda:	77fb      	strb	r3, [r7, #31]
 8003ddc:	e10c      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <UART_SetConfig+0x2d4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d120      	bne.n	8003e2a <UART_SetConfig+0x17a>
 8003de8:	4b64      	ldr	r3, [pc, #400]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003df2:	2b30      	cmp	r3, #48	@ 0x30
 8003df4:	d013      	beq.n	8003e1e <UART_SetConfig+0x16e>
 8003df6:	2b30      	cmp	r3, #48	@ 0x30
 8003df8:	d814      	bhi.n	8003e24 <UART_SetConfig+0x174>
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d009      	beq.n	8003e12 <UART_SetConfig+0x162>
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d810      	bhi.n	8003e24 <UART_SetConfig+0x174>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <UART_SetConfig+0x15c>
 8003e06:	2b10      	cmp	r3, #16
 8003e08:	d006      	beq.n	8003e18 <UART_SetConfig+0x168>
 8003e0a:	e00b      	b.n	8003e24 <UART_SetConfig+0x174>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	e0f2      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e12:	2302      	movs	r3, #2
 8003e14:	77fb      	strb	r3, [r7, #31]
 8003e16:	e0ef      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	77fb      	strb	r3, [r7, #31]
 8003e1c:	e0ec      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e1e:	2308      	movs	r3, #8
 8003e20:	77fb      	strb	r3, [r7, #31]
 8003e22:	e0e9      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e24:	2310      	movs	r3, #16
 8003e26:	77fb      	strb	r3, [r7, #31]
 8003e28:	e0e6      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a56      	ldr	r2, [pc, #344]	@ (8003f88 <UART_SetConfig+0x2d8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d120      	bne.n	8003e76 <UART_SetConfig+0x1c6>
 8003e34:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e40:	d013      	beq.n	8003e6a <UART_SetConfig+0x1ba>
 8003e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e44:	d814      	bhi.n	8003e70 <UART_SetConfig+0x1c0>
 8003e46:	2b80      	cmp	r3, #128	@ 0x80
 8003e48:	d009      	beq.n	8003e5e <UART_SetConfig+0x1ae>
 8003e4a:	2b80      	cmp	r3, #128	@ 0x80
 8003e4c:	d810      	bhi.n	8003e70 <UART_SetConfig+0x1c0>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <UART_SetConfig+0x1a8>
 8003e52:	2b40      	cmp	r3, #64	@ 0x40
 8003e54:	d006      	beq.n	8003e64 <UART_SetConfig+0x1b4>
 8003e56:	e00b      	b.n	8003e70 <UART_SetConfig+0x1c0>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e0cc      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e0c9      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e0c6      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e0c3      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e0c0      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a44      	ldr	r2, [pc, #272]	@ (8003f8c <UART_SetConfig+0x2dc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d125      	bne.n	8003ecc <UART_SetConfig+0x21c>
 8003e80:	4b3e      	ldr	r3, [pc, #248]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e8e:	d017      	beq.n	8003ec0 <UART_SetConfig+0x210>
 8003e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e94:	d817      	bhi.n	8003ec6 <UART_SetConfig+0x216>
 8003e96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e9a:	d00b      	beq.n	8003eb4 <UART_SetConfig+0x204>
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea0:	d811      	bhi.n	8003ec6 <UART_SetConfig+0x216>
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <UART_SetConfig+0x1fe>
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eaa:	d006      	beq.n	8003eba <UART_SetConfig+0x20a>
 8003eac:	e00b      	b.n	8003ec6 <UART_SetConfig+0x216>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	77fb      	strb	r3, [r7, #31]
 8003eb2:	e0a1      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e09e      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003eba:	2304      	movs	r3, #4
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e09b      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e098      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e095      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f90 <UART_SetConfig+0x2e0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d125      	bne.n	8003f22 <UART_SetConfig+0x272>
 8003ed6:	4b29      	ldr	r3, [pc, #164]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003edc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ee0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee4:	d017      	beq.n	8003f16 <UART_SetConfig+0x266>
 8003ee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eea:	d817      	bhi.n	8003f1c <UART_SetConfig+0x26c>
 8003eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef0:	d00b      	beq.n	8003f0a <UART_SetConfig+0x25a>
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef6:	d811      	bhi.n	8003f1c <UART_SetConfig+0x26c>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <UART_SetConfig+0x254>
 8003efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f00:	d006      	beq.n	8003f10 <UART_SetConfig+0x260>
 8003f02:	e00b      	b.n	8003f1c <UART_SetConfig+0x26c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e076      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e073      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e070      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e06d      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e06a      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a1b      	ldr	r2, [pc, #108]	@ (8003f94 <UART_SetConfig+0x2e4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d138      	bne.n	8003f9e <UART_SetConfig+0x2ee>
 8003f2c:	4b13      	ldr	r3, [pc, #76]	@ (8003f7c <UART_SetConfig+0x2cc>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f3a:	d017      	beq.n	8003f6c <UART_SetConfig+0x2bc>
 8003f3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f40:	d82a      	bhi.n	8003f98 <UART_SetConfig+0x2e8>
 8003f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f46:	d00b      	beq.n	8003f60 <UART_SetConfig+0x2b0>
 8003f48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f4c:	d824      	bhi.n	8003f98 <UART_SetConfig+0x2e8>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <UART_SetConfig+0x2aa>
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f56:	d006      	beq.n	8003f66 <UART_SetConfig+0x2b6>
 8003f58:	e01e      	b.n	8003f98 <UART_SetConfig+0x2e8>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e04b      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f60:	2302      	movs	r3, #2
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e048      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f66:	2304      	movs	r3, #4
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e045      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e042      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f72:	bf00      	nop
 8003f74:	efff69f3 	.word	0xefff69f3
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40004400 	.word	0x40004400
 8003f84:	40004800 	.word	0x40004800
 8003f88:	40004c00 	.word	0x40004c00
 8003f8c:	40005000 	.word	0x40005000
 8003f90:	40011400 	.word	0x40011400
 8003f94:	40007800 	.word	0x40007800
 8003f98:	2310      	movs	r3, #16
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e02c      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a72      	ldr	r2, [pc, #456]	@ (800416c <UART_SetConfig+0x4bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d125      	bne.n	8003ff4 <UART_SetConfig+0x344>
 8003fa8:	4b71      	ldr	r3, [pc, #452]	@ (8004170 <UART_SetConfig+0x4c0>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003fb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fb6:	d017      	beq.n	8003fe8 <UART_SetConfig+0x338>
 8003fb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003fbc:	d817      	bhi.n	8003fee <UART_SetConfig+0x33e>
 8003fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc2:	d00b      	beq.n	8003fdc <UART_SetConfig+0x32c>
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc8:	d811      	bhi.n	8003fee <UART_SetConfig+0x33e>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <UART_SetConfig+0x326>
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd2:	d006      	beq.n	8003fe2 <UART_SetConfig+0x332>
 8003fd4:	e00b      	b.n	8003fee <UART_SetConfig+0x33e>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e00d      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e00a      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003fe2:	2304      	movs	r3, #4
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e007      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	77fb      	strb	r3, [r7, #31]
 8003fec:	e004      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003fee:	2310      	movs	r3, #16
 8003ff0:	77fb      	strb	r3, [r7, #31]
 8003ff2:	e001      	b.n	8003ff8 <UART_SetConfig+0x348>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004000:	d15b      	bne.n	80040ba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004002:	7ffb      	ldrb	r3, [r7, #31]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d828      	bhi.n	800405a <UART_SetConfig+0x3aa>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <UART_SetConfig+0x360>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	0800405b 	.word	0x0800405b
 8004020:	0800404b 	.word	0x0800404b
 8004024:	0800405b 	.word	0x0800405b
 8004028:	0800405b 	.word	0x0800405b
 800402c:	0800405b 	.word	0x0800405b
 8004030:	08004053 	.word	0x08004053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004034:	f7ff f99e 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8004038:	61b8      	str	r0, [r7, #24]
        break;
 800403a:	e013      	b.n	8004064 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800403c:	f7ff f9ae 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 8004040:	61b8      	str	r0, [r7, #24]
        break;
 8004042:	e00f      	b.n	8004064 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004044:	4b4b      	ldr	r3, [pc, #300]	@ (8004174 <UART_SetConfig+0x4c4>)
 8004046:	61bb      	str	r3, [r7, #24]
        break;
 8004048:	e00c      	b.n	8004064 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404a:	f7ff f881 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 800404e:	61b8      	str	r0, [r7, #24]
        break;
 8004050:	e008      	b.n	8004064 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004056:	61bb      	str	r3, [r7, #24]
        break;
 8004058:	e004      	b.n	8004064 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	77bb      	strb	r3, [r7, #30]
        break;
 8004062:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d074      	beq.n	8004154 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	005a      	lsls	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	085b      	lsrs	r3, r3, #1
 8004074:	441a      	add	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	fbb2 f3f3 	udiv	r3, r2, r3
 800407e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b0f      	cmp	r3, #15
 8004084:	d916      	bls.n	80040b4 <UART_SetConfig+0x404>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800408c:	d212      	bcs.n	80040b4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f023 030f 	bic.w	r3, r3, #15
 8004096:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	b29b      	uxth	r3, r3
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	89fb      	ldrh	r3, [r7, #14]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	89fa      	ldrh	r2, [r7, #14]
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e04f      	b.n	8004154 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	77bb      	strb	r3, [r7, #30]
 80040b8:	e04c      	b.n	8004154 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ba:	7ffb      	ldrb	r3, [r7, #31]
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d828      	bhi.n	8004112 <UART_SetConfig+0x462>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <UART_SetConfig+0x418>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	080040ed 	.word	0x080040ed
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040fd 	.word	0x080040fd
 80040d4:	08004113 	.word	0x08004113
 80040d8:	08004103 	.word	0x08004103
 80040dc:	08004113 	.word	0x08004113
 80040e0:	08004113 	.word	0x08004113
 80040e4:	08004113 	.word	0x08004113
 80040e8:	0800410b 	.word	0x0800410b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7ff f942 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80040f0:	61b8      	str	r0, [r7, #24]
        break;
 80040f2:	e013      	b.n	800411c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040f4:	f7ff f952 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 80040f8:	61b8      	str	r0, [r7, #24]
        break;
 80040fa:	e00f      	b.n	800411c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <UART_SetConfig+0x4c4>)
 80040fe:	61bb      	str	r3, [r7, #24]
        break;
 8004100:	e00c      	b.n	800411c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004102:	f7ff f825 	bl	8003150 <HAL_RCC_GetSysClockFreq>
 8004106:	61b8      	str	r0, [r7, #24]
        break;
 8004108:	e008      	b.n	800411c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800410a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800410e:	61bb      	str	r3, [r7, #24]
        break;
 8004110:	e004      	b.n	800411c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	77bb      	strb	r3, [r7, #30]
        break;
 800411a:	bf00      	nop
    }

    if (pclk != 0U)
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085a      	lsrs	r2, r3, #1
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	fbb2 f3f3 	udiv	r3, r2, r3
 8004134:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b0f      	cmp	r3, #15
 800413a:	d909      	bls.n	8004150 <UART_SetConfig+0x4a0>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004142:	d205      	bcs.n	8004150 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60da      	str	r2, [r3, #12]
 800414e:	e001      	b.n	8004154 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004160:	7fbb      	ldrb	r3, [r7, #30]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40007c00 	.word	0x40007c00
 8004170:	40023800 	.word	0x40023800
 8004174:	00f42400 	.word	0x00f42400

08004178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01a      	beq.n	800428e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004276:	d10a      	bne.n	800428e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]
  }
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b098      	sub	sp, #96	@ 0x60
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042cc:	f7fc ffe4 	bl	8001298 <HAL_GetTick>
 80042d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d12e      	bne.n	800433e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e8:	2200      	movs	r2, #0
 80042ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f88c 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d021      	beq.n	800433e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800430a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800430e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
 800431a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800431e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e6      	bne.n	80042fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e062      	b.n	8004404 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d149      	bne.n	80043e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004354:	2200      	movs	r2, #0
 8004356:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f856 	bl	800440c <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03c      	beq.n	80043e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	623b      	str	r3, [r7, #32]
   return(result);
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800437a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
 8004386:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800438a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b8:	61fa      	str	r2, [r7, #28]
 80043ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	69b9      	ldr	r1, [r7, #24]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	617b      	str	r3, [r7, #20]
   return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e011      	b.n	8004404 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3758      	adds	r7, #88	@ 0x58
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	603b      	str	r3, [r7, #0]
 8004418:	4613      	mov	r3, r2
 800441a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800441c:	e04f      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d04b      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004426:	f7fc ff37 	bl	8001298 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	429a      	cmp	r2, r3
 8004434:	d302      	bcc.n	800443c <UART_WaitOnFlagUntilTimeout+0x30>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e04e      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d037      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b80      	cmp	r3, #128	@ 0x80
 8004452:	d034      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d031      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b08      	cmp	r3, #8
 8004466:	d110      	bne.n	800448a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f838 	bl	80044e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2208      	movs	r2, #8
 800447a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e029      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004498:	d111      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f81e 	bl	80044e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e00f      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d0a0      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b095      	sub	sp, #84	@ 0x54
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	461a      	mov	r2, r3
 800450a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
 800450e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004512:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800451a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e6      	bne.n	80044ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3308      	adds	r3, #8
 800453e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004540:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004542:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	2b01      	cmp	r3, #1
 800455a:	d118      	bne.n	800458e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60bb      	str	r3, [r7, #8]
   return(result);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	647b      	str	r3, [r7, #68]	@ 0x44
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	461a      	mov	r2, r3
 8004578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	613b      	str	r3, [r7, #16]
   return(result);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e6      	bne.n	800455c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045a2:	bf00      	nop
 80045a4:	3754      	adds	r7, #84	@ 0x54
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b0:	b084      	sub	sp, #16
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	f107 001c 	add.w	r0, r7, #28
 80045be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045c2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d121      	bne.n	800460e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	4b21      	ldr	r3, [pc, #132]	@ (8004660 <USB_CoreInit+0xb0>)
 80045dc:	4013      	ands	r3, r2
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d105      	bne.n	8004602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa92 	bl	8004b2c <USB_CoreReset>
 8004608:	4603      	mov	r3, r0
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	e010      	b.n	8004630 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fa86 	bl	8004b2c <USB_CoreReset>
 8004620:	4603      	mov	r3, r0
 8004622:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004630:	7fbb      	ldrb	r3, [r7, #30]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d10b      	bne.n	800464e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f043 0206 	orr.w	r2, r3, #6
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800465a:	b004      	add	sp, #16
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	ffbdffbf 	.word	0xffbdffbf

08004664 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 0201 	bic.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d115      	bne.n	80046d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046b4:	200a      	movs	r0, #10
 80046b6:	f7fc fdfb 	bl	80012b0 <HAL_Delay>
      ms += 10U;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	330a      	adds	r3, #10
 80046be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fa25 	bl	8004b10 <USB_GetMode>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d01e      	beq.n	800470a <USB_SetCurrentMode+0x84>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80046d0:	d9f0      	bls.n	80046b4 <USB_SetCurrentMode+0x2e>
 80046d2:	e01a      	b.n	800470a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046e6:	200a      	movs	r0, #10
 80046e8:	f7fc fde2 	bl	80012b0 <HAL_Delay>
      ms += 10U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	330a      	adds	r3, #10
 80046f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa0c 	bl	8004b10 <USB_GetMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <USB_SetCurrentMode+0x84>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2bc7      	cmp	r3, #199	@ 0xc7
 8004702:	d9f0      	bls.n	80046e6 <USB_SetCurrentMode+0x60>
 8004704:	e001      	b.n	800470a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e005      	b.n	8004716 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2bc8      	cmp	r3, #200	@ 0xc8
 800470e:	d101      	bne.n	8004714 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004720:	b084      	sub	sp, #16
 8004722:	b580      	push	{r7, lr}
 8004724:	b086      	sub	sp, #24
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800472e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e009      	b.n	8004754 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	3340      	adds	r3, #64	@ 0x40
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	2200      	movs	r2, #0
 800474c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	3301      	adds	r3, #1
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b0e      	cmp	r3, #14
 8004758:	d9f2      	bls.n	8004740 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800475a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800475e:	2b00      	cmp	r3, #0
 8004760:	d11c      	bne.n	800479c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004770:	f043 0302 	orr.w	r3, r3, #2
 8004774:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e005      	b.n	80047a8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047ae:	461a      	mov	r2, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d10d      	bne.n	80047d8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047c4:	2100      	movs	r1, #0
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f968 	bl	8004a9c <USB_SetDevSpeed>
 80047cc:	e008      	b.n	80047e0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047ce:	2101      	movs	r1, #1
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f963 	bl	8004a9c <USB_SetDevSpeed>
 80047d6:	e003      	b.n	80047e0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047d8:	2103      	movs	r1, #3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f95e 	bl	8004a9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047e0:	2110      	movs	r1, #16
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8fa 	bl	80049dc <USB_FlushTxFifo>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f924 	bl	8004a40 <USB_FlushRxFifo>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004808:	461a      	mov	r2, r3
 800480a:	2300      	movs	r3, #0
 800480c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004814:	461a      	mov	r2, r3
 8004816:	2300      	movs	r3, #0
 8004818:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004820:	461a      	mov	r2, r3
 8004822:	2300      	movs	r3, #0
 8004824:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	e043      	b.n	80048b4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800483e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004842:	d118      	bne.n	8004876 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004856:	461a      	mov	r2, r3
 8004858:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e013      	b.n	8004888 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800486c:	461a      	mov	r2, r3
 800486e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e008      	b.n	8004888 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004882:	461a      	mov	r2, r3
 8004884:	2300      	movs	r3, #0
 8004886:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048a6:	461a      	mov	r2, r3
 80048a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3301      	adds	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80048b8:	461a      	mov	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4293      	cmp	r3, r2
 80048be:	d3b5      	bcc.n	800482c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	e043      	b.n	800494e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048dc:	d118      	bne.n	8004910 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048f0:	461a      	mov	r2, r3
 80048f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e013      	b.n	8004922 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e008      	b.n	8004922 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	2300      	movs	r3, #0
 8004932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	3301      	adds	r3, #1
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004952:	461a      	mov	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4293      	cmp	r3, r2
 8004958:	d3b5      	bcc.n	80048c6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800496c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800497a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800497c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004980:	2b00      	cmp	r3, #0
 8004982:	d105      	bne.n	8004990 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	f043 0210 	orr.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	4b0f      	ldr	r3, [pc, #60]	@ (80049d4 <USB_DevInit+0x2b4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800499c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f043 0208 	orr.w	r2, r3, #8
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d105      	bne.n	80049c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <USB_DevInit+0x2b8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d0:	b004      	add	sp, #16
 80049d2:	4770      	bx	lr
 80049d4:	803c3800 	.word	0x803c3800
 80049d8:	40000004 	.word	0x40000004

080049dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3301      	adds	r3, #1
 80049ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049f6:	d901      	bls.n	80049fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e01b      	b.n	8004a34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	daf2      	bge.n	80049ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	019b      	lsls	r3, r3, #6
 8004a0c:	f043 0220 	orr.w	r2, r3, #32
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3301      	adds	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a20:	d901      	bls.n	8004a26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e006      	b.n	8004a34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d0f0      	beq.n	8004a14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a58:	d901      	bls.n	8004a5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e018      	b.n	8004a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	daf2      	bge.n	8004a4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	3301      	adds	r3, #1
 8004a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a7c:	d901      	bls.n	8004a82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e006      	b.n	8004a90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d0f0      	beq.n	8004a70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ae8:	f023 0303 	bic.w	r3, r3, #3
 8004aec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004afc:	f043 0302 	orr.w	r3, r3, #2
 8004b00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	f003 0301 	and.w	r3, r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b44:	d901      	bls.n	8004b4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e022      	b.n	8004b90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	daf2      	bge.n	8004b38 <USB_CoreReset+0xc>

  count = 10U;
 8004b52:	230a      	movs	r3, #10
 8004b54:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004b56:	e002      	b.n	8004b5e <USB_CoreReset+0x32>
  {
    count--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f9      	bne.n	8004b58 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f043 0201 	orr.w	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b7c:	d901      	bls.n	8004b82 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e006      	b.n	8004b90 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d0f0      	beq.n	8004b70 <USB_CoreReset+0x44>

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <std>:
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004baa:	6083      	str	r3, [r0, #8]
 8004bac:	8181      	strh	r1, [r0, #12]
 8004bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bb0:	81c2      	strh	r2, [r0, #14]
 8004bb2:	6183      	str	r3, [r0, #24]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	305c      	adds	r0, #92	@ 0x5c
 8004bba:	f000 f906 	bl	8004dca <memset>
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <std+0x58>)
 8004bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <std+0x5c>)
 8004bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bfc <std+0x60>)
 8004bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bca:	4b0d      	ldr	r3, [pc, #52]	@ (8004c00 <std+0x64>)
 8004bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <std+0x68>)
 8004bd0:	6224      	str	r4, [r4, #32]
 8004bd2:	429c      	cmp	r4, r3
 8004bd4:	d006      	beq.n	8004be4 <std+0x48>
 8004bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bda:	4294      	cmp	r4, r2
 8004bdc:	d002      	beq.n	8004be4 <std+0x48>
 8004bde:	33d0      	adds	r3, #208	@ 0xd0
 8004be0:	429c      	cmp	r4, r3
 8004be2:	d105      	bne.n	8004bf0 <std+0x54>
 8004be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	f000 b966 	b.w	8004ebc <__retarget_lock_init_recursive>
 8004bf0:	bd10      	pop	{r4, pc}
 8004bf2:	bf00      	nop
 8004bf4:	08004d45 	.word	0x08004d45
 8004bf8:	08004d67 	.word	0x08004d67
 8004bfc:	08004d9f 	.word	0x08004d9f
 8004c00:	08004dc3 	.word	0x08004dc3
 8004c04:	200008f4 	.word	0x200008f4

08004c08 <stdio_exit_handler>:
 8004c08:	4a02      	ldr	r2, [pc, #8]	@ (8004c14 <stdio_exit_handler+0xc>)
 8004c0a:	4903      	ldr	r1, [pc, #12]	@ (8004c18 <stdio_exit_handler+0x10>)
 8004c0c:	4803      	ldr	r0, [pc, #12]	@ (8004c1c <stdio_exit_handler+0x14>)
 8004c0e:	f000 b869 	b.w	8004ce4 <_fwalk_sglue>
 8004c12:	bf00      	nop
 8004c14:	2000000c 	.word	0x2000000c
 8004c18:	08005759 	.word	0x08005759
 8004c1c:	2000001c 	.word	0x2000001c

08004c20 <cleanup_stdio>:
 8004c20:	6841      	ldr	r1, [r0, #4]
 8004c22:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <cleanup_stdio+0x34>)
 8004c24:	4299      	cmp	r1, r3
 8004c26:	b510      	push	{r4, lr}
 8004c28:	4604      	mov	r4, r0
 8004c2a:	d001      	beq.n	8004c30 <cleanup_stdio+0x10>
 8004c2c:	f000 fd94 	bl	8005758 <_fflush_r>
 8004c30:	68a1      	ldr	r1, [r4, #8]
 8004c32:	4b09      	ldr	r3, [pc, #36]	@ (8004c58 <cleanup_stdio+0x38>)
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <cleanup_stdio+0x1e>
 8004c38:	4620      	mov	r0, r4
 8004c3a:	f000 fd8d 	bl	8005758 <_fflush_r>
 8004c3e:	68e1      	ldr	r1, [r4, #12]
 8004c40:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <cleanup_stdio+0x3c>)
 8004c42:	4299      	cmp	r1, r3
 8004c44:	d004      	beq.n	8004c50 <cleanup_stdio+0x30>
 8004c46:	4620      	mov	r0, r4
 8004c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c4c:	f000 bd84 	b.w	8005758 <_fflush_r>
 8004c50:	bd10      	pop	{r4, pc}
 8004c52:	bf00      	nop
 8004c54:	200008f4 	.word	0x200008f4
 8004c58:	2000095c 	.word	0x2000095c
 8004c5c:	200009c4 	.word	0x200009c4

08004c60 <global_stdio_init.part.0>:
 8004c60:	b510      	push	{r4, lr}
 8004c62:	4b0b      	ldr	r3, [pc, #44]	@ (8004c90 <global_stdio_init.part.0+0x30>)
 8004c64:	4c0b      	ldr	r4, [pc, #44]	@ (8004c94 <global_stdio_init.part.0+0x34>)
 8004c66:	4a0c      	ldr	r2, [pc, #48]	@ (8004c98 <global_stdio_init.part.0+0x38>)
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2104      	movs	r1, #4
 8004c70:	f7ff ff94 	bl	8004b9c <std>
 8004c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c78:	2201      	movs	r2, #1
 8004c7a:	2109      	movs	r1, #9
 8004c7c:	f7ff ff8e 	bl	8004b9c <std>
 8004c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c84:	2202      	movs	r2, #2
 8004c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8a:	2112      	movs	r1, #18
 8004c8c:	f7ff bf86 	b.w	8004b9c <std>
 8004c90:	20000a2c 	.word	0x20000a2c
 8004c94:	200008f4 	.word	0x200008f4
 8004c98:	08004c09 	.word	0x08004c09

08004c9c <__sfp_lock_acquire>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__sfp_lock_acquire+0x8>)
 8004c9e:	f000 b90e 	b.w	8004ebe <__retarget_lock_acquire_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	20000a35 	.word	0x20000a35

08004ca8 <__sfp_lock_release>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	@ (8004cb0 <__sfp_lock_release+0x8>)
 8004caa:	f000 b909 	b.w	8004ec0 <__retarget_lock_release_recursive>
 8004cae:	bf00      	nop
 8004cb0:	20000a35 	.word	0x20000a35

08004cb4 <__sinit>:
 8004cb4:	b510      	push	{r4, lr}
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	f7ff fff0 	bl	8004c9c <__sfp_lock_acquire>
 8004cbc:	6a23      	ldr	r3, [r4, #32]
 8004cbe:	b11b      	cbz	r3, 8004cc8 <__sinit+0x14>
 8004cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc4:	f7ff bff0 	b.w	8004ca8 <__sfp_lock_release>
 8004cc8:	4b04      	ldr	r3, [pc, #16]	@ (8004cdc <__sinit+0x28>)
 8004cca:	6223      	str	r3, [r4, #32]
 8004ccc:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <__sinit+0x2c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f5      	bne.n	8004cc0 <__sinit+0xc>
 8004cd4:	f7ff ffc4 	bl	8004c60 <global_stdio_init.part.0>
 8004cd8:	e7f2      	b.n	8004cc0 <__sinit+0xc>
 8004cda:	bf00      	nop
 8004cdc:	08004c21 	.word	0x08004c21
 8004ce0:	20000a2c 	.word	0x20000a2c

08004ce4 <_fwalk_sglue>:
 8004ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce8:	4607      	mov	r7, r0
 8004cea:	4688      	mov	r8, r1
 8004cec:	4614      	mov	r4, r2
 8004cee:	2600      	movs	r6, #0
 8004cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8004cf8:	d505      	bpl.n	8004d06 <_fwalk_sglue+0x22>
 8004cfa:	6824      	ldr	r4, [r4, #0]
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	d1f7      	bne.n	8004cf0 <_fwalk_sglue+0xc>
 8004d00:	4630      	mov	r0, r6
 8004d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d06:	89ab      	ldrh	r3, [r5, #12]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d907      	bls.n	8004d1c <_fwalk_sglue+0x38>
 8004d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d10:	3301      	adds	r3, #1
 8004d12:	d003      	beq.n	8004d1c <_fwalk_sglue+0x38>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4638      	mov	r0, r7
 8004d18:	47c0      	blx	r8
 8004d1a:	4306      	orrs	r6, r0
 8004d1c:	3568      	adds	r5, #104	@ 0x68
 8004d1e:	e7e9      	b.n	8004cf4 <_fwalk_sglue+0x10>

08004d20 <iprintf>:
 8004d20:	b40f      	push	{r0, r1, r2, r3}
 8004d22:	b507      	push	{r0, r1, r2, lr}
 8004d24:	4906      	ldr	r1, [pc, #24]	@ (8004d40 <iprintf+0x20>)
 8004d26:	ab04      	add	r3, sp, #16
 8004d28:	6808      	ldr	r0, [r1, #0]
 8004d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2e:	6881      	ldr	r1, [r0, #8]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	f000 f9e9 	bl	8005108 <_vfiprintf_r>
 8004d36:	b003      	add	sp, #12
 8004d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d3c:	b004      	add	sp, #16
 8004d3e:	4770      	bx	lr
 8004d40:	20000018 	.word	0x20000018

08004d44 <__sread>:
 8004d44:	b510      	push	{r4, lr}
 8004d46:	460c      	mov	r4, r1
 8004d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4c:	f000 f868 	bl	8004e20 <_read_r>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	bfab      	itete	ge
 8004d54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d56:	89a3      	ldrhlt	r3, [r4, #12]
 8004d58:	181b      	addge	r3, r3, r0
 8004d5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d5e:	bfac      	ite	ge
 8004d60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d62:	81a3      	strhlt	r3, [r4, #12]
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <__swrite>:
 8004d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6a:	461f      	mov	r7, r3
 8004d6c:	898b      	ldrh	r3, [r1, #12]
 8004d6e:	05db      	lsls	r3, r3, #23
 8004d70:	4605      	mov	r5, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	4616      	mov	r6, r2
 8004d76:	d505      	bpl.n	8004d84 <__swrite+0x1e>
 8004d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f000 f83c 	bl	8004dfc <_lseek_r>
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	4632      	mov	r2, r6
 8004d92:	463b      	mov	r3, r7
 8004d94:	4628      	mov	r0, r5
 8004d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d9a:	f000 b853 	b.w	8004e44 <_write_r>

08004d9e <__sseek>:
 8004d9e:	b510      	push	{r4, lr}
 8004da0:	460c      	mov	r4, r1
 8004da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da6:	f000 f829 	bl	8004dfc <_lseek_r>
 8004daa:	1c43      	adds	r3, r0, #1
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	bf15      	itete	ne
 8004db0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004db2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004db6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004dba:	81a3      	strheq	r3, [r4, #12]
 8004dbc:	bf18      	it	ne
 8004dbe:	81a3      	strhne	r3, [r4, #12]
 8004dc0:	bd10      	pop	{r4, pc}

08004dc2 <__sclose>:
 8004dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc6:	f000 b809 	b.w	8004ddc <_close_r>

08004dca <memset>:
 8004dca:	4402      	add	r2, r0
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d100      	bne.n	8004dd4 <memset+0xa>
 8004dd2:	4770      	bx	lr
 8004dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd8:	e7f9      	b.n	8004dce <memset+0x4>
	...

08004ddc <_close_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4d06      	ldr	r5, [pc, #24]	@ (8004df8 <_close_r+0x1c>)
 8004de0:	2300      	movs	r3, #0
 8004de2:	4604      	mov	r4, r0
 8004de4:	4608      	mov	r0, r1
 8004de6:	602b      	str	r3, [r5, #0]
 8004de8:	f7fc f960 	bl	80010ac <_close>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_close_r+0x1a>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_close_r+0x1a>
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	20000a30 	.word	0x20000a30

08004dfc <_lseek_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4d07      	ldr	r5, [pc, #28]	@ (8004e1c <_lseek_r+0x20>)
 8004e00:	4604      	mov	r4, r0
 8004e02:	4608      	mov	r0, r1
 8004e04:	4611      	mov	r1, r2
 8004e06:	2200      	movs	r2, #0
 8004e08:	602a      	str	r2, [r5, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fc f975 	bl	80010fa <_lseek>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_lseek_r+0x1e>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_lseek_r+0x1e>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000a30 	.word	0x20000a30

08004e20 <_read_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	@ (8004e40 <_read_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc f903 	bl	800103a <_read>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_read_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_read_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000a30 	.word	0x20000a30

08004e44 <_write_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4d07      	ldr	r5, [pc, #28]	@ (8004e64 <_write_r+0x20>)
 8004e48:	4604      	mov	r4, r0
 8004e4a:	4608      	mov	r0, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	602a      	str	r2, [r5, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	f7fc f90e 	bl	8001074 <_write>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_write_r+0x1e>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_write_r+0x1e>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000a30 	.word	0x20000a30

08004e68 <__errno>:
 8004e68:	4b01      	ldr	r3, [pc, #4]	@ (8004e70 <__errno+0x8>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000018 	.word	0x20000018

08004e74 <__libc_init_array>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4d0d      	ldr	r5, [pc, #52]	@ (8004eac <__libc_init_array+0x38>)
 8004e78:	4c0d      	ldr	r4, [pc, #52]	@ (8004eb0 <__libc_init_array+0x3c>)
 8004e7a:	1b64      	subs	r4, r4, r5
 8004e7c:	10a4      	asrs	r4, r4, #2
 8004e7e:	2600      	movs	r6, #0
 8004e80:	42a6      	cmp	r6, r4
 8004e82:	d109      	bne.n	8004e98 <__libc_init_array+0x24>
 8004e84:	4d0b      	ldr	r5, [pc, #44]	@ (8004eb4 <__libc_init_array+0x40>)
 8004e86:	4c0c      	ldr	r4, [pc, #48]	@ (8004eb8 <__libc_init_array+0x44>)
 8004e88:	f000 fdb6 	bl	80059f8 <_init>
 8004e8c:	1b64      	subs	r4, r4, r5
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	2600      	movs	r6, #0
 8004e92:	42a6      	cmp	r6, r4
 8004e94:	d105      	bne.n	8004ea2 <__libc_init_array+0x2e>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9c:	4798      	blx	r3
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	e7ee      	b.n	8004e80 <__libc_init_array+0xc>
 8004ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea6:	4798      	blx	r3
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	e7f2      	b.n	8004e92 <__libc_init_array+0x1e>
 8004eac:	08005a7c 	.word	0x08005a7c
 8004eb0:	08005a7c 	.word	0x08005a7c
 8004eb4:	08005a7c 	.word	0x08005a7c
 8004eb8:	08005a80 	.word	0x08005a80

08004ebc <__retarget_lock_init_recursive>:
 8004ebc:	4770      	bx	lr

08004ebe <__retarget_lock_acquire_recursive>:
 8004ebe:	4770      	bx	lr

08004ec0 <__retarget_lock_release_recursive>:
 8004ec0:	4770      	bx	lr
	...

08004ec4 <_free_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d041      	beq.n	8004f50 <_free_r+0x8c>
 8004ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ed0:	1f0c      	subs	r4, r1, #4
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bfb8      	it	lt
 8004ed6:	18e4      	addlt	r4, r4, r3
 8004ed8:	f000 f8e0 	bl	800509c <__malloc_lock>
 8004edc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f54 <_free_r+0x90>)
 8004ede:	6813      	ldr	r3, [r2, #0]
 8004ee0:	b933      	cbnz	r3, 8004ef0 <_free_r+0x2c>
 8004ee2:	6063      	str	r3, [r4, #4]
 8004ee4:	6014      	str	r4, [r2, #0]
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eec:	f000 b8dc 	b.w	80050a8 <__malloc_unlock>
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	d908      	bls.n	8004f06 <_free_r+0x42>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	1821      	adds	r1, r4, r0
 8004ef8:	428b      	cmp	r3, r1
 8004efa:	bf01      	itttt	eq
 8004efc:	6819      	ldreq	r1, [r3, #0]
 8004efe:	685b      	ldreq	r3, [r3, #4]
 8004f00:	1809      	addeq	r1, r1, r0
 8004f02:	6021      	streq	r1, [r4, #0]
 8004f04:	e7ed      	b.n	8004ee2 <_free_r+0x1e>
 8004f06:	461a      	mov	r2, r3
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	b10b      	cbz	r3, 8004f10 <_free_r+0x4c>
 8004f0c:	42a3      	cmp	r3, r4
 8004f0e:	d9fa      	bls.n	8004f06 <_free_r+0x42>
 8004f10:	6811      	ldr	r1, [r2, #0]
 8004f12:	1850      	adds	r0, r2, r1
 8004f14:	42a0      	cmp	r0, r4
 8004f16:	d10b      	bne.n	8004f30 <_free_r+0x6c>
 8004f18:	6820      	ldr	r0, [r4, #0]
 8004f1a:	4401      	add	r1, r0
 8004f1c:	1850      	adds	r0, r2, r1
 8004f1e:	4283      	cmp	r3, r0
 8004f20:	6011      	str	r1, [r2, #0]
 8004f22:	d1e0      	bne.n	8004ee6 <_free_r+0x22>
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	6053      	str	r3, [r2, #4]
 8004f2a:	4408      	add	r0, r1
 8004f2c:	6010      	str	r0, [r2, #0]
 8004f2e:	e7da      	b.n	8004ee6 <_free_r+0x22>
 8004f30:	d902      	bls.n	8004f38 <_free_r+0x74>
 8004f32:	230c      	movs	r3, #12
 8004f34:	602b      	str	r3, [r5, #0]
 8004f36:	e7d6      	b.n	8004ee6 <_free_r+0x22>
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	1821      	adds	r1, r4, r0
 8004f3c:	428b      	cmp	r3, r1
 8004f3e:	bf04      	itt	eq
 8004f40:	6819      	ldreq	r1, [r3, #0]
 8004f42:	685b      	ldreq	r3, [r3, #4]
 8004f44:	6063      	str	r3, [r4, #4]
 8004f46:	bf04      	itt	eq
 8004f48:	1809      	addeq	r1, r1, r0
 8004f4a:	6021      	streq	r1, [r4, #0]
 8004f4c:	6054      	str	r4, [r2, #4]
 8004f4e:	e7ca      	b.n	8004ee6 <_free_r+0x22>
 8004f50:	bd38      	pop	{r3, r4, r5, pc}
 8004f52:	bf00      	nop
 8004f54:	20000a3c 	.word	0x20000a3c

08004f58 <sbrk_aligned>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	4e0f      	ldr	r6, [pc, #60]	@ (8004f98 <sbrk_aligned+0x40>)
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	6831      	ldr	r1, [r6, #0]
 8004f60:	4605      	mov	r5, r0
 8004f62:	b911      	cbnz	r1, 8004f6a <sbrk_aligned+0x12>
 8004f64:	f000 fcb4 	bl	80058d0 <_sbrk_r>
 8004f68:	6030      	str	r0, [r6, #0]
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fcaf 	bl	80058d0 <_sbrk_r>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d103      	bne.n	8004f7e <sbrk_aligned+0x26>
 8004f76:	f04f 34ff 	mov.w	r4, #4294967295
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	1cc4      	adds	r4, r0, #3
 8004f80:	f024 0403 	bic.w	r4, r4, #3
 8004f84:	42a0      	cmp	r0, r4
 8004f86:	d0f8      	beq.n	8004f7a <sbrk_aligned+0x22>
 8004f88:	1a21      	subs	r1, r4, r0
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 fca0 	bl	80058d0 <_sbrk_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1f2      	bne.n	8004f7a <sbrk_aligned+0x22>
 8004f94:	e7ef      	b.n	8004f76 <sbrk_aligned+0x1e>
 8004f96:	bf00      	nop
 8004f98:	20000a38 	.word	0x20000a38

08004f9c <_malloc_r>:
 8004f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa0:	1ccd      	adds	r5, r1, #3
 8004fa2:	f025 0503 	bic.w	r5, r5, #3
 8004fa6:	3508      	adds	r5, #8
 8004fa8:	2d0c      	cmp	r5, #12
 8004faa:	bf38      	it	cc
 8004fac:	250c      	movcc	r5, #12
 8004fae:	2d00      	cmp	r5, #0
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	db01      	blt.n	8004fb8 <_malloc_r+0x1c>
 8004fb4:	42a9      	cmp	r1, r5
 8004fb6:	d904      	bls.n	8004fc2 <_malloc_r+0x26>
 8004fb8:	230c      	movs	r3, #12
 8004fba:	6033      	str	r3, [r6, #0]
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005098 <_malloc_r+0xfc>
 8004fc6:	f000 f869 	bl	800509c <__malloc_lock>
 8004fca:	f8d8 3000 	ldr.w	r3, [r8]
 8004fce:	461c      	mov	r4, r3
 8004fd0:	bb44      	cbnz	r4, 8005024 <_malloc_r+0x88>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff ffbf 	bl	8004f58 <sbrk_aligned>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	4604      	mov	r4, r0
 8004fde:	d158      	bne.n	8005092 <_malloc_r+0xf6>
 8004fe0:	f8d8 4000 	ldr.w	r4, [r8]
 8004fe4:	4627      	mov	r7, r4
 8004fe6:	2f00      	cmp	r7, #0
 8004fe8:	d143      	bne.n	8005072 <_malloc_r+0xd6>
 8004fea:	2c00      	cmp	r4, #0
 8004fec:	d04b      	beq.n	8005086 <_malloc_r+0xea>
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	eb04 0903 	add.w	r9, r4, r3
 8004ff8:	f000 fc6a 	bl	80058d0 <_sbrk_r>
 8004ffc:	4581      	cmp	r9, r0
 8004ffe:	d142      	bne.n	8005086 <_malloc_r+0xea>
 8005000:	6821      	ldr	r1, [r4, #0]
 8005002:	1a6d      	subs	r5, r5, r1
 8005004:	4629      	mov	r1, r5
 8005006:	4630      	mov	r0, r6
 8005008:	f7ff ffa6 	bl	8004f58 <sbrk_aligned>
 800500c:	3001      	adds	r0, #1
 800500e:	d03a      	beq.n	8005086 <_malloc_r+0xea>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	442b      	add	r3, r5
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	f8d8 3000 	ldr.w	r3, [r8]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	bb62      	cbnz	r2, 8005078 <_malloc_r+0xdc>
 800501e:	f8c8 7000 	str.w	r7, [r8]
 8005022:	e00f      	b.n	8005044 <_malloc_r+0xa8>
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	1b52      	subs	r2, r2, r5
 8005028:	d420      	bmi.n	800506c <_malloc_r+0xd0>
 800502a:	2a0b      	cmp	r2, #11
 800502c:	d917      	bls.n	800505e <_malloc_r+0xc2>
 800502e:	1961      	adds	r1, r4, r5
 8005030:	42a3      	cmp	r3, r4
 8005032:	6025      	str	r5, [r4, #0]
 8005034:	bf18      	it	ne
 8005036:	6059      	strne	r1, [r3, #4]
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	bf08      	it	eq
 800503c:	f8c8 1000 	streq.w	r1, [r8]
 8005040:	5162      	str	r2, [r4, r5]
 8005042:	604b      	str	r3, [r1, #4]
 8005044:	4630      	mov	r0, r6
 8005046:	f000 f82f 	bl	80050a8 <__malloc_unlock>
 800504a:	f104 000b 	add.w	r0, r4, #11
 800504e:	1d23      	adds	r3, r4, #4
 8005050:	f020 0007 	bic.w	r0, r0, #7
 8005054:	1ac2      	subs	r2, r0, r3
 8005056:	bf1c      	itt	ne
 8005058:	1a1b      	subne	r3, r3, r0
 800505a:	50a3      	strne	r3, [r4, r2]
 800505c:	e7af      	b.n	8004fbe <_malloc_r+0x22>
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	42a3      	cmp	r3, r4
 8005062:	bf0c      	ite	eq
 8005064:	f8c8 2000 	streq.w	r2, [r8]
 8005068:	605a      	strne	r2, [r3, #4]
 800506a:	e7eb      	b.n	8005044 <_malloc_r+0xa8>
 800506c:	4623      	mov	r3, r4
 800506e:	6864      	ldr	r4, [r4, #4]
 8005070:	e7ae      	b.n	8004fd0 <_malloc_r+0x34>
 8005072:	463c      	mov	r4, r7
 8005074:	687f      	ldr	r7, [r7, #4]
 8005076:	e7b6      	b.n	8004fe6 <_malloc_r+0x4a>
 8005078:	461a      	mov	r2, r3
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	42a3      	cmp	r3, r4
 800507e:	d1fb      	bne.n	8005078 <_malloc_r+0xdc>
 8005080:	2300      	movs	r3, #0
 8005082:	6053      	str	r3, [r2, #4]
 8005084:	e7de      	b.n	8005044 <_malloc_r+0xa8>
 8005086:	230c      	movs	r3, #12
 8005088:	6033      	str	r3, [r6, #0]
 800508a:	4630      	mov	r0, r6
 800508c:	f000 f80c 	bl	80050a8 <__malloc_unlock>
 8005090:	e794      	b.n	8004fbc <_malloc_r+0x20>
 8005092:	6005      	str	r5, [r0, #0]
 8005094:	e7d6      	b.n	8005044 <_malloc_r+0xa8>
 8005096:	bf00      	nop
 8005098:	20000a3c 	.word	0x20000a3c

0800509c <__malloc_lock>:
 800509c:	4801      	ldr	r0, [pc, #4]	@ (80050a4 <__malloc_lock+0x8>)
 800509e:	f7ff bf0e 	b.w	8004ebe <__retarget_lock_acquire_recursive>
 80050a2:	bf00      	nop
 80050a4:	20000a34 	.word	0x20000a34

080050a8 <__malloc_unlock>:
 80050a8:	4801      	ldr	r0, [pc, #4]	@ (80050b0 <__malloc_unlock+0x8>)
 80050aa:	f7ff bf09 	b.w	8004ec0 <__retarget_lock_release_recursive>
 80050ae:	bf00      	nop
 80050b0:	20000a34 	.word	0x20000a34

080050b4 <__sfputc_r>:
 80050b4:	6893      	ldr	r3, [r2, #8]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	b410      	push	{r4}
 80050bc:	6093      	str	r3, [r2, #8]
 80050be:	da08      	bge.n	80050d2 <__sfputc_r+0x1e>
 80050c0:	6994      	ldr	r4, [r2, #24]
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	db01      	blt.n	80050ca <__sfputc_r+0x16>
 80050c6:	290a      	cmp	r1, #10
 80050c8:	d103      	bne.n	80050d2 <__sfputc_r+0x1e>
 80050ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ce:	f000 bb6b 	b.w	80057a8 <__swbuf_r>
 80050d2:	6813      	ldr	r3, [r2, #0]
 80050d4:	1c58      	adds	r0, r3, #1
 80050d6:	6010      	str	r0, [r2, #0]
 80050d8:	7019      	strb	r1, [r3, #0]
 80050da:	4608      	mov	r0, r1
 80050dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <__sfputs_r>:
 80050e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	4614      	mov	r4, r2
 80050ea:	18d5      	adds	r5, r2, r3
 80050ec:	42ac      	cmp	r4, r5
 80050ee:	d101      	bne.n	80050f4 <__sfputs_r+0x12>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e007      	b.n	8005104 <__sfputs_r+0x22>
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	463a      	mov	r2, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff ffda 	bl	80050b4 <__sfputc_r>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d1f3      	bne.n	80050ec <__sfputs_r+0xa>
 8005104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005108 <_vfiprintf_r>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	460d      	mov	r5, r1
 800510e:	b09d      	sub	sp, #116	@ 0x74
 8005110:	4614      	mov	r4, r2
 8005112:	4698      	mov	r8, r3
 8005114:	4606      	mov	r6, r0
 8005116:	b118      	cbz	r0, 8005120 <_vfiprintf_r+0x18>
 8005118:	6a03      	ldr	r3, [r0, #32]
 800511a:	b90b      	cbnz	r3, 8005120 <_vfiprintf_r+0x18>
 800511c:	f7ff fdca 	bl	8004cb4 <__sinit>
 8005120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005122:	07d9      	lsls	r1, r3, #31
 8005124:	d405      	bmi.n	8005132 <_vfiprintf_r+0x2a>
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	059a      	lsls	r2, r3, #22
 800512a:	d402      	bmi.n	8005132 <_vfiprintf_r+0x2a>
 800512c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800512e:	f7ff fec6 	bl	8004ebe <__retarget_lock_acquire_recursive>
 8005132:	89ab      	ldrh	r3, [r5, #12]
 8005134:	071b      	lsls	r3, r3, #28
 8005136:	d501      	bpl.n	800513c <_vfiprintf_r+0x34>
 8005138:	692b      	ldr	r3, [r5, #16]
 800513a:	b99b      	cbnz	r3, 8005164 <_vfiprintf_r+0x5c>
 800513c:	4629      	mov	r1, r5
 800513e:	4630      	mov	r0, r6
 8005140:	f000 fb70 	bl	8005824 <__swsetup_r>
 8005144:	b170      	cbz	r0, 8005164 <_vfiprintf_r+0x5c>
 8005146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005148:	07dc      	lsls	r4, r3, #31
 800514a:	d504      	bpl.n	8005156 <_vfiprintf_r+0x4e>
 800514c:	f04f 30ff 	mov.w	r0, #4294967295
 8005150:	b01d      	add	sp, #116	@ 0x74
 8005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005156:	89ab      	ldrh	r3, [r5, #12]
 8005158:	0598      	lsls	r0, r3, #22
 800515a:	d4f7      	bmi.n	800514c <_vfiprintf_r+0x44>
 800515c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800515e:	f7ff feaf 	bl	8004ec0 <__retarget_lock_release_recursive>
 8005162:	e7f3      	b.n	800514c <_vfiprintf_r+0x44>
 8005164:	2300      	movs	r3, #0
 8005166:	9309      	str	r3, [sp, #36]	@ 0x24
 8005168:	2320      	movs	r3, #32
 800516a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800516e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005172:	2330      	movs	r3, #48	@ 0x30
 8005174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005324 <_vfiprintf_r+0x21c>
 8005178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800517c:	f04f 0901 	mov.w	r9, #1
 8005180:	4623      	mov	r3, r4
 8005182:	469a      	mov	sl, r3
 8005184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005188:	b10a      	cbz	r2, 800518e <_vfiprintf_r+0x86>
 800518a:	2a25      	cmp	r2, #37	@ 0x25
 800518c:	d1f9      	bne.n	8005182 <_vfiprintf_r+0x7a>
 800518e:	ebba 0b04 	subs.w	fp, sl, r4
 8005192:	d00b      	beq.n	80051ac <_vfiprintf_r+0xa4>
 8005194:	465b      	mov	r3, fp
 8005196:	4622      	mov	r2, r4
 8005198:	4629      	mov	r1, r5
 800519a:	4630      	mov	r0, r6
 800519c:	f7ff ffa1 	bl	80050e2 <__sfputs_r>
 80051a0:	3001      	adds	r0, #1
 80051a2:	f000 80a7 	beq.w	80052f4 <_vfiprintf_r+0x1ec>
 80051a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051a8:	445a      	add	r2, fp
 80051aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80051ac:	f89a 3000 	ldrb.w	r3, [sl]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 809f 	beq.w	80052f4 <_vfiprintf_r+0x1ec>
 80051b6:	2300      	movs	r3, #0
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051c0:	f10a 0a01 	add.w	sl, sl, #1
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	9307      	str	r3, [sp, #28]
 80051c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ce:	4654      	mov	r4, sl
 80051d0:	2205      	movs	r2, #5
 80051d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d6:	4853      	ldr	r0, [pc, #332]	@ (8005324 <_vfiprintf_r+0x21c>)
 80051d8:	f7fb f832 	bl	8000240 <memchr>
 80051dc:	9a04      	ldr	r2, [sp, #16]
 80051de:	b9d8      	cbnz	r0, 8005218 <_vfiprintf_r+0x110>
 80051e0:	06d1      	lsls	r1, r2, #27
 80051e2:	bf44      	itt	mi
 80051e4:	2320      	movmi	r3, #32
 80051e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051ea:	0713      	lsls	r3, r2, #28
 80051ec:	bf44      	itt	mi
 80051ee:	232b      	movmi	r3, #43	@ 0x2b
 80051f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051f4:	f89a 3000 	ldrb.w	r3, [sl]
 80051f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051fa:	d015      	beq.n	8005228 <_vfiprintf_r+0x120>
 80051fc:	9a07      	ldr	r2, [sp, #28]
 80051fe:	4654      	mov	r4, sl
 8005200:	2000      	movs	r0, #0
 8005202:	f04f 0c0a 	mov.w	ip, #10
 8005206:	4621      	mov	r1, r4
 8005208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800520c:	3b30      	subs	r3, #48	@ 0x30
 800520e:	2b09      	cmp	r3, #9
 8005210:	d94b      	bls.n	80052aa <_vfiprintf_r+0x1a2>
 8005212:	b1b0      	cbz	r0, 8005242 <_vfiprintf_r+0x13a>
 8005214:	9207      	str	r2, [sp, #28]
 8005216:	e014      	b.n	8005242 <_vfiprintf_r+0x13a>
 8005218:	eba0 0308 	sub.w	r3, r0, r8
 800521c:	fa09 f303 	lsl.w	r3, r9, r3
 8005220:	4313      	orrs	r3, r2
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	46a2      	mov	sl, r4
 8005226:	e7d2      	b.n	80051ce <_vfiprintf_r+0xc6>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	1d19      	adds	r1, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	9103      	str	r1, [sp, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfbb      	ittet	lt
 8005234:	425b      	neglt	r3, r3
 8005236:	f042 0202 	orrlt.w	r2, r2, #2
 800523a:	9307      	strge	r3, [sp, #28]
 800523c:	9307      	strlt	r3, [sp, #28]
 800523e:	bfb8      	it	lt
 8005240:	9204      	strlt	r2, [sp, #16]
 8005242:	7823      	ldrb	r3, [r4, #0]
 8005244:	2b2e      	cmp	r3, #46	@ 0x2e
 8005246:	d10a      	bne.n	800525e <_vfiprintf_r+0x156>
 8005248:	7863      	ldrb	r3, [r4, #1]
 800524a:	2b2a      	cmp	r3, #42	@ 0x2a
 800524c:	d132      	bne.n	80052b4 <_vfiprintf_r+0x1ac>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	9203      	str	r2, [sp, #12]
 8005256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800525a:	3402      	adds	r4, #2
 800525c:	9305      	str	r3, [sp, #20]
 800525e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005334 <_vfiprintf_r+0x22c>
 8005262:	7821      	ldrb	r1, [r4, #0]
 8005264:	2203      	movs	r2, #3
 8005266:	4650      	mov	r0, sl
 8005268:	f7fa ffea 	bl	8000240 <memchr>
 800526c:	b138      	cbz	r0, 800527e <_vfiprintf_r+0x176>
 800526e:	9b04      	ldr	r3, [sp, #16]
 8005270:	eba0 000a 	sub.w	r0, r0, sl
 8005274:	2240      	movs	r2, #64	@ 0x40
 8005276:	4082      	lsls	r2, r0
 8005278:	4313      	orrs	r3, r2
 800527a:	3401      	adds	r4, #1
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005282:	4829      	ldr	r0, [pc, #164]	@ (8005328 <_vfiprintf_r+0x220>)
 8005284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005288:	2206      	movs	r2, #6
 800528a:	f7fa ffd9 	bl	8000240 <memchr>
 800528e:	2800      	cmp	r0, #0
 8005290:	d03f      	beq.n	8005312 <_vfiprintf_r+0x20a>
 8005292:	4b26      	ldr	r3, [pc, #152]	@ (800532c <_vfiprintf_r+0x224>)
 8005294:	bb1b      	cbnz	r3, 80052de <_vfiprintf_r+0x1d6>
 8005296:	9b03      	ldr	r3, [sp, #12]
 8005298:	3307      	adds	r3, #7
 800529a:	f023 0307 	bic.w	r3, r3, #7
 800529e:	3308      	adds	r3, #8
 80052a0:	9303      	str	r3, [sp, #12]
 80052a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052a4:	443b      	add	r3, r7
 80052a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80052a8:	e76a      	b.n	8005180 <_vfiprintf_r+0x78>
 80052aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80052ae:	460c      	mov	r4, r1
 80052b0:	2001      	movs	r0, #1
 80052b2:	e7a8      	b.n	8005206 <_vfiprintf_r+0xfe>
 80052b4:	2300      	movs	r3, #0
 80052b6:	3401      	adds	r4, #1
 80052b8:	9305      	str	r3, [sp, #20]
 80052ba:	4619      	mov	r1, r3
 80052bc:	f04f 0c0a 	mov.w	ip, #10
 80052c0:	4620      	mov	r0, r4
 80052c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052c6:	3a30      	subs	r2, #48	@ 0x30
 80052c8:	2a09      	cmp	r2, #9
 80052ca:	d903      	bls.n	80052d4 <_vfiprintf_r+0x1cc>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0c6      	beq.n	800525e <_vfiprintf_r+0x156>
 80052d0:	9105      	str	r1, [sp, #20]
 80052d2:	e7c4      	b.n	800525e <_vfiprintf_r+0x156>
 80052d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80052d8:	4604      	mov	r4, r0
 80052da:	2301      	movs	r3, #1
 80052dc:	e7f0      	b.n	80052c0 <_vfiprintf_r+0x1b8>
 80052de:	ab03      	add	r3, sp, #12
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	462a      	mov	r2, r5
 80052e4:	4b12      	ldr	r3, [pc, #72]	@ (8005330 <_vfiprintf_r+0x228>)
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	4630      	mov	r0, r6
 80052ea:	f3af 8000 	nop.w
 80052ee:	4607      	mov	r7, r0
 80052f0:	1c78      	adds	r0, r7, #1
 80052f2:	d1d6      	bne.n	80052a2 <_vfiprintf_r+0x19a>
 80052f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80052f6:	07d9      	lsls	r1, r3, #31
 80052f8:	d405      	bmi.n	8005306 <_vfiprintf_r+0x1fe>
 80052fa:	89ab      	ldrh	r3, [r5, #12]
 80052fc:	059a      	lsls	r2, r3, #22
 80052fe:	d402      	bmi.n	8005306 <_vfiprintf_r+0x1fe>
 8005300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005302:	f7ff fddd 	bl	8004ec0 <__retarget_lock_release_recursive>
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	065b      	lsls	r3, r3, #25
 800530a:	f53f af1f 	bmi.w	800514c <_vfiprintf_r+0x44>
 800530e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005310:	e71e      	b.n	8005150 <_vfiprintf_r+0x48>
 8005312:	ab03      	add	r3, sp, #12
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	462a      	mov	r2, r5
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <_vfiprintf_r+0x228>)
 800531a:	a904      	add	r1, sp, #16
 800531c:	4630      	mov	r0, r6
 800531e:	f000 f879 	bl	8005414 <_printf_i>
 8005322:	e7e4      	b.n	80052ee <_vfiprintf_r+0x1e6>
 8005324:	08005a40 	.word	0x08005a40
 8005328:	08005a4a 	.word	0x08005a4a
 800532c:	00000000 	.word	0x00000000
 8005330:	080050e3 	.word	0x080050e3
 8005334:	08005a46 	.word	0x08005a46

08005338 <_printf_common>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	4616      	mov	r6, r2
 800533e:	4698      	mov	r8, r3
 8005340:	688a      	ldr	r2, [r1, #8]
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005348:	4293      	cmp	r3, r2
 800534a:	bfb8      	it	lt
 800534c:	4613      	movlt	r3, r2
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005354:	4607      	mov	r7, r0
 8005356:	460c      	mov	r4, r1
 8005358:	b10a      	cbz	r2, 800535e <_printf_common+0x26>
 800535a:	3301      	adds	r3, #1
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	0699      	lsls	r1, r3, #26
 8005362:	bf42      	ittt	mi
 8005364:	6833      	ldrmi	r3, [r6, #0]
 8005366:	3302      	addmi	r3, #2
 8005368:	6033      	strmi	r3, [r6, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	f015 0506 	ands.w	r5, r5, #6
 8005370:	d106      	bne.n	8005380 <_printf_common+0x48>
 8005372:	f104 0a19 	add.w	sl, r4, #25
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	6832      	ldr	r2, [r6, #0]
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	42ab      	cmp	r3, r5
 800537e:	dc26      	bgt.n	80053ce <_printf_common+0x96>
 8005380:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	3b00      	subs	r3, #0
 8005388:	bf18      	it	ne
 800538a:	2301      	movne	r3, #1
 800538c:	0692      	lsls	r2, r2, #26
 800538e:	d42b      	bmi.n	80053e8 <_printf_common+0xb0>
 8005390:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005394:	4641      	mov	r1, r8
 8005396:	4638      	mov	r0, r7
 8005398:	47c8      	blx	r9
 800539a:	3001      	adds	r0, #1
 800539c:	d01e      	beq.n	80053dc <_printf_common+0xa4>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	6922      	ldr	r2, [r4, #16]
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	bf02      	ittt	eq
 80053aa:	68e5      	ldreq	r5, [r4, #12]
 80053ac:	6833      	ldreq	r3, [r6, #0]
 80053ae:	1aed      	subeq	r5, r5, r3
 80053b0:	68a3      	ldr	r3, [r4, #8]
 80053b2:	bf0c      	ite	eq
 80053b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b8:	2500      	movne	r5, #0
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bfc4      	itt	gt
 80053be:	1a9b      	subgt	r3, r3, r2
 80053c0:	18ed      	addgt	r5, r5, r3
 80053c2:	2600      	movs	r6, #0
 80053c4:	341a      	adds	r4, #26
 80053c6:	42b5      	cmp	r5, r6
 80053c8:	d11a      	bne.n	8005400 <_printf_common+0xc8>
 80053ca:	2000      	movs	r0, #0
 80053cc:	e008      	b.n	80053e0 <_printf_common+0xa8>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4652      	mov	r2, sl
 80053d2:	4641      	mov	r1, r8
 80053d4:	4638      	mov	r0, r7
 80053d6:	47c8      	blx	r9
 80053d8:	3001      	adds	r0, #1
 80053da:	d103      	bne.n	80053e4 <_printf_common+0xac>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	3501      	adds	r5, #1
 80053e6:	e7c6      	b.n	8005376 <_printf_common+0x3e>
 80053e8:	18e1      	adds	r1, r4, r3
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	2030      	movs	r0, #48	@ 0x30
 80053ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053f2:	4422      	add	r2, r4
 80053f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053fc:	3302      	adds	r3, #2
 80053fe:	e7c7      	b.n	8005390 <_printf_common+0x58>
 8005400:	2301      	movs	r3, #1
 8005402:	4622      	mov	r2, r4
 8005404:	4641      	mov	r1, r8
 8005406:	4638      	mov	r0, r7
 8005408:	47c8      	blx	r9
 800540a:	3001      	adds	r0, #1
 800540c:	d0e6      	beq.n	80053dc <_printf_common+0xa4>
 800540e:	3601      	adds	r6, #1
 8005410:	e7d9      	b.n	80053c6 <_printf_common+0x8e>
	...

08005414 <_printf_i>:
 8005414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	7e0f      	ldrb	r7, [r1, #24]
 800541a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800541c:	2f78      	cmp	r7, #120	@ 0x78
 800541e:	4691      	mov	r9, r2
 8005420:	4680      	mov	r8, r0
 8005422:	460c      	mov	r4, r1
 8005424:	469a      	mov	sl, r3
 8005426:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800542a:	d807      	bhi.n	800543c <_printf_i+0x28>
 800542c:	2f62      	cmp	r7, #98	@ 0x62
 800542e:	d80a      	bhi.n	8005446 <_printf_i+0x32>
 8005430:	2f00      	cmp	r7, #0
 8005432:	f000 80d1 	beq.w	80055d8 <_printf_i+0x1c4>
 8005436:	2f58      	cmp	r7, #88	@ 0x58
 8005438:	f000 80b8 	beq.w	80055ac <_printf_i+0x198>
 800543c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005440:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005444:	e03a      	b.n	80054bc <_printf_i+0xa8>
 8005446:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800544a:	2b15      	cmp	r3, #21
 800544c:	d8f6      	bhi.n	800543c <_printf_i+0x28>
 800544e:	a101      	add	r1, pc, #4	@ (adr r1, 8005454 <_printf_i+0x40>)
 8005450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005454:	080054ad 	.word	0x080054ad
 8005458:	080054c1 	.word	0x080054c1
 800545c:	0800543d 	.word	0x0800543d
 8005460:	0800543d 	.word	0x0800543d
 8005464:	0800543d 	.word	0x0800543d
 8005468:	0800543d 	.word	0x0800543d
 800546c:	080054c1 	.word	0x080054c1
 8005470:	0800543d 	.word	0x0800543d
 8005474:	0800543d 	.word	0x0800543d
 8005478:	0800543d 	.word	0x0800543d
 800547c:	0800543d 	.word	0x0800543d
 8005480:	080055bf 	.word	0x080055bf
 8005484:	080054eb 	.word	0x080054eb
 8005488:	08005579 	.word	0x08005579
 800548c:	0800543d 	.word	0x0800543d
 8005490:	0800543d 	.word	0x0800543d
 8005494:	080055e1 	.word	0x080055e1
 8005498:	0800543d 	.word	0x0800543d
 800549c:	080054eb 	.word	0x080054eb
 80054a0:	0800543d 	.word	0x0800543d
 80054a4:	0800543d 	.word	0x0800543d
 80054a8:	08005581 	.word	0x08005581
 80054ac:	6833      	ldr	r3, [r6, #0]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6032      	str	r2, [r6, #0]
 80054b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054bc:	2301      	movs	r3, #1
 80054be:	e09c      	b.n	80055fa <_printf_i+0x1e6>
 80054c0:	6833      	ldr	r3, [r6, #0]
 80054c2:	6820      	ldr	r0, [r4, #0]
 80054c4:	1d19      	adds	r1, r3, #4
 80054c6:	6031      	str	r1, [r6, #0]
 80054c8:	0606      	lsls	r6, r0, #24
 80054ca:	d501      	bpl.n	80054d0 <_printf_i+0xbc>
 80054cc:	681d      	ldr	r5, [r3, #0]
 80054ce:	e003      	b.n	80054d8 <_printf_i+0xc4>
 80054d0:	0645      	lsls	r5, r0, #25
 80054d2:	d5fb      	bpl.n	80054cc <_printf_i+0xb8>
 80054d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054d8:	2d00      	cmp	r5, #0
 80054da:	da03      	bge.n	80054e4 <_printf_i+0xd0>
 80054dc:	232d      	movs	r3, #45	@ 0x2d
 80054de:	426d      	negs	r5, r5
 80054e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e4:	4858      	ldr	r0, [pc, #352]	@ (8005648 <_printf_i+0x234>)
 80054e6:	230a      	movs	r3, #10
 80054e8:	e011      	b.n	800550e <_printf_i+0xfa>
 80054ea:	6821      	ldr	r1, [r4, #0]
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	0608      	lsls	r0, r1, #24
 80054f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054f4:	d402      	bmi.n	80054fc <_printf_i+0xe8>
 80054f6:	0649      	lsls	r1, r1, #25
 80054f8:	bf48      	it	mi
 80054fa:	b2ad      	uxthmi	r5, r5
 80054fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054fe:	4852      	ldr	r0, [pc, #328]	@ (8005648 <_printf_i+0x234>)
 8005500:	6033      	str	r3, [r6, #0]
 8005502:	bf14      	ite	ne
 8005504:	230a      	movne	r3, #10
 8005506:	2308      	moveq	r3, #8
 8005508:	2100      	movs	r1, #0
 800550a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800550e:	6866      	ldr	r6, [r4, #4]
 8005510:	60a6      	str	r6, [r4, #8]
 8005512:	2e00      	cmp	r6, #0
 8005514:	db05      	blt.n	8005522 <_printf_i+0x10e>
 8005516:	6821      	ldr	r1, [r4, #0]
 8005518:	432e      	orrs	r6, r5
 800551a:	f021 0104 	bic.w	r1, r1, #4
 800551e:	6021      	str	r1, [r4, #0]
 8005520:	d04b      	beq.n	80055ba <_printf_i+0x1a6>
 8005522:	4616      	mov	r6, r2
 8005524:	fbb5 f1f3 	udiv	r1, r5, r3
 8005528:	fb03 5711 	mls	r7, r3, r1, r5
 800552c:	5dc7      	ldrb	r7, [r0, r7]
 800552e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005532:	462f      	mov	r7, r5
 8005534:	42bb      	cmp	r3, r7
 8005536:	460d      	mov	r5, r1
 8005538:	d9f4      	bls.n	8005524 <_printf_i+0x110>
 800553a:	2b08      	cmp	r3, #8
 800553c:	d10b      	bne.n	8005556 <_printf_i+0x142>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	07df      	lsls	r7, r3, #31
 8005542:	d508      	bpl.n	8005556 <_printf_i+0x142>
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	6861      	ldr	r1, [r4, #4]
 8005548:	4299      	cmp	r1, r3
 800554a:	bfde      	ittt	le
 800554c:	2330      	movle	r3, #48	@ 0x30
 800554e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005552:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005556:	1b92      	subs	r2, r2, r6
 8005558:	6122      	str	r2, [r4, #16]
 800555a:	f8cd a000 	str.w	sl, [sp]
 800555e:	464b      	mov	r3, r9
 8005560:	aa03      	add	r2, sp, #12
 8005562:	4621      	mov	r1, r4
 8005564:	4640      	mov	r0, r8
 8005566:	f7ff fee7 	bl	8005338 <_printf_common>
 800556a:	3001      	adds	r0, #1
 800556c:	d14a      	bne.n	8005604 <_printf_i+0x1f0>
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
 8005572:	b004      	add	sp, #16
 8005574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005578:	6823      	ldr	r3, [r4, #0]
 800557a:	f043 0320 	orr.w	r3, r3, #32
 800557e:	6023      	str	r3, [r4, #0]
 8005580:	4832      	ldr	r0, [pc, #200]	@ (800564c <_printf_i+0x238>)
 8005582:	2778      	movs	r7, #120	@ 0x78
 8005584:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005588:	6823      	ldr	r3, [r4, #0]
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	061f      	lsls	r7, r3, #24
 800558e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005592:	d402      	bmi.n	800559a <_printf_i+0x186>
 8005594:	065f      	lsls	r7, r3, #25
 8005596:	bf48      	it	mi
 8005598:	b2ad      	uxthmi	r5, r5
 800559a:	6031      	str	r1, [r6, #0]
 800559c:	07d9      	lsls	r1, r3, #31
 800559e:	bf44      	itt	mi
 80055a0:	f043 0320 	orrmi.w	r3, r3, #32
 80055a4:	6023      	strmi	r3, [r4, #0]
 80055a6:	b11d      	cbz	r5, 80055b0 <_printf_i+0x19c>
 80055a8:	2310      	movs	r3, #16
 80055aa:	e7ad      	b.n	8005508 <_printf_i+0xf4>
 80055ac:	4826      	ldr	r0, [pc, #152]	@ (8005648 <_printf_i+0x234>)
 80055ae:	e7e9      	b.n	8005584 <_printf_i+0x170>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	e7f6      	b.n	80055a8 <_printf_i+0x194>
 80055ba:	4616      	mov	r6, r2
 80055bc:	e7bd      	b.n	800553a <_printf_i+0x126>
 80055be:	6833      	ldr	r3, [r6, #0]
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	6961      	ldr	r1, [r4, #20]
 80055c4:	1d18      	adds	r0, r3, #4
 80055c6:	6030      	str	r0, [r6, #0]
 80055c8:	062e      	lsls	r6, r5, #24
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	d501      	bpl.n	80055d2 <_printf_i+0x1be>
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	e002      	b.n	80055d8 <_printf_i+0x1c4>
 80055d2:	0668      	lsls	r0, r5, #25
 80055d4:	d5fb      	bpl.n	80055ce <_printf_i+0x1ba>
 80055d6:	8019      	strh	r1, [r3, #0]
 80055d8:	2300      	movs	r3, #0
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	4616      	mov	r6, r2
 80055de:	e7bc      	b.n	800555a <_printf_i+0x146>
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	6032      	str	r2, [r6, #0]
 80055e6:	681e      	ldr	r6, [r3, #0]
 80055e8:	6862      	ldr	r2, [r4, #4]
 80055ea:	2100      	movs	r1, #0
 80055ec:	4630      	mov	r0, r6
 80055ee:	f7fa fe27 	bl	8000240 <memchr>
 80055f2:	b108      	cbz	r0, 80055f8 <_printf_i+0x1e4>
 80055f4:	1b80      	subs	r0, r0, r6
 80055f6:	6060      	str	r0, [r4, #4]
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	2300      	movs	r3, #0
 80055fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005602:	e7aa      	b.n	800555a <_printf_i+0x146>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	4632      	mov	r2, r6
 8005608:	4649      	mov	r1, r9
 800560a:	4640      	mov	r0, r8
 800560c:	47d0      	blx	sl
 800560e:	3001      	adds	r0, #1
 8005610:	d0ad      	beq.n	800556e <_printf_i+0x15a>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	079b      	lsls	r3, r3, #30
 8005616:	d413      	bmi.n	8005640 <_printf_i+0x22c>
 8005618:	68e0      	ldr	r0, [r4, #12]
 800561a:	9b03      	ldr	r3, [sp, #12]
 800561c:	4298      	cmp	r0, r3
 800561e:	bfb8      	it	lt
 8005620:	4618      	movlt	r0, r3
 8005622:	e7a6      	b.n	8005572 <_printf_i+0x15e>
 8005624:	2301      	movs	r3, #1
 8005626:	4632      	mov	r2, r6
 8005628:	4649      	mov	r1, r9
 800562a:	4640      	mov	r0, r8
 800562c:	47d0      	blx	sl
 800562e:	3001      	adds	r0, #1
 8005630:	d09d      	beq.n	800556e <_printf_i+0x15a>
 8005632:	3501      	adds	r5, #1
 8005634:	68e3      	ldr	r3, [r4, #12]
 8005636:	9903      	ldr	r1, [sp, #12]
 8005638:	1a5b      	subs	r3, r3, r1
 800563a:	42ab      	cmp	r3, r5
 800563c:	dcf2      	bgt.n	8005624 <_printf_i+0x210>
 800563e:	e7eb      	b.n	8005618 <_printf_i+0x204>
 8005640:	2500      	movs	r5, #0
 8005642:	f104 0619 	add.w	r6, r4, #25
 8005646:	e7f5      	b.n	8005634 <_printf_i+0x220>
 8005648:	08005a51 	.word	0x08005a51
 800564c:	08005a62 	.word	0x08005a62

08005650 <__sflush_r>:
 8005650:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	0716      	lsls	r6, r2, #28
 800565a:	4605      	mov	r5, r0
 800565c:	460c      	mov	r4, r1
 800565e:	d454      	bmi.n	800570a <__sflush_r+0xba>
 8005660:	684b      	ldr	r3, [r1, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dc02      	bgt.n	800566c <__sflush_r+0x1c>
 8005666:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	dd48      	ble.n	80056fe <__sflush_r+0xae>
 800566c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800566e:	2e00      	cmp	r6, #0
 8005670:	d045      	beq.n	80056fe <__sflush_r+0xae>
 8005672:	2300      	movs	r3, #0
 8005674:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005678:	682f      	ldr	r7, [r5, #0]
 800567a:	6a21      	ldr	r1, [r4, #32]
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	d030      	beq.n	80056e2 <__sflush_r+0x92>
 8005680:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	0759      	lsls	r1, r3, #29
 8005686:	d505      	bpl.n	8005694 <__sflush_r+0x44>
 8005688:	6863      	ldr	r3, [r4, #4]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800568e:	b10b      	cbz	r3, 8005694 <__sflush_r+0x44>
 8005690:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	2300      	movs	r3, #0
 8005696:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005698:	6a21      	ldr	r1, [r4, #32]
 800569a:	4628      	mov	r0, r5
 800569c:	47b0      	blx	r6
 800569e:	1c43      	adds	r3, r0, #1
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	d106      	bne.n	80056b2 <__sflush_r+0x62>
 80056a4:	6829      	ldr	r1, [r5, #0]
 80056a6:	291d      	cmp	r1, #29
 80056a8:	d82b      	bhi.n	8005702 <__sflush_r+0xb2>
 80056aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005754 <__sflush_r+0x104>)
 80056ac:	40ca      	lsrs	r2, r1
 80056ae:	07d6      	lsls	r6, r2, #31
 80056b0:	d527      	bpl.n	8005702 <__sflush_r+0xb2>
 80056b2:	2200      	movs	r2, #0
 80056b4:	6062      	str	r2, [r4, #4]
 80056b6:	04d9      	lsls	r1, r3, #19
 80056b8:	6922      	ldr	r2, [r4, #16]
 80056ba:	6022      	str	r2, [r4, #0]
 80056bc:	d504      	bpl.n	80056c8 <__sflush_r+0x78>
 80056be:	1c42      	adds	r2, r0, #1
 80056c0:	d101      	bne.n	80056c6 <__sflush_r+0x76>
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	b903      	cbnz	r3, 80056c8 <__sflush_r+0x78>
 80056c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80056c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056ca:	602f      	str	r7, [r5, #0]
 80056cc:	b1b9      	cbz	r1, 80056fe <__sflush_r+0xae>
 80056ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056d2:	4299      	cmp	r1, r3
 80056d4:	d002      	beq.n	80056dc <__sflush_r+0x8c>
 80056d6:	4628      	mov	r0, r5
 80056d8:	f7ff fbf4 	bl	8004ec4 <_free_r>
 80056dc:	2300      	movs	r3, #0
 80056de:	6363      	str	r3, [r4, #52]	@ 0x34
 80056e0:	e00d      	b.n	80056fe <__sflush_r+0xae>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4628      	mov	r0, r5
 80056e6:	47b0      	blx	r6
 80056e8:	4602      	mov	r2, r0
 80056ea:	1c50      	adds	r0, r2, #1
 80056ec:	d1c9      	bne.n	8005682 <__sflush_r+0x32>
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0c6      	beq.n	8005682 <__sflush_r+0x32>
 80056f4:	2b1d      	cmp	r3, #29
 80056f6:	d001      	beq.n	80056fc <__sflush_r+0xac>
 80056f8:	2b16      	cmp	r3, #22
 80056fa:	d11e      	bne.n	800573a <__sflush_r+0xea>
 80056fc:	602f      	str	r7, [r5, #0]
 80056fe:	2000      	movs	r0, #0
 8005700:	e022      	b.n	8005748 <__sflush_r+0xf8>
 8005702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005706:	b21b      	sxth	r3, r3
 8005708:	e01b      	b.n	8005742 <__sflush_r+0xf2>
 800570a:	690f      	ldr	r7, [r1, #16]
 800570c:	2f00      	cmp	r7, #0
 800570e:	d0f6      	beq.n	80056fe <__sflush_r+0xae>
 8005710:	0793      	lsls	r3, r2, #30
 8005712:	680e      	ldr	r6, [r1, #0]
 8005714:	bf08      	it	eq
 8005716:	694b      	ldreq	r3, [r1, #20]
 8005718:	600f      	str	r7, [r1, #0]
 800571a:	bf18      	it	ne
 800571c:	2300      	movne	r3, #0
 800571e:	eba6 0807 	sub.w	r8, r6, r7
 8005722:	608b      	str	r3, [r1, #8]
 8005724:	f1b8 0f00 	cmp.w	r8, #0
 8005728:	dde9      	ble.n	80056fe <__sflush_r+0xae>
 800572a:	6a21      	ldr	r1, [r4, #32]
 800572c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800572e:	4643      	mov	r3, r8
 8005730:	463a      	mov	r2, r7
 8005732:	4628      	mov	r0, r5
 8005734:	47b0      	blx	r6
 8005736:	2800      	cmp	r0, #0
 8005738:	dc08      	bgt.n	800574c <__sflush_r+0xfc>
 800573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800573e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	4407      	add	r7, r0
 800574e:	eba8 0800 	sub.w	r8, r8, r0
 8005752:	e7e7      	b.n	8005724 <__sflush_r+0xd4>
 8005754:	20400001 	.word	0x20400001

08005758 <_fflush_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	4605      	mov	r5, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b913      	cbnz	r3, 8005768 <_fflush_r+0x10>
 8005762:	2500      	movs	r5, #0
 8005764:	4628      	mov	r0, r5
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	b118      	cbz	r0, 8005772 <_fflush_r+0x1a>
 800576a:	6a03      	ldr	r3, [r0, #32]
 800576c:	b90b      	cbnz	r3, 8005772 <_fflush_r+0x1a>
 800576e:	f7ff faa1 	bl	8004cb4 <__sinit>
 8005772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0f3      	beq.n	8005762 <_fflush_r+0xa>
 800577a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800577c:	07d0      	lsls	r0, r2, #31
 800577e:	d404      	bmi.n	800578a <_fflush_r+0x32>
 8005780:	0599      	lsls	r1, r3, #22
 8005782:	d402      	bmi.n	800578a <_fflush_r+0x32>
 8005784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005786:	f7ff fb9a 	bl	8004ebe <__retarget_lock_acquire_recursive>
 800578a:	4628      	mov	r0, r5
 800578c:	4621      	mov	r1, r4
 800578e:	f7ff ff5f 	bl	8005650 <__sflush_r>
 8005792:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005794:	07da      	lsls	r2, r3, #31
 8005796:	4605      	mov	r5, r0
 8005798:	d4e4      	bmi.n	8005764 <_fflush_r+0xc>
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	059b      	lsls	r3, r3, #22
 800579e:	d4e1      	bmi.n	8005764 <_fflush_r+0xc>
 80057a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057a2:	f7ff fb8d 	bl	8004ec0 <__retarget_lock_release_recursive>
 80057a6:	e7dd      	b.n	8005764 <_fflush_r+0xc>

080057a8 <__swbuf_r>:
 80057a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057aa:	460e      	mov	r6, r1
 80057ac:	4614      	mov	r4, r2
 80057ae:	4605      	mov	r5, r0
 80057b0:	b118      	cbz	r0, 80057ba <__swbuf_r+0x12>
 80057b2:	6a03      	ldr	r3, [r0, #32]
 80057b4:	b90b      	cbnz	r3, 80057ba <__swbuf_r+0x12>
 80057b6:	f7ff fa7d 	bl	8004cb4 <__sinit>
 80057ba:	69a3      	ldr	r3, [r4, #24]
 80057bc:	60a3      	str	r3, [r4, #8]
 80057be:	89a3      	ldrh	r3, [r4, #12]
 80057c0:	071a      	lsls	r2, r3, #28
 80057c2:	d501      	bpl.n	80057c8 <__swbuf_r+0x20>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	b943      	cbnz	r3, 80057da <__swbuf_r+0x32>
 80057c8:	4621      	mov	r1, r4
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 f82a 	bl	8005824 <__swsetup_r>
 80057d0:	b118      	cbz	r0, 80057da <__swbuf_r+0x32>
 80057d2:	f04f 37ff 	mov.w	r7, #4294967295
 80057d6:	4638      	mov	r0, r7
 80057d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	6922      	ldr	r2, [r4, #16]
 80057de:	1a98      	subs	r0, r3, r2
 80057e0:	6963      	ldr	r3, [r4, #20]
 80057e2:	b2f6      	uxtb	r6, r6
 80057e4:	4283      	cmp	r3, r0
 80057e6:	4637      	mov	r7, r6
 80057e8:	dc05      	bgt.n	80057f6 <__swbuf_r+0x4e>
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f7ff ffb3 	bl	8005758 <_fflush_r>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d1ed      	bne.n	80057d2 <__swbuf_r+0x2a>
 80057f6:	68a3      	ldr	r3, [r4, #8]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	60a3      	str	r3, [r4, #8]
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	701e      	strb	r6, [r3, #0]
 8005804:	6962      	ldr	r2, [r4, #20]
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	429a      	cmp	r2, r3
 800580a:	d004      	beq.n	8005816 <__swbuf_r+0x6e>
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	07db      	lsls	r3, r3, #31
 8005810:	d5e1      	bpl.n	80057d6 <__swbuf_r+0x2e>
 8005812:	2e0a      	cmp	r6, #10
 8005814:	d1df      	bne.n	80057d6 <__swbuf_r+0x2e>
 8005816:	4621      	mov	r1, r4
 8005818:	4628      	mov	r0, r5
 800581a:	f7ff ff9d 	bl	8005758 <_fflush_r>
 800581e:	2800      	cmp	r0, #0
 8005820:	d0d9      	beq.n	80057d6 <__swbuf_r+0x2e>
 8005822:	e7d6      	b.n	80057d2 <__swbuf_r+0x2a>

08005824 <__swsetup_r>:
 8005824:	b538      	push	{r3, r4, r5, lr}
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <__swsetup_r+0xa8>)
 8005828:	4605      	mov	r5, r0
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	460c      	mov	r4, r1
 800582e:	b118      	cbz	r0, 8005838 <__swsetup_r+0x14>
 8005830:	6a03      	ldr	r3, [r0, #32]
 8005832:	b90b      	cbnz	r3, 8005838 <__swsetup_r+0x14>
 8005834:	f7ff fa3e 	bl	8004cb4 <__sinit>
 8005838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583c:	0719      	lsls	r1, r3, #28
 800583e:	d422      	bmi.n	8005886 <__swsetup_r+0x62>
 8005840:	06da      	lsls	r2, r3, #27
 8005842:	d407      	bmi.n	8005854 <__swsetup_r+0x30>
 8005844:	2209      	movs	r2, #9
 8005846:	602a      	str	r2, [r5, #0]
 8005848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	f04f 30ff 	mov.w	r0, #4294967295
 8005852:	e033      	b.n	80058bc <__swsetup_r+0x98>
 8005854:	0758      	lsls	r0, r3, #29
 8005856:	d512      	bpl.n	800587e <__swsetup_r+0x5a>
 8005858:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800585a:	b141      	cbz	r1, 800586e <__swsetup_r+0x4a>
 800585c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005860:	4299      	cmp	r1, r3
 8005862:	d002      	beq.n	800586a <__swsetup_r+0x46>
 8005864:	4628      	mov	r0, r5
 8005866:	f7ff fb2d 	bl	8004ec4 <_free_r>
 800586a:	2300      	movs	r3, #0
 800586c:	6363      	str	r3, [r4, #52]	@ 0x34
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	2300      	movs	r3, #0
 8005878:	6063      	str	r3, [r4, #4]
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f043 0308 	orr.w	r3, r3, #8
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	6923      	ldr	r3, [r4, #16]
 8005888:	b94b      	cbnz	r3, 800589e <__swsetup_r+0x7a>
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005890:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005894:	d003      	beq.n	800589e <__swsetup_r+0x7a>
 8005896:	4621      	mov	r1, r4
 8005898:	4628      	mov	r0, r5
 800589a:	f000 f84f 	bl	800593c <__smakebuf_r>
 800589e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a2:	f013 0201 	ands.w	r2, r3, #1
 80058a6:	d00a      	beq.n	80058be <__swsetup_r+0x9a>
 80058a8:	2200      	movs	r2, #0
 80058aa:	60a2      	str	r2, [r4, #8]
 80058ac:	6962      	ldr	r2, [r4, #20]
 80058ae:	4252      	negs	r2, r2
 80058b0:	61a2      	str	r2, [r4, #24]
 80058b2:	6922      	ldr	r2, [r4, #16]
 80058b4:	b942      	cbnz	r2, 80058c8 <__swsetup_r+0xa4>
 80058b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80058ba:	d1c5      	bne.n	8005848 <__swsetup_r+0x24>
 80058bc:	bd38      	pop	{r3, r4, r5, pc}
 80058be:	0799      	lsls	r1, r3, #30
 80058c0:	bf58      	it	pl
 80058c2:	6962      	ldrpl	r2, [r4, #20]
 80058c4:	60a2      	str	r2, [r4, #8]
 80058c6:	e7f4      	b.n	80058b2 <__swsetup_r+0x8e>
 80058c8:	2000      	movs	r0, #0
 80058ca:	e7f7      	b.n	80058bc <__swsetup_r+0x98>
 80058cc:	20000018 	.word	0x20000018

080058d0 <_sbrk_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d06      	ldr	r5, [pc, #24]	@ (80058ec <_sbrk_r+0x1c>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	602b      	str	r3, [r5, #0]
 80058dc:	f7fb fc1a 	bl	8001114 <_sbrk>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_sbrk_r+0x1a>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_sbrk_r+0x1a>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20000a30 	.word	0x20000a30

080058f0 <__swhatbuf_r>:
 80058f0:	b570      	push	{r4, r5, r6, lr}
 80058f2:	460c      	mov	r4, r1
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	2900      	cmp	r1, #0
 80058fa:	b096      	sub	sp, #88	@ 0x58
 80058fc:	4615      	mov	r5, r2
 80058fe:	461e      	mov	r6, r3
 8005900:	da0d      	bge.n	800591e <__swhatbuf_r+0x2e>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005908:	f04f 0100 	mov.w	r1, #0
 800590c:	bf14      	ite	ne
 800590e:	2340      	movne	r3, #64	@ 0x40
 8005910:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005914:	2000      	movs	r0, #0
 8005916:	6031      	str	r1, [r6, #0]
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	b016      	add	sp, #88	@ 0x58
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	466a      	mov	r2, sp
 8005920:	f000 f848 	bl	80059b4 <_fstat_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	dbec      	blt.n	8005902 <__swhatbuf_r+0x12>
 8005928:	9901      	ldr	r1, [sp, #4]
 800592a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800592e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005932:	4259      	negs	r1, r3
 8005934:	4159      	adcs	r1, r3
 8005936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800593a:	e7eb      	b.n	8005914 <__swhatbuf_r+0x24>

0800593c <__smakebuf_r>:
 800593c:	898b      	ldrh	r3, [r1, #12]
 800593e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005940:	079d      	lsls	r5, r3, #30
 8005942:	4606      	mov	r6, r0
 8005944:	460c      	mov	r4, r1
 8005946:	d507      	bpl.n	8005958 <__smakebuf_r+0x1c>
 8005948:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	6123      	str	r3, [r4, #16]
 8005950:	2301      	movs	r3, #1
 8005952:	6163      	str	r3, [r4, #20]
 8005954:	b003      	add	sp, #12
 8005956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005958:	ab01      	add	r3, sp, #4
 800595a:	466a      	mov	r2, sp
 800595c:	f7ff ffc8 	bl	80058f0 <__swhatbuf_r>
 8005960:	9f00      	ldr	r7, [sp, #0]
 8005962:	4605      	mov	r5, r0
 8005964:	4639      	mov	r1, r7
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff fb18 	bl	8004f9c <_malloc_r>
 800596c:	b948      	cbnz	r0, 8005982 <__smakebuf_r+0x46>
 800596e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005972:	059a      	lsls	r2, r3, #22
 8005974:	d4ee      	bmi.n	8005954 <__smakebuf_r+0x18>
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	f043 0302 	orr.w	r3, r3, #2
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	e7e2      	b.n	8005948 <__smakebuf_r+0xc>
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	6020      	str	r0, [r4, #0]
 8005986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598a:	81a3      	strh	r3, [r4, #12]
 800598c:	9b01      	ldr	r3, [sp, #4]
 800598e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005992:	b15b      	cbz	r3, 80059ac <__smakebuf_r+0x70>
 8005994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005998:	4630      	mov	r0, r6
 800599a:	f000 f81d 	bl	80059d8 <_isatty_r>
 800599e:	b128      	cbz	r0, 80059ac <__smakebuf_r+0x70>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f023 0303 	bic.w	r3, r3, #3
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	431d      	orrs	r5, r3
 80059b0:	81a5      	strh	r5, [r4, #12]
 80059b2:	e7cf      	b.n	8005954 <__smakebuf_r+0x18>

080059b4 <_fstat_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d07      	ldr	r5, [pc, #28]	@ (80059d4 <_fstat_r+0x20>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	4611      	mov	r1, r2
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	f7fb fb7f 	bl	80010c4 <_fstat>
 80059c6:	1c43      	adds	r3, r0, #1
 80059c8:	d102      	bne.n	80059d0 <_fstat_r+0x1c>
 80059ca:	682b      	ldr	r3, [r5, #0]
 80059cc:	b103      	cbz	r3, 80059d0 <_fstat_r+0x1c>
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	bd38      	pop	{r3, r4, r5, pc}
 80059d2:	bf00      	nop
 80059d4:	20000a30 	.word	0x20000a30

080059d8 <_isatty_r>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4d06      	ldr	r5, [pc, #24]	@ (80059f4 <_isatty_r+0x1c>)
 80059dc:	2300      	movs	r3, #0
 80059de:	4604      	mov	r4, r0
 80059e0:	4608      	mov	r0, r1
 80059e2:	602b      	str	r3, [r5, #0]
 80059e4:	f7fb fb7e 	bl	80010e4 <_isatty>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d102      	bne.n	80059f2 <_isatty_r+0x1a>
 80059ec:	682b      	ldr	r3, [r5, #0]
 80059ee:	b103      	cbz	r3, 80059f2 <_isatty_r+0x1a>
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	bd38      	pop	{r3, r4, r5, pc}
 80059f4:	20000a30 	.word	0x20000a30

080059f8 <_init>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	bf00      	nop
 80059fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059fe:	bc08      	pop	{r3}
 8005a00:	469e      	mov	lr, r3
 8005a02:	4770      	bx	lr

08005a04 <_fini>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr
